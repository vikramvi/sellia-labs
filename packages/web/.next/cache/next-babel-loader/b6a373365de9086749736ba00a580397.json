{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/AccountSetting/AddMobileNumber/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport { withFormik } from 'formik';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport Input from '../../../components/Input';\nimport MobileNumberList from './MobileNumberList';\nimport { useMutation } from '@apollo/react-hooks';\nimport { GET_VERIFICATION_CODE, VERIFY_CODE, UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport AuthHelper from '../../../helpers/authHelper';\nconst MobileNumbersEnhancer = withFormik({\n  mapPropsToValues: props => {\n    const {\n      author,\n      loading\n    } = props;\n    const mobile = !loading && author && author.mobile && author.mobile.length ? author.mobile : [];\n    const number = '';\n    const code = '';\n    return {\n      mobile,\n      number,\n      code\n    };\n  },\n  handleSubmit: (values, {\n    props,\n    setSubmitting\n  }) => {}\n});\n\nconst Recaptcha = () => {\n  useEffect(() => {\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha');\n    window.recaptchaVerifier.render().then(function (widgetId) {\n      window.recaptchaWidgetId = widgetId;\n    });\n  }, []);\n  return __jsx(\"div\", {\n    id: \"recaptcha\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }\n  });\n};\n\nconst AddMobileNumber = ({\n  values,\n  touched,\n  handleChange,\n  handleSubmit,\n  userInfo,\n  showModal,\n  author,\n  setFieldValue,\n  loading\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    confirmResult: false,\n    isMobileVerified: false,\n    wrongCode: false\n  });\n  const [handleAuthorMutation, {\n    data\n  }] = useMutation(UPDATE_AUTHOR);\n  const {\n    confirmResult,\n    isMobileVerified,\n    wrongCode\n  } = state;\n\n  const HandleStoringMobileNumber = async () => {\n    await AuthHelper.refreshToken();\n    await handleAuthorMutation({\n      variables: {\n        author: _objectSpread(_objectSpread({}, author), {}, {\n          mobile: values.mobile\n        })\n      }\n    });\n  };\n\n  const handleRemove = async item => {\n    await AuthHelper.refreshToken();\n    let mobileNumber = values.mobile;\n    const index = mobileNumber.indexOf(item);\n\n    if (index > -1) {\n      mobileNumber.splice(index, 1);\n    }\n\n    setFieldValue('mobile', mobileNumber);\n    await handleAuthorMutation({\n      variables: {\n        author: _objectSpread(_objectSpread({}, author), {}, {\n          mobile: values.mobile\n        })\n      }\n    });\n  };\n\n  const handleGetVerificationCode = async () => {\n    const confirmResult = await AuthHelper.login('phone', null, null, values.number);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      confirmResult\n    }));\n  };\n\n  const handleVerifyCode = async () => {\n    let mobileNumbers = values.mobile;\n\n    try {\n      const isVerified = await AuthHelper.confirmVerification(state.confirmResult, values.code);\n\n      if (!isVerified.error) {\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          isMobileVerified: true\n        }));\n        mobileNumbers.push({\n          number: values.number\n        });\n        setFieldValue('mobile', mobileNumbers);\n      } else {\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          wrongCode: true\n        }));\n      }\n    } catch (error) {\n      console.error(error);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        wrongCode: true\n      }));\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Mobile Number Settings\",\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600,\n    mb: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), values.mobile && __jsx(MobileNumberList, {\n    items: values.mobile,\n    handleRemoveMobile: item => handleRemove(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }), !confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Enter Number(ex. +30*********)\",\n    changed: handleChange('number'),\n    value: values.number,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }), __jsx(Recaptcha, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    onClick: handleGetVerificationCode,\n    title: \"Send Verification Code\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 30,\n    width: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  })) : null, !isMobileVerified && confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Verify Code\",\n    changed: handleChange('code'),\n    value: values.code,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    onClick: handleVerifyCode,\n    title: \"Verify Code\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  })) : null, isMobileVerified ? __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      color: '#30C56D',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \"Your number is verified!\"), __jsx(Button, {\n    onClick: HandleStoringMobileNumber,\n    title: \"Save Mobile Number\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 30,\n    width: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  })) : '', !isMobileVerified && wrongCode ? __jsx(\"p\", {\n    style: {\n      color: '#EF5A5A',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, \"Invalid code!\") : '');\n};\n\nexport default MobileNumbersEnhancer(AddMobileNumber);","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/AccountSetting/AddMobileNumber/index.js"],"names":["React","useState","useEffect","firebase","withFormik","Heading","Button","Input","MobileNumberList","useMutation","GET_VERIFICATION_CODE","VERIFY_CODE","UPDATE_AUTHOR","AuthHelper","MobileNumbersEnhancer","mapPropsToValues","props","author","loading","mobile","length","number","code","handleSubmit","values","setSubmitting","Recaptcha","window","recaptchaVerifier","auth","RecaptchaVerifier","render","then","widgetId","recaptchaWidgetId","AddMobileNumber","touched","handleChange","userInfo","showModal","setFieldValue","state","setState","confirmResult","isMobileVerified","wrongCode","handleAuthorMutation","data","HandleStoringMobileNumber","refreshToken","variables","handleRemove","item","mobileNumber","index","indexOf","splice","handleGetVerificationCode","login","handleVerifyCode","mobileNumbers","isVerified","confirmVerification","error","push","console","type","required","color","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport { withFormik } from 'formik';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport Input from '../../../components/Input';\n\nimport MobileNumberList from './MobileNumberList';\nimport { useMutation } from '@apollo/react-hooks';\nimport {\n  GET_VERIFICATION_CODE,\n  VERIFY_CODE,\n  UPDATE_AUTHOR,\n} from 'core/graphql/Mutations';\nimport AuthHelper from '../../../helpers/authHelper';\n\nconst MobileNumbersEnhancer = withFormik({\n  mapPropsToValues: props => {\n    const { author, loading } = props;\n    const mobile =\n      !loading && author && author.mobile && author.mobile.length\n        ? author.mobile\n        : [];\n    const number = '';\n    const code = '';\n    return {\n      mobile,\n      number,\n      code,\n    };\n  },\n  handleSubmit: (values, { props, setSubmitting }) => {},\n});\n\nconst Recaptcha = () => {\n  useEffect(() => {\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha');\n\n    window.recaptchaVerifier.render().then(function(widgetId) {\n      window.recaptchaWidgetId = widgetId;\n    });\n  }, []);\n  return <div id=\"recaptcha\" />;\n};\n\nconst AddMobileNumber = ({\n  values,\n  touched,\n  handleChange,\n  handleSubmit,\n  userInfo,\n  showModal,\n  author,\n  setFieldValue,\n  loading,\n}) => {\n  const [state, setState] = useState({\n    confirmResult: false,\n    isMobileVerified: false,\n    wrongCode: false,\n  });\n  const [handleAuthorMutation, { data }] = useMutation(UPDATE_AUTHOR);\n  const { confirmResult, isMobileVerified, wrongCode } = state;\n  const HandleStoringMobileNumber = async () => {\n    await AuthHelper.refreshToken();\n    await handleAuthorMutation({\n      variables: {\n        author: {\n          ...author,\n          mobile: values.mobile,\n        },\n      },\n    });\n  };\n  const handleRemove = async item => {\n    await AuthHelper.refreshToken();\n    let mobileNumber = values.mobile;\n    const index = mobileNumber.indexOf(item);\n    if (index > -1) {\n      mobileNumber.splice(index, 1);\n    }\n    setFieldValue('mobile', mobileNumber);\n    await handleAuthorMutation({\n      variables: {\n        author: {\n          ...author,\n          mobile: values.mobile,\n        },\n      },\n    });\n  };\n\n  const handleGetVerificationCode = async () => {\n    const confirmResult = await AuthHelper.login(\n      'phone',\n      null,\n      null,\n      values.number\n    );\n    setState({ ...state, confirmResult });\n  };\n\n  const handleVerifyCode = async () => {\n    let mobileNumbers = values.mobile;\n    try {\n      const isVerified = await AuthHelper.confirmVerification(\n        state.confirmResult,\n        values.code\n      );\n      if (!isVerified.error) {\n        setState({ ...state, isMobileVerified: true });\n        mobileNumbers.push({ number: values.number });\n        setFieldValue('mobile', mobileNumbers);\n      } else {\n        setState({ ...state, wrongCode: true });\n      }\n    } catch (error) {\n      console.error(error);\n      setState({ ...state, wrongCode: true });\n    }\n  };\n\n  return (\n    <>\n      <Heading\n        as=\"h3\"\n        content=\"Mobile Number Settings\"\n        fontSize={18}\n        color=\"#333333\"\n        fontWeight={600}\n        mb={30}\n      />\n      {values.mobile && (\n        <MobileNumberList\n          items={values.mobile}\n          handleRemoveMobile={item => handleRemove(item)}\n        />\n      )}\n\n      {!confirmResult ? (\n        <>\n          <Input\n            elementType=\"input\"\n            elementConfig={{\n              type: 'text',\n              required: 'required',\n            }}\n            label=\"Enter Number(ex. +30*********)\"\n            changed={handleChange('number')}\n            value={values.number}\n            touched={touched}\n          />\n\n          <Recaptcha />\n\n          <Button\n            onClick={handleGetVerificationCode}\n            title=\"Send Verification Code\"\n            bg=\"#30C56D\"\n            color=\"#ffffff\"\n            mt={30}\n            width={1}\n          />\n        </>\n      ) : null}\n      {!isMobileVerified && confirmResult ? (\n        <>\n          <Input\n            elementType=\"input\"\n            elementConfig={{\n              type: 'text',\n              required: 'required',\n            }}\n            label=\"Verify Code\"\n            changed={handleChange('code')}\n            value={values.code}\n            touched={touched}\n          />\n          <Button\n            onClick={handleVerifyCode}\n            title=\"Verify Code\"\n            bg=\"#30C56D\"\n            color=\"#ffffff\"\n            width={1}\n          />\n        </>\n      ) : null}\n      {isMobileVerified ? (\n        <>\n          <p style={{ color: '#30C56D', textAlign: 'center' }}>\n            Your number is verified!\n          </p>\n          <Button\n            onClick={HandleStoringMobileNumber}\n            title=\"Save Mobile Number\"\n            bg=\"#30C56D\"\n            color=\"#ffffff\"\n            mt={30}\n            width={1}\n          />\n        </>\n      ) : (\n        ''\n      )}\n      {!isMobileVerified && wrongCode ? (\n        <p style={{ color: '#EF5A5A', textAlign: 'center' }}>Invalid code!</p>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default MobileNumbersEnhancer(AddMobileNumber);\n"]},"metadata":{},"sourceType":"module"}