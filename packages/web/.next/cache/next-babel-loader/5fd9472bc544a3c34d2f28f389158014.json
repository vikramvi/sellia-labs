{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/components/InputGooglePlace/altered.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport Input from '../Input';\nimport LocationWrapper, { SearchResultWrapper } from './style';\n\nvar LocationSearchInput = function LocationSearchInput(props) {\n  var handleSelect = function handleSelect(selected) {\n    var address = selected;\n    props.handleAddress(address);\n    geocodeByAddress(selected).then(function (results) {\n      return getLatLng(results[0]);\n    }).then(function (latLng) {\n      return props.handleLocation(latLng, address);\n    })[\"catch\"](function (error) {\n      return console.error('Error', error);\n    });\n  };\n\n  var handleCloseClick = function handleCloseClick() {\n    setAddressState(_objectSpread(_objectSpread({}, addressState), {}, {\n      address: ''\n    }));\n  };\n\n  return __jsx(PlacesAutocomplete, {\n    value: props.address,\n    onChange: props.handleChange,\n    onSelect: handleSelect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, function (_ref) {\n    var getInputProps = _ref.getInputProps,\n        suggestions = _ref.suggestions,\n        getSuggestionItemProps = _ref.getSuggestionItemProps,\n        loading = _ref.loading;\n    return __jsx(LocationWrapper, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, __jsx(Input, _extends({}, getInputProps(), {\n      required: \"required\",\n      label: \"Location\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }))), props.address && __jsx(SearchResultWrapper, {\n      className: \"autocomplete-dropdown-container\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, loading && __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 27\n      }\n    }, \"Loading...\"), suggestions.map(function (suggestion) {\n      var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n      var style = suggestion.active ? {\n        backgroundColor: '#e2e2e2'\n      } : {\n        backgroundColor: '#ffffff'\n      };\n      return __jsx(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n        className: className,\n        style: style\n      }), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 19\n        }\n      }), __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }\n      }, suggestion.description));\n    })));\n  });\n};\n\n_c = LocationSearchInput;\nexport default LocationSearchInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationSearchInput\");","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/components/InputGooglePlace/altered.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","Input","LocationWrapper","SearchResultWrapper","LocationSearchInput","props","handleSelect","selected","address","handleAddress","then","results","latLng","handleLocation","error","console","handleCloseClick","setAddressState","addressState","handleChange","getInputProps","suggestions","getSuggestionItemProps","loading","map","suggestion","className","active","style","backgroundColor","description"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,eAAP,IAA0BC,mBAA1B,QAAqD,SAArD;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,KAAK,EAAI;AACnC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,QAAQ,EAAI;AAC/B,QAAMC,OAAO,GAAGD,QAAhB;AACAF,IAAAA,KAAK,CAACI,aAAN,CAAoBD,OAApB;AACAT,IAAAA,gBAAgB,CAACQ,QAAD,CAAhB,CACGG,IADH,CACQ,UAAAC,OAAO;AAAA,aAAIX,SAAS,CAACW,OAAO,CAAC,CAAD,CAAR,CAAb;AAAA,KADf,EAEGD,IAFH,CAEQ,UAAAE,MAAM;AAAA,aAAIP,KAAK,CAACQ,cAAN,CAAqBD,MAArB,EAA6BJ,OAA7B,CAAJ;AAAA,KAFd,WAGS,UAAAM,KAAK;AAAA,aAAIC,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAAJ;AAAA,KAHd;AAID,GAPD;;AASA,MAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BC,IAAAA,eAAe,iCAAMC,YAAN;AAAoBV,MAAAA,OAAO,EAAE;AAA7B,OAAf;AACD,GAFD;;AAIA,SACE,MAAC,kBAAD;AACE,IAAA,KAAK,EAAEH,KAAK,CAACG,OADf;AAEE,IAAA,QAAQ,EAAEH,KAAK,CAACc,YAFlB;AAGE,IAAA,QAAQ,EAAEb,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG;AAAA,QAAGc,aAAH,QAAGA,aAAH;AAAA,QAAkBC,WAAlB,QAAkBA,WAAlB;AAAA,QAA+BC,sBAA/B,QAA+BA,sBAA/B;AAAA,QAAuDC,OAAvD,QAAuDA,OAAvD;AAAA,WACC,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,KAAD,eAAWH,aAAa,EAAxB;AAA4B,MAAA,QAAQ,EAAC,UAArC;AAAgD,MAAA,KAAK,EAAC,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF,EAOGf,KAAK,CAACG,OAAN,IACC,MAAC,mBAAD;AAAqB,MAAA,SAAS,EAAC,iCAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGe,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADd,EAEGF,WAAW,CAACG,GAAZ,CAAgB,UAAAC,UAAU,EAAI;AAC7B,UAAMC,SAAS,GAAGD,UAAU,CAACE,MAAX,GACd,yBADc,GAEd,iBAFJ,CAD6B,CAI7B;;AACA,UAAMC,KAAK,GAAGH,UAAU,CAACE,MAAX,GACV;AACEE,QAAAA,eAAe,EAAE;AADnB,OADU,GAIV;AACEA,QAAAA,eAAe,EAAE;AADnB,OAJJ;AAOA,aACE,0BACMP,sBAAsB,CAACG,UAAD,EAAa;AACrCC,QAAAA,SAAS,EAATA,SADqC;AAErCE,QAAAA,KAAK,EAALA;AAFqC,OAAb,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOH,UAAU,CAACK,WAAlB,CANF,CADF;AAUD,KAtBA,CAFH,CARJ,CADD;AAAA,GALH,CADF;AA8CD,CA5DD;;KAAM1B,mB;AA8DN,eAAeA,mBAAf","sourcesContent":["import React, { useState } from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nimport Input from '../Input';\nimport LocationWrapper, { SearchResultWrapper } from './style';\n\nconst LocationSearchInput = props => {\n  const handleSelect = selected => {\n    const address = selected;\n    props.handleAddress(address);\n    geocodeByAddress(selected)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => props.handleLocation(latLng, address))\n      .catch(error => console.error('Error', error));\n  };\n\n  const handleCloseClick = () => {\n    setAddressState({ ...addressState, address: '' });\n  };\n\n  return (\n    <PlacesAutocomplete\n      value={props.address}\n      onChange={props.handleChange}\n      onSelect={handleSelect}\n    >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <LocationWrapper>\n          <div>\n            <Input {...getInputProps()} required=\"required\" label=\"Location\" />\n            {/* {addressState.address.length > 0 && (\n                <button onClick={handleCloseClick}>x</button>\n              )} */}\n          </div>\n          {props.address && (\n            <SearchResultWrapper className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? {\n                      backgroundColor: '#e2e2e2',\n                    }\n                  : {\n                      backgroundColor: '#ffffff',\n                    };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </SearchResultWrapper>\n          )}\n        </LocationWrapper>\n      )}\n    </PlacesAutocomplete>\n  );\n};\n\nexport default LocationSearchInput;\n"]},"metadata":{},"sourceType":"module"}