{"ast":null,"code":"/**\n * Add the element to the array if not already exists and remove if already exists\n * @param {String|| Number} needle\n * @param {Array} haystack\n */\nexport const addOrRemove = (needle, haystack = []) => {\n  for (let index in haystack) {\n    if (haystack[index] === needle) {\n      haystack.splice(index, 1);\n      return haystack;\n    }\n  }\n\n  haystack.push(needle);\n  return haystack;\n};\n/**\n * Find out is a ny data exists in any array\n * @param {String | Number} needle\n * @param {Array} haystack\n */\n\nexport const inArray = (needle, haystack) => {\n  for (var i in haystack) {\n    if (haystack[i] == needle) {\n      return true;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/helpers/index.js"],"names":["addOrRemove","needle","haystack","index","splice","push","inArray","i"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAG,CAACC,MAAD,EAASC,QAAQ,GAAG,EAApB,KAA2B;AACpD,OAAK,IAAIC,KAAT,IAAkBD,QAAlB,EAA4B;AAC1B,QAAIA,QAAQ,CAACC,KAAD,CAAR,KAAoBF,MAAxB,EAAgC;AAC9BC,MAAAA,QAAQ,CAACE,MAAT,CAAgBD,KAAhB,EAAuB,CAAvB;AACA,aAAOD,QAAP;AACD;AACF;;AACDA,EAAAA,QAAQ,CAACG,IAAT,CAAcJ,MAAd;AACA,SAAOC,QAAP;AACD,CATM;AAWP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,OAAO,GAAG,CAACL,MAAD,EAASC,QAAT,KAAsB;AAC3C,OAAK,IAAIK,CAAT,IAAcL,QAAd,EAAwB;AACtB,QAAIA,QAAQ,CAACK,CAAD,CAAR,IAAeN,MAAnB,EAA2B;AACzB,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAPM","sourcesContent":["/**\n * Add the element to the array if not already exists and remove if already exists\n * @param {String|| Number} needle\n * @param {Array} haystack\n */\nexport const addOrRemove = (needle, haystack = []) => {\n  for (let index in haystack) {\n    if (haystack[index] === needle) {\n      haystack.splice(index, 1);\n      return haystack;\n    }\n  }\n  haystack.push(needle);\n  return haystack;\n};\n\n/**\n * Find out is a ny data exists in any array\n * @param {String | Number} needle\n * @param {Array} haystack\n */\nexport const inArray = (needle, haystack) => {\n  for (var i in haystack) {\n    if (haystack[i] == needle) {\n      return true;\n    }\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}