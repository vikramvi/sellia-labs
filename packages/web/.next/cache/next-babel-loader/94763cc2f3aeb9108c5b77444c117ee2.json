{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport Router from 'next/router';\nimport AuthHeader from '../../components/AuthHeader';\nimport Button from 'reusecore/src/elements/Button';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from '../SignInForm/style';\nimport Input from '../../components/Input';\nimport AuthHelper from '../../helpers/authHelper';\nvar ForgetPasswordEnhancer = withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      email: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Invalid email address').required('Email is required!')\n  })\n});\n\nvar ForgetPasswordForm = function ForgetPasswordForm(_ref) {\n  var values = _ref.values,\n      handleChange = _ref.handleChange,\n      touched = _ref.touched,\n      errors = _ref.errors,\n      handleSubmit = _ref.handleSubmit,\n      handleBlur = _ref.handleBlur;\n\n  var _useState = useState(''),\n      message = _useState[0],\n      setMessage = _useState[1];\n\n  handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var hasPasswordReset;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return AuthHelper.forgetPass(values.email);\n\n            case 2:\n              hasPasswordReset = _context.sent;\n\n              if (hasPasswordReset && !hasPasswordReset.error) {\n                setMessage('Email Sent Successfully');\n              } else if (hasPasswordReset.error) {\n                setMessage(hasPasswordReset.error.message);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(AuthHeader, {\n    title: {\n      content: 'Forget Your Password?'\n    }\n  }), __jsx(FormGroup, {\n    className: errors.email ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'email',\n      required: 'required'\n    },\n    onBlur: handleBlur('email'),\n    value: values.email,\n    error: errors.email,\n    touched: touched,\n    label: \"Email Address\",\n    changed: handleChange('email')\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.email && touched.email && errors.email)), message ? __jsx(Box, {\n    flexBox: true,\n    mt: 20,\n    mb: 15,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(ErrorNotification, null, message)) : '', __jsx(Button, {\n    disabled: Object.keys(errors).length !== 0,\n    onClick: handleSubmit,\n    title: \"Submit\",\n    width: 1,\n    mt: 10\n  }), __jsx(Button, {\n    title: \"Not Now\",\n    color: \"#8C8C8C\",\n    variant: \"textButton\",\n    width: 1,\n    onClick: function onClick() {\n      return Router.push('/signin');\n    }\n  }));\n};\n\nexport default ForgetPasswordEnhancer(ForgetPasswordForm);","map":null,"metadata":{},"sourceType":"module"}