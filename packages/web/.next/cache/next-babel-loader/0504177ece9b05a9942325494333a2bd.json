{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Profile/userDraft.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport { PostLoader } from '../../components/Placeholder';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_DRAFT_POST } from 'core/graphql/Profile.query';\nimport { CURRENCY } from '../../Config';\nimport PostCard from '../../components/PostCard';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\nexport default withRouter(function UserListingPost({\n  router: {\n    query: {\n      username\n    }\n  }\n}) {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  let QUERY_VARIABLES;\n  QUERY_VARIABLES = {\n    USERNAME: username,\n    LIMIT: 12\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_DRAFT_POST, {\n    variables: QUERY_VARIABLES\n  });\n  const userDraftPosts = data && data.author && data.author.draft && data.author.draft.data ? data.author.draft.data : [];\n  const totalPost = data && data.author && data.author.draft ? data.author.draft.total : 0;\n  const postCount = userDraftPosts.length;\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  });\n  return __jsx(Grid, {\n    style: {\n      paddingLeft: 15,\n      paddingRight: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, !loading && userDraftPosts.length === 0 ? __jsx(NoItemFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }) : __jsx(ListGrid, {\n    data: userDraftPosts,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: ['100%', '50%', '33.33%', '25%'],\n    component: item => {\n      const postImg = item.image ? item.image.url : '';\n      const postFallbackImage = item.image ? item.image.largeUrl : '';\n      return __jsx(Link, {\n        href: `${SINGLE_POST_PAGE}/${item.slug}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, __jsx(PostCard, {\n        currency: CURRENCY,\n        title: item.title,\n        price: item.price,\n        imageSrc: [postImg, postFallbackImage],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 19\n        }\n      })));\n    },\n    loading: loading ? loading : loadingMore,\n    placeholder: __jsx(PostLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 24\n      }\n    }),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          const oldPosts = prev.author.draft.data;\n          const newPosts = fetchMoreResult.author.draft.data;\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              const concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.author.draft.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }));\n});","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Profile/userDraft.js"],"names":["React","useState","Link","withRouter","PostLoader","Grid","SINGLE_POST_PAGE","useQuery","GET_DRAFT_POST","CURRENCY","PostCard","ListGrid","NoItemFound","OnError","UserListingPost","router","query","username","loadingMore","toggleLoading","page","paginate","QUERY_VARIABLES","USERNAME","LIMIT","data","loading","error","fetchMore","variables","userDraftPosts","author","draft","totalPost","total","postCount","length","paddingLeft","paddingRight","item","postImg","image","url","postFallbackImage","largeUrl","slug","title","price","updateQuery","prev","fetchMoreResult","oldPosts","newPosts","concatedPosts","concat"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,eAAeV,UAAU,CAAC,SAASW,eAAT,CAAyB;AACjDC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADD;AADyC,CAAzB,EAIvB;AACD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAA+BlB,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM;AAAA,OAACmB,IAAD;AAAA,OAAOC;AAAP,MAAmBpB,QAAQ,CAAC,CAAD,CAAjC;AAEA,MAAIqB,eAAJ;AACAA,EAAAA,eAAe,GAAG;AAChBC,IAAAA,QAAQ,EAAEN,QADM;AAEhBO,IAAAA,KAAK,EAAE;AAFS,GAAlB;AAIA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAsCrB,QAAQ,CAACC,cAAD,EAAiB;AACnEqB,IAAAA,SAAS,EAAEP;AADwD,GAAjB,CAApD;AAIA,QAAMQ,cAAc,GAClBL,IAAI,IAAIA,IAAI,CAACM,MAAb,IAAuBN,IAAI,CAACM,MAAL,CAAYC,KAAnC,IAA4CP,IAAI,CAACM,MAAL,CAAYC,KAAZ,CAAkBP,IAA9D,GACIA,IAAI,CAACM,MAAL,CAAYC,KAAZ,CAAkBP,IADtB,GAEI,EAHN;AAKA,QAAMQ,SAAS,GACbR,IAAI,IAAIA,IAAI,CAACM,MAAb,IAAuBN,IAAI,CAACM,MAAL,CAAYC,KAAnC,GAA2CP,IAAI,CAACM,MAAL,CAAYC,KAAZ,CAAkBE,KAA7D,GAAqE,CADvE;AAEA,QAAMC,SAAS,GAAGL,cAAc,CAACM,MAAjC;AACA,MAAIT,KAAJ,EAAW,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEX,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEU,MAAAA,WAAW,EAAE,EAAf;AAAmBC,MAAAA,YAAY,EAAE;AAAjC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACZ,OAAD,IAAYI,cAAc,CAACM,MAAf,KAA0B,CAAtC,GACC,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,MAAC,QAAD;AACE,IAAA,IAAI,EAAEN,cADR;AAEE,IAAA,SAAS,EAAEG,SAFb;AAGE,IAAA,SAAS,EAAEE,SAHb;AAIE,IAAA,WAAW,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,EAA0B,KAA1B,CAJf;AAKE,IAAA,SAAS,EAAEI,IAAI,IAAI;AACjB,YAAMC,OAAO,GAAGD,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAL,CAAWC,GAAxB,GAA8B,EAA9C;AACA,YAAMC,iBAAiB,GAAGJ,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAL,CAAWG,QAAxB,GAAmC,EAA7D;AACA,aACE,MAAC,IAAD;AAAM,QAAA,IAAI,EAAG,GAAEtC,gBAAiB,IAAGiC,IAAI,CAACM,IAAK,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,QAAD;AACE,QAAA,QAAQ,EAAEpC,QADZ;AAEE,QAAA,KAAK,EAAE8B,IAAI,CAACO,KAFd;AAGE,QAAA,KAAK,EAAEP,IAAI,CAACQ,KAHd;AAIE,QAAA,QAAQ,EAAE,CAACP,OAAD,EAAUG,iBAAV,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AAYD,KApBH;AAqBE,IAAA,OAAO,EAAEjB,OAAO,GAAGA,OAAH,GAAaR,WArB/B;AAsBE,IAAA,WAAW,EAAE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBf;AAuBE,IAAA,KAAK,EAAEI,eAAe,CAACE,KAvBzB;AAwBE,IAAA,cAAc,EAAEE,OAAO,IAAI;AACzBP,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,QAAQ,CAACD,IAAI,GAAG,CAAR,CAAR;AACAQ,MAAAA,SAAS,CAAC;AACRC,QAAAA,SAAS,EAAE;AACTT,UAAAA,IAAI,EAAEA,IAAI,GAAG;AADJ,SADH;AAIR4B,QAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,UAAAA;AAAF,SAAP,KAA+B;AAC1C,cAAI,CAACA,eAAL,EAAsB;AACpB/B,YAAAA,aAAa,CAAC,KAAD,CAAb;AACA,mBAAO8B,IAAP;AACD;;AACD,gBAAME,QAAQ,GAAGF,IAAI,CAAClB,MAAL,CAAYC,KAAZ,CAAkBP,IAAnC;AACA,gBAAM2B,QAAQ,GAAGF,eAAe,CAACnB,MAAhB,CAAuBC,KAAvB,CAA6BP,IAA9C;;AACA,cAAIU,SAAS,IAAIF,SAAjB,EAA4B;AAC1B,gBAAIE,SAAS,IAAIF,SAAjB,EAA4B;AAC1Bd,cAAAA,aAAa,CAAC,KAAD,CAAb;AACA,oBAAMkC,aAAa,GAAGF,QAAQ,CAACG,MAAT,CAAgBF,QAAhB,CAAtB;AACAF,cAAAA,eAAe,CAACnB,MAAhB,CAAuBC,KAAvB,CAA6BP,IAA7B,GAAoC4B,aAApC;AACA,qBAAOH,eAAP;AACD;AACF;AACF;AAnBO,OAAD,CAAT;AAqBD,KAhDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF;AA0DD,CArFwB,CAAzB","sourcesContent":["import React, { useState } from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport { PostLoader } from '../../components/Placeholder';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_DRAFT_POST } from 'core/graphql/Profile.query';\nimport { CURRENCY } from '../../Config';\nimport PostCard from '../../components/PostCard';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\n\nexport default withRouter(function UserListingPost({\n  router: {\n    query: { username },\n  },\n}) {\n  const [loadingMore, toggleLoading] = useState(false);\n  const [page, paginate] = useState(1);\n\n  let QUERY_VARIABLES;\n  QUERY_VARIABLES = {\n    USERNAME: username,\n    LIMIT: 12,\n  };\n  const { data, loading, error, fetchMore } = useQuery(GET_DRAFT_POST, {\n    variables: QUERY_VARIABLES,\n  });\n\n  const userDraftPosts =\n    data && data.author && data.author.draft && data.author.draft.data\n      ? data.author.draft.data\n      : [];\n\n  const totalPost =\n    data && data.author && data.author.draft ? data.author.draft.total : 0;\n  const postCount = userDraftPosts.length;\n  if (error) return <OnError />;\n\n  return (\n    <Grid style={{ paddingLeft: 15, paddingRight: 15 }}>\n      {!loading && userDraftPosts.length === 0 ? (\n        <NoItemFound />\n      ) : (\n        <ListGrid\n          data={userDraftPosts}\n          totalPost={totalPost}\n          postCount={postCount}\n          columnWidth={['100%', '50%', '33.33%', '25%']}\n          component={item => {\n            const postImg = item.image ? item.image.url : '';\n            const postFallbackImage = item.image ? item.image.largeUrl : '';\n            return (\n              <Link href={`${SINGLE_POST_PAGE}/${item.slug}`}>\n                <a>\n                  <PostCard\n                    currency={CURRENCY}\n                    title={item.title}\n                    price={item.price}\n                    imageSrc={[postImg, postFallbackImage]}\n                  />\n                </a>\n              </Link>\n            );\n          }}\n          loading={loading ? loading : loadingMore}\n          placeholder={<PostLoader />}\n          limit={QUERY_VARIABLES.LIMIT}\n          handleLoadMore={loading => {\n            toggleLoading(true);\n            paginate(page + 1);\n            fetchMore({\n              variables: {\n                page: page + 1,\n              },\n              updateQuery: (prev, { fetchMoreResult }) => {\n                if (!fetchMoreResult) {\n                  toggleLoading(false);\n                  return prev;\n                }\n                const oldPosts = prev.author.draft.data;\n                const newPosts = fetchMoreResult.author.draft.data;\n                if (postCount && totalPost) {\n                  if (postCount <= totalPost) {\n                    toggleLoading(false);\n                    const concatedPosts = oldPosts.concat(newPosts);\n                    fetchMoreResult.author.draft.data = concatedPosts;\n                    return fetchMoreResult;\n                  }\n                }\n              },\n            });\n          }}\n        />\n      )}\n    </Grid>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}