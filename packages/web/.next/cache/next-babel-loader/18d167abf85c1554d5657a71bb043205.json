{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport { createBrowserHistory } from 'history';\nexport const history = process.browser ? createBrowserHistory() : false;\nexport function createUrl(urlData) {\n  const keys = _Object$keys(urlData);\n\n  let search = '?';\n  keys.forEach(key => {\n    if (urlData[key] !== null && urlData[key] !== '' && key !== 'page' && key !== 'limit') {\n      search += `${key}=${urlData[key]}&`;\n    }\n  });\n  return search.substring(0, search.length - 1);\n}\nexport function getUrl() {\n  const location = process.browser && window.location;\n  const data = process.browser && location.search ? location.search.slice(location.search.indexOf('?') + 1).split('&') : [];\n  const urlData = {};\n  data.forEach(data => {\n    try {\n      data = data.split('=');\n      const dataVal = decodeURIComponent(data[1]);\n      urlData[data[0]] = dataVal;\n    } catch (e) {}\n  });\n  return urlData;\n}\nexport function setUrl(urlData) {\n  const search = createUrl(urlData);\n  history.push(_objectSpread({}, location, {\n    search\n  }));\n}\nexport function clearUrl() {\n  history.push(_objectSpread({}, location, {\n    search: ''\n  }));\n}\nexport function setStateToUrl(state) {\n  let urlData = getUrl();\n  urlData = _objectSpread({}, urlData, state);\n\n  for (const key in state) {\n    if (state.hasOwnProperty(key)) {\n      switch (key) {\n        case 'text':\n          urlData[key] = state[key] ? state[key] : null;\n          break;\n\n        case 'categories':\n          urlData[key] = state[key] && state[key].length ? state[key].join() : null;\n          break;\n\n        case 'price':\n          urlData[key] = state[key] && state[key].length ? state[key].join() : null;\n          break;\n\n        case 'location':\n          if (state[key] && state[key].lat) {\n            urlData[`${key}_lat`] = state[key].lat;\n          }\n\n          if (state[key] && state[key].lng) {\n            urlData[`${key}_lng`] = state[key].lng;\n          }\n\n          break;\n\n        default:\n          urlData[key] = state[key];\n          break;\n      }\n    }\n  }\n\n  setUrl(urlData);\n}\nexport function getUrlToState() {\n  const urlData = getUrl();\n  const state = {\n    page: 1,\n    limit: 8\n  };\n\n  for (const key in urlData) {\n    if (urlData.hasOwnProperty(key)) {\n      switch (key) {\n        case 'text':\n          state[key] = urlData[key] && urlData[key] !== 'null' ? urlData[key] : '';\n          break;\n\n        case 'categories':\n          state[key] = urlData[key] && urlData[key] !== 'null' ? urlData[key].split(',') : [];\n          break;\n\n        case 'price':\n          const price = urlData[key] ? urlData[key].split(',') : null;\n\n          if (price && price.length) {\n            state[key] = [Number(price[0]), Number(price[1])]; //state[key][1] = Number(price[1]);\n          }\n\n          break;\n\n        case 'radius':\n          state[key] = Number(urlData[key]);\n          break;\n\n        case 'condition':\n          state[key] = urlData[key] && urlData[key] == 'true' ? true : false;\n          break;\n\n        case 'isNegotiable':\n          state[key] = urlData[key] && urlData[key] == 'true' ? true : false;\n          break;\n\n        case 'location_lat':\n          if (urlData['location_lat']) {\n            state['location'] = {};\n            state['location']['lat'] = Number(urlData[key]);\n          } else {\n            state['location'] = null;\n          }\n\n          break;\n\n        case 'location_lng':\n          if (urlData[key]) {\n            state['location']['lng'] = Number(urlData[key]);\n          }\n\n          break;\n\n        case 'sorting_field':\n          if (urlData[key]) {\n            state['sorting'] = {};\n            state['sorting']['field'] = urlData[key];\n          }\n\n          break;\n\n        case 'sorting_type':\n          if (urlData[key]) {\n            state['sorting']['type'] = urlData[key];\n          }\n\n          break;\n\n        case 'page':\n          if (urlData[key]) {\n            state['page'] = Number(urlData[key]);\n          }\n\n          break;\n\n        case 'limit':\n          if (urlData[key]) {\n            state['limit'] = Number(urlData[key]);\n          }\n\n          break;\n\n        default:\n          state[key] = urlData[key];\n          break;\n      }\n    }\n  }\n\n  return state;\n}","map":null,"metadata":{},"sourceType":"module"}