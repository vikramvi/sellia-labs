{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { withFormik } from 'formik';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport ChangeProfilePicture from './UploadImage';\nimport { openModal } from '@redq/reuse-modal';\nimport SuccessModal from '../../../containers/ModalContainer/SuccessModal';\nimport Alert from 'reusecore/src/elements/Alert';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport { GET_AUTHOR } from 'core/graphql/Author';\nlet imagesUrl = [];\nconst EditProfileEnhancher = withFormik({\n  enableReinitialize: 'true',\n  mapPropsToValues: props => {\n    const {\n      author,\n      loading\n    } = props;\n    const name = !loading && author && author.name ? author.name : '';\n    const website = !loading && author && author.website ? author.website : '';\n    const address = !loading && author && author.address ? author.address : '';\n    return {\n      name,\n      address,\n      website\n    };\n  },\n  displayName: 'EditProfileForm' // helps with React DevTools\n\n});\n\nconst EditProfile = props => {\n  const {\n    0: localImage,\n    1: setImage\n  } = useState(null);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: btnLoading,\n    1: setBtnLoading\n  } = useState(false);\n  const {\n    0: uploadRejected,\n    1: setUploadRejected\n  } = useState(false);\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    setFieldValue,\n    loading,\n    author\n  } = props;\n  useEffect(() => {\n    (async function () {\n      if (values.image) {\n        try {\n          await addAuthor({\n            variables: {\n              author: _objectSpread({}, author, values)\n            }\n          });\n          setBtnLoading(false);\n        } catch (error) {\n          setError(error.graphQLErrors[0].message);\n          setBtnLoading(false);\n        }\n      }\n    })();\n  }, [values.image]);\n\n  const onPreviewDrop = images => {\n    setUploadRejected(false);\n    images.map(image => {\n      image.preview = URL.createObjectURL(image);\n    });\n\n    if (images.length) {\n      setImage(images[0]);\n    }\n  };\n\n  const onDropRejected = () => {\n    setUploadRejected(true);\n  };\n\n  let avatar;\n\n  if (!loading && author && author.image && author.image.largeUrl) {\n    avatar = {\n      preview: author.image.largeUrl\n    };\n  }\n\n  if (localImage !== null) {\n    avatar = localImage;\n  }\n\n  const handlesSubmit = async () => {\n    setBtnLoading(true);\n    await AuthHelper.refreshToken();\n\n    if (localImage) {\n      imagesUrl = await uploadMultipleImages([localImage]);\n      setFieldValue('image', imagesUrl[0][0]);\n    } else {\n      try {\n        await addAuthor({\n          variables: {\n            author: _objectSpread({}, author, values)\n          }\n        });\n        setBtnLoading(false);\n        if (error != '') openModal({\n          config: {\n            disableDragging: false,\n            minHeight: 'auto',\n            size: {\n              width: 350,\n              height: 260\n            },\n            enableResizing: {\n              bottom: true,\n              bottomLeft: true,\n              bottomRight: true,\n              left: true,\n              right: true,\n              top: true,\n              topLeft: true,\n              topRight: true\n            }\n          },\n          modalClass: 'customModal',\n          closeOnClickOutside: true,\n          component: SuccessModal\n        });\n      } catch (error) {\n        setBtnLoading(false);\n        setError(error.graphQLErrors[0].message);\n      }\n    }\n  };\n\n  const [addAuthor] = useMutation(UPDATE_AUTHOR);\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Profile Setting\",\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600\n  }), uploadRejected && __jsx(Alert, {\n    colors: \"error\",\n    mb: 30\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, \"Maximum upload size 1MB\")), __jsx(ChangeProfilePicture, {\n    onPreviewDrop: onPreviewDrop,\n    proPic: avatar,\n    maxSize: 1024000,\n    onDropRejected: onDropRejected\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Name\",\n    changed: handleChange('name'),\n    value: values.name,\n    error: errors.name,\n    touched: touched\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Address\",\n    changed: handleChange('address'),\n    value: values.address,\n    error: errors.address,\n    touched: touched\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Web\",\n    changed: handleChange('website'),\n    value: values.website,\n    error: errors.website,\n    touched: touched\n  }), __jsx(Button, {\n    onClick: handlesSubmit,\n    title: \"Save Changes\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 10,\n    width: 1,\n    isLoading: btnLoading,\n    loaderColor: \"#ffffff\",\n    iconPosition: \"left\"\n  }));\n};\n\nexport default EditProfileEnhancher(EditProfile);","map":null,"metadata":{},"sourceType":"module"}