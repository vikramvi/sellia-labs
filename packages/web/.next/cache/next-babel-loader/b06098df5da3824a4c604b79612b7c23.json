{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/components/TextButton/index.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledButton, ButtonIcon, ButtonText } from './style';\n\nvar TextButton = function TextButton(_ref) {\n  var title = _ref.title,\n      onClick = _ref.onClick,\n      style = _ref.style,\n      icon = _ref.icon,\n      iconStyle = _ref.iconStyle,\n      iconPosition = _ref.iconPosition,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      props = _objectWithoutProperties(_ref, [\"title\", \"onClick\", \"style\", \"icon\", \"iconStyle\", \"iconPosition\", \"className\", \"disabled\"]);\n\n  return __jsx(StyledButton, _extends({\n    style: style,\n    onClick: onClick,\n    className: className,\n    disabled: disabled\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }), icon && iconPosition === 'left' && __jsx(ButtonIcon, {\n    disabled: disabled,\n    style: iconStyle,\n    iconPosition: iconPosition,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, icon), __jsx(ButtonText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, title), icon && iconPosition === 'right' && __jsx(ButtonIcon, {\n    disabled: disabled,\n    style: iconStyle,\n    iconPosition: iconPosition,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, icon));\n};\n\n_c = TextButton;\nTextButton.propTypes = {\n  /** Title of button. */\n  title: PropTypes.string,\n\n  /** Text sizes of button. */\n  textSize: PropTypes.number,\n\n  /** Text Weight of button. */\n  fontWeight: PropTypes.number,\n\n  /** Callback function when button is pressed. */\n  onPress: PropTypes.func,\n\n  /** Callback function when button is press in. */\n  onPressIn: PropTypes.func,\n\n  /** Callback function when button is press out. */\n  onPressOut: PropTypes.func,\n\n  /** Callback function when button is long press. */\n  onLongPress: PropTypes.func,\n\n  /** Determines what the opacity of the wrapped view should be when touch is active. */\n  activeOpacity: PropTypes.number,\n\n  /** Custom style for the button */\n  style: PropTypes.any,\n\n  /** Text Style for the button */\n  textStyle: PropTypes.any,\n\n  /** Custom text color for the button */\n  textColor: PropTypes.string,\n\n  /** Class name of the button */\n  className: PropTypes.string,\n\n  /** Icon name for the button */\n  icon: PropTypes.object,\n\n  /** Icon Position */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** custom style for the icon */\n  iconStyle: PropTypes.any,\n\n  /** If true button will be disabled */\n  disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\nTextButton.defaultProps = {\n  iconPosition: 'right',\n  activeOpacity: 0.9,\n  disabled: false\n};\nexport default TextButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextButton\");","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/components/TextButton/index.js"],"names":["React","PropTypes","StyledButton","ButtonIcon","ButtonText","TextButton","title","onClick","style","icon","iconStyle","iconPosition","className","disabled","props","propTypes","string","textSize","number","fontWeight","onPress","func","onPressIn","onPressOut","onLongPress","activeOpacity","any","textStyle","textColor","object","oneOf","oneOfType","bool","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,UAAnC,QAAqD,SAArD;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAUb;AAAA,MATJC,KASI,QATJA,KASI;AAAA,MARJC,OAQI,QARJA,OAQI;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,IAMI,QANJA,IAMI;AAAA,MALJC,SAKI,QALJA,SAKI;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADDC,KACC;;AACJ,SACE,MAAC,YAAD;AACE,IAAA,KAAK,EAAEN,KADT;AAEE,IAAA,OAAO,EAAED,OAFX;AAGE,IAAA,SAAS,EAAEK,SAHb;AAIE,IAAA,QAAQ,EAAEC;AAJZ,KAKMC,KALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOGL,IAAI,IAAIE,YAAY,KAAK,MAAzB,IACC,MAAC,UAAD;AACE,IAAA,QAAQ,EAAEE,QADZ;AAEE,IAAA,KAAK,EAAEH,SAFT;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,IALH,CARJ,EAgBE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaH,KAAb,CAhBF,EAiBGG,IAAI,IAAIE,YAAY,KAAK,OAAzB,IACC,MAAC,UAAD;AACE,IAAA,QAAQ,EAAEE,QADZ;AAEE,IAAA,KAAK,EAAEH,SAFT;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,IALH,CAlBJ,CADF;AA6BD,CAxCD;;KAAMJ,U;AA0CNA,UAAU,CAACU,SAAX,GAAuB;AACrB;AACAT,EAAAA,KAAK,EAAEL,SAAS,CAACe,MAFI;;AAIrB;AACAC,EAAAA,QAAQ,EAAEhB,SAAS,CAACiB,MALC;;AAOrB;AACAC,EAAAA,UAAU,EAAElB,SAAS,CAACiB,MARD;;AAUrB;AACAE,EAAAA,OAAO,EAAEnB,SAAS,CAACoB,IAXE;;AAarB;AACAC,EAAAA,SAAS,EAAErB,SAAS,CAACoB,IAdA;;AAgBrB;AACAE,EAAAA,UAAU,EAAEtB,SAAS,CAACoB,IAjBD;;AAmBrB;AACAG,EAAAA,WAAW,EAAEvB,SAAS,CAACoB,IApBF;;AAsBrB;AACAI,EAAAA,aAAa,EAAExB,SAAS,CAACiB,MAvBJ;;AAyBrB;AACAV,EAAAA,KAAK,EAAEP,SAAS,CAACyB,GA1BI;;AA4BrB;AACAC,EAAAA,SAAS,EAAE1B,SAAS,CAACyB,GA7BA;;AA+BrB;AACAE,EAAAA,SAAS,EAAE3B,SAAS,CAACe,MAhCA;;AAkCrB;AACAJ,EAAAA,SAAS,EAAEX,SAAS,CAACe,MAnCA;;AAqCrB;AACAP,EAAAA,IAAI,EAAER,SAAS,CAAC4B,MAtCK;;AAwCrB;AACAlB,EAAAA,YAAY,EAAEV,SAAS,CAAC6B,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CAzCO;;AA2CrB;AACApB,EAAAA,SAAS,EAAET,SAAS,CAACyB,GA5CA;;AA8CrB;AACAb,EAAAA,QAAQ,EAAEZ,SAAS,CAAC8B,SAAV,CAAoB,CAAC9B,SAAS,CAACe,MAAX,EAAmBf,SAAS,CAAC+B,IAA7B,CAApB;AA/CW,CAAvB;AAkDA3B,UAAU,CAAC4B,YAAX,GAA0B;AACxBtB,EAAAA,YAAY,EAAE,OADU;AAExBc,EAAAA,aAAa,EAAE,GAFS;AAGxBZ,EAAAA,QAAQ,EAAE;AAHc,CAA1B;AAMA,eAAeR,UAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledButton, ButtonIcon, ButtonText } from './style';\n\nconst TextButton = ({\n  title,\n  onClick,\n  style,\n  icon,\n  iconStyle,\n  iconPosition,\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <StyledButton\n      style={style}\n      onClick={onClick}\n      className={className}\n      disabled={disabled}\n      {...props}\n    >\n      {icon && iconPosition === 'left' && (\n        <ButtonIcon\n          disabled={disabled}\n          style={iconStyle}\n          iconPosition={iconPosition}\n        >\n          {icon}\n        </ButtonIcon>\n      )}\n      <ButtonText>{title}</ButtonText>\n      {icon && iconPosition === 'right' && (\n        <ButtonIcon\n          disabled={disabled}\n          style={iconStyle}\n          iconPosition={iconPosition}\n        >\n          {icon}\n        </ButtonIcon>\n      )}\n    </StyledButton>\n  );\n};\n\nTextButton.propTypes = {\n  /** Title of button. */\n  title: PropTypes.string,\n\n  /** Text sizes of button. */\n  textSize: PropTypes.number,\n\n  /** Text Weight of button. */\n  fontWeight: PropTypes.number,\n\n  /** Callback function when button is pressed. */\n  onPress: PropTypes.func,\n\n  /** Callback function when button is press in. */\n  onPressIn: PropTypes.func,\n\n  /** Callback function when button is press out. */\n  onPressOut: PropTypes.func,\n\n  /** Callback function when button is long press. */\n  onLongPress: PropTypes.func,\n\n  /** Determines what the opacity of the wrapped view should be when touch is active. */\n  activeOpacity: PropTypes.number,\n\n  /** Custom style for the button */\n  style: PropTypes.any,\n\n  /** Text Style for the button */\n  textStyle: PropTypes.any,\n\n  /** Custom text color for the button */\n  textColor: PropTypes.string,\n\n  /** Class name of the button */\n  className: PropTypes.string,\n\n  /** Icon name for the button */\n  icon: PropTypes.object,\n\n  /** Icon Position */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** custom style for the icon */\n  iconStyle: PropTypes.any,\n\n  /** If true button will be disabled */\n  disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\n\nTextButton.defaultProps = {\n  iconPosition: 'right',\n  activeOpacity: 0.9,\n  disabled: false,\n};\n\nexport default TextButton;\n"]},"metadata":{},"sourceType":"module"}