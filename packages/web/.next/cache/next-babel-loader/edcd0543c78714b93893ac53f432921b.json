{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Search/Categories/index.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useContext } from 'react';\nimport { CategoryListCard } from '../../../components/CategoryCard';\nimport { CategoryLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_CATEGORY } from 'core/graphql/Search.query';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { addOrRemove, inArray } from '../../../helpers';\nimport { setStateToUrl, getUrlToState } from '../../../helpers/urlHandler';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport OnError from '../../../components/OnError';\n\nfunction SearchCategory() {\n  const urlState = getUrlToState();\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  let QUERY_VARIABLES = {\n    LIMIT: 6\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_SEARCH_CATEGORY, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }); // if (loading) return null;\n\n  const allCategories = data && data.categories && data.categories.data ? data.categories.data : [];\n  const categoryCount = data && data.categories && data.categories.length ? data.categories.length : 1;\n  const total = data && data.categories && data.categories.total ? data.categories.total : 1;\n\n  const handleCategorySelection = async slug => {\n    const selectedCategories = await addOrRemove(slug, state.categories);\n    setStateToUrl({\n      categories: selectedCategories\n    });\n    dispatch({\n      type: 'UPDATE',\n      payload: {\n        categories: selectedCategories\n      }\n    });\n  };\n\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(ListGrid, {\n    data: allCategories,\n    totalPost: total,\n    postCount: allCategories.length,\n    columnWidth: [1],\n    component: item => {\n      return __jsx(CategoryListCard, {\n        title: item.name,\n        selected: inArray(item.slug, urlState.categories),\n        postNumber: `${item.posts.total} posts`,\n        source: item.image ? item.image.url : '',\n        style: {\n          paddingLeft: 30,\n          paddingRight: 20\n        },\n        handleClick: () => handleCategorySelection(item.slug),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      });\n    },\n    loading: loading ? loading : loadingMore,\n    buttonVariant: \"textButton\",\n    loadMoreButtonStyle: {\n      color: '#595959',\n      textDecoration: 'none !important'\n    },\n    placeholder: __jsx(CategoryLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 22\n      }\n    }),\n    limit: QUERY_VARIABLES.LIMIT,\n    componentWrapperStyle: {\n      ml: 0,\n      mr: 0,\n      mb: 20\n    },\n    componentContainerStyle: {\n      pl: 0,\n      pr: 0\n    },\n    loadMoreWrapperStyle: {\n      width: '100%',\n      flexBox: true,\n      flexDirection: 'row',\n      justifyContent: 'center',\n      pt: '5px',\n      pb: '5px',\n      borderTop: '1px solid #e2e2e2'\n    },\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          const oldPosts = prev.categories.data;\n          const newPosts = fetchMoreResult.categories.data;\n          console.log('before everything');\n\n          if (categoryCount && total) {\n            console.log('called');\n\n            if (categoryCount <= total) {\n              console.log('called 1');\n              toggleLoading(false);\n              const concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.categories.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default SearchCategory;","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Search/Categories/index.js"],"names":["React","Fragment","useState","useContext","CategoryListCard","CategoryLoader","useQuery","GET_SEARCH_CATEGORY","SearchContext","addOrRemove","inArray","setStateToUrl","getUrlToState","ListGrid","OnError","SearchCategory","urlState","loadingMore","toggleLoading","page","paginate","state","dispatch","QUERY_VARIABLES","LIMIT","data","loading","error","fetchMore","variables","allCategories","categories","categoryCount","length","total","handleCategorySelection","slug","selectedCategories","type","payload","item","name","posts","image","url","paddingLeft","paddingRight","color","textDecoration","ml","mr","mb","pl","pr","width","flexBox","flexDirection","justifyContent","pt","pb","borderTop","updateQuery","prev","fetchMoreResult","oldPosts","newPosts","console","log","concatedPosts","concat"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useContext } from 'react';\nimport { CategoryListCard } from '../../../components/CategoryCard';\nimport { CategoryLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_CATEGORY } from 'core/graphql/Search.query';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { addOrRemove, inArray } from '../../../helpers';\nimport { setStateToUrl, getUrlToState } from '../../../helpers/urlHandler';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport OnError from '../../../components/OnError';\n\nfunction SearchCategory() {\n  const urlState = getUrlToState();\n  const [loadingMore, toggleLoading] = useState(false);\n  const [page, paginate] = useState(1);\n  const { state, dispatch } = useContext(SearchContext);\n  let QUERY_VARIABLES = {\n    LIMIT: 6,\n  };\n\n  const { data, loading, error, fetchMore } = useQuery(GET_SEARCH_CATEGORY, {\n    variables: QUERY_VARIABLES,\n  });\n  if (error) return <OnError />;\n  // if (loading) return null;\n  const allCategories =\n    data && data.categories && data.categories.data ? data.categories.data : [];\n  const categoryCount =\n    data && data.categories && data.categories.length\n      ? data.categories.length\n      : 1;\n  const total =\n    data && data.categories && data.categories.total\n      ? data.categories.total\n      : 1;\n\n  const handleCategorySelection = async slug => {\n    const selectedCategories = await addOrRemove(slug, state.categories);\n    setStateToUrl({\n      categories: selectedCategories,\n    });\n\n    dispatch({\n      type: 'UPDATE',\n      payload: {\n        categories: selectedCategories,\n      },\n    });\n  };\n  return (\n    <Fragment>\n      <ListGrid\n        data={allCategories}\n        totalPost={total}\n        postCount={allCategories.length}\n        columnWidth={[1]}\n        component={item => {\n          return (\n            <CategoryListCard\n              title={item.name}\n              selected={inArray(item.slug, urlState.categories)}\n              postNumber={`${item.posts.total} posts`}\n              source={item.image ? item.image.url : ''}\n              style={{ paddingLeft: 30, paddingRight: 20 }}\n              handleClick={() => handleCategorySelection(item.slug)}\n            />\n          );\n        }}\n        loading={loading ? loading : loadingMore}\n        buttonVariant=\"textButton\"\n        loadMoreButtonStyle={{\n          color: '#595959',\n          textDecoration: 'none !important',\n        }}\n        placeholder={<CategoryLoader />}\n        limit={QUERY_VARIABLES.LIMIT}\n        componentWrapperStyle={{\n          ml: 0,\n          mr: 0,\n          mb: 20,\n        }}\n        componentContainerStyle={{\n          pl: 0,\n          pr: 0,\n        }}\n        loadMoreWrapperStyle={{\n          width: '100%',\n          flexBox: true,\n          flexDirection: 'row',\n          justifyContent: 'center',\n          pt: '5px',\n          pb: '5px',\n          borderTop: '1px solid #e2e2e2',\n        }}\n        handleLoadMore={loading => {\n          toggleLoading(true);\n          paginate(page + 1);\n          fetchMore({\n            variables: {\n              page: page + 1,\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n              if (!fetchMoreResult) {\n                toggleLoading(false);\n                return prev;\n              }\n              const oldPosts = prev.categories.data;\n              const newPosts = fetchMoreResult.categories.data;\n              console.log('before everything');\n              if (categoryCount && total) {\n                console.log('called');\n                if (categoryCount <= total) {\n                  console.log('called 1');\n                  toggleLoading(false);\n                  const concatedPosts = oldPosts.concat(newPosts);\n                  fetchMoreResult.categories.data = concatedPosts;\n                  return fetchMoreResult;\n                }\n              }\n            },\n          });\n        }}\n      />\n    </Fragment>\n  );\n}\n\nexport default SearchCategory;\n"]},"metadata":{},"sourceType":"module"}