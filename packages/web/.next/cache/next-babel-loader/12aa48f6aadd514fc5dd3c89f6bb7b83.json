{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Home/NearestPost/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { CURRENCY } from '../../../Config';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_NEAREST_POST } from 'core/graphql/NearestPost.query';\nimport { NEAREST_POST_PAGE, SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { PostLoader } from '../../../components/Placeholder';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport Box from 'reusecore/src/elements/Box';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport PostCard from '../../../components/PostCard';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\n\nvar NearestPost = function NearestPost(_ref) {\n  _s();\n\n  var location = _ref.location;\n  // QUERY SECTION\n  var QUERY_VARIABLES = {\n    page: 1,\n    LIMIT: 8,\n    location: location\n  };\n\n  var _useQuery = useQuery(GET_NEAREST_POST, {\n    variables: QUERY_VARIABLES\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error; // Error Rendering.\n\n\n  if (error) return __jsx(OnError, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }); // Extract Post Data\n\n  var nearestPost = data && data.nearest ? data.nearest.data : []; // Post Loop Control Area\n\n  var renderNearestPost = function renderNearestPost(item) {\n    var price = item.price,\n        _item$image = item.image,\n        url = _item$image.url,\n        largeUrl = _item$image.largeUrl,\n        title = item.title,\n        slug = item.slug;\n    return __jsx(Link, {\n      href: \"\".concat(SINGLE_POST_PAGE, \"/[slug]\"),\n      as: \"\".concat(SINGLE_POST_PAGE, \"/\").concat(slug),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, __jsx(PostCard, {\n      currency: CURRENCY,\n      title: title,\n      price: price,\n      imageSrc: [url, largeUrl],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    content: \"Nearest Post\",\n    mb: 0,\n    fontSize: 20,\n    fontWeight: 600,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), __jsx(Link, {\n    href: NEAREST_POST_PAGE,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    title: \"See all\",\n    color: \"#8c8c8c\",\n    fontWeight: 500,\n    variant: \"textButton\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  })))), __jsx(Box, {\n    mt: 20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, !nearestPost ? __jsx(NoItemFound, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }) : __jsx(ListGrid, {\n    data: nearestPost,\n    columnWidth: [1, 1 / 2, 1 / 3, 1 / 4],\n    limit: QUERY_VARIABLES.LIMIT,\n    component: renderNearestPost,\n    loading: loading,\n    placeholder: __jsx(PostLoader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 26\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(NearestPost, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = NearestPost;\nexport default NearestPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"NearestPost\");","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Home/NearestPost/index.js"],"names":["React","Link","CURRENCY","useQuery","GET_NEAREST_POST","NEAREST_POST_PAGE","SINGLE_POST_PAGE","PostLoader","ListGrid","Box","Heading","Button","PostCard","NoItemFound","OnError","NearestPost","location","QUERY_VARIABLES","page","LIMIT","variables","data","loading","error","nearestPost","nearest","renderNearestPost","item","price","image","url","largeUrl","title","slug"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { CURRENCY } from '../../../Config';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_NEAREST_POST } from 'core/graphql/NearestPost.query';\nimport { NEAREST_POST_PAGE, SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { PostLoader } from '../../../components/Placeholder';\n\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport Box from 'reusecore/src/elements/Box';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport PostCard from '../../../components/PostCard';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\n\nconst NearestPost = ({ location }) => {\n  // QUERY SECTION\n  const QUERY_VARIABLES = {\n    page: 1,\n    LIMIT: 8,\n    location,\n  };\n  const { data, loading, error } = useQuery(GET_NEAREST_POST, {\n    variables: QUERY_VARIABLES,\n  });\n\n  // Error Rendering.\n  if (error) return <OnError />;\n  // Extract Post Data\n  const nearestPost = data && data.nearest ? data.nearest.data : [];\n\n  // Post Loop Control Area\n  const renderNearestPost = item => {\n    const {\n      price,\n      image: { url, largeUrl },\n      title,\n      slug,\n    } = item;\n    return (\n      <Link\n        href={`${SINGLE_POST_PAGE}/[slug]`}\n        as={`${SINGLE_POST_PAGE}/${slug}`}\n      >\n        <a>\n          <PostCard\n            currency={CURRENCY}\n            title={title}\n            price={price}\n            imageSrc={[url, largeUrl]}\n          />\n        </a>\n      </Link>\n    );\n  };\n\n  return (\n    <>\n      <Box flexBox justifyContent=\"space-between\" alignItems=\"center\">\n        <Heading content=\"Nearest Post\" mb={0} fontSize={20} fontWeight={600} />\n        <Link href={NEAREST_POST_PAGE}>\n          <a>\n            <Button\n              title=\"See all\"\n              color=\"#8c8c8c\"\n              fontWeight={500}\n              variant=\"textButton\"\n            />\n          </a>\n        </Link>\n      </Box>\n      <Box mt={20}>\n        {!nearestPost ? (\n          <NoItemFound />\n        ) : (\n          <ListGrid\n            data={nearestPost}\n            columnWidth={[1, 1 / 2, 1 / 3, 1 / 4]}\n            limit={QUERY_VARIABLES.LIMIT}\n            component={renderNearestPost}\n            loading={loading}\n            placeholder={<PostLoader />}\n          />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default NearestPost;\n"]},"metadata":{},"sourceType":"module"}