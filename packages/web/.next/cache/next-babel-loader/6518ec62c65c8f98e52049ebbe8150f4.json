{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport { withFormik } from 'formik';\nimport Button from 'reusecore/src/elements/Button';\nimport { ErrorNotification } from '../SignInForm/style';\nimport Input from '../../components/Input';\nimport { setFirebaseCookie } from '../../helpers/session';\nimport redirect from '../../helpers/redirect';\nimport { useMutation } from '@apollo/react-hooks';\nimport { REGISTER } from 'core/graphql/Mutations';\nimport { GET_VERIFICATION_CODE, VERIFY_CODE, UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport AuthHelper from '../../helpers/authHelper';\nconst MobileNumbersEnhancer = withFormik({\n  mapPropsToValues: props => {\n    const number = '';\n    const code = '';\n    return {\n      number,\n      code\n    };\n  }\n});\n\nconst Recaptcha = () => {\n  useEffect(() => {\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha');\n    window.recaptchaVerifier.render().then(function (widgetId) {\n      window.recaptchaWidgetId = widgetId;\n    });\n  }, []);\n  return __jsx(\"div\", {\n    id: \"recaptcha\"\n  });\n};\n\nconst MobileSignIn = ({\n  values,\n  touched,\n  handleChange,\n  userInfo,\n  showModal,\n  author,\n  setFieldValue,\n  loading\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    confirmResult: false,\n    isMobileVerified: false,\n    wrongCode: false,\n    errorMessage: false\n  });\n  const {\n    confirmResult,\n    isMobileVerified,\n    wrongCode,\n    errorMessage\n  } = state;\n\n  const handleGetVerificationCode = async () => {\n    try {\n      const confirmResult = await AuthHelper.login('phone', null, null, values.number);\n\n      if (!confirmResult.error) {\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          confirmResult,\n          errorMessage: false\n        }));\n      } else {\n        setState(_objectSpread(_objectSpread({}, state), {}, {\n          errorMessage: confirmResult.error.message\n        }));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleVerifyCode = async () => {\n    let mobileNumbers = values.mobile;\n    const user = await AuthHelper.confirmVerification(state.confirmResult, values.code);\n\n    if (user && !user.error) {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        isMobileVerified: true,\n        errorMessage: false\n      }));\n      const token = await user.getIdToken();\n      setFieldValue('token', token);\n    } else if (user.error) {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        errorMessage: user.error.message\n      }));\n    }\n  };\n\n  useEffect(() => {\n    (async function () {\n      try {\n        if (values.token) {\n          const res = await registerMutation();\n\n          if (res && res.data && res.data.register) {\n            const user = res.data.register;\n            setFirebaseCookie('id_token', values.token);\n            setFirebaseCookie('user', _objectSpread({}, user));\n            redirect({}, '/');\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, [values.token]);\n  const registerMutation = useMutation(REGISTER, {\n    variables: {\n      user: {\n        mobile: [{\n          number: values.number\n        }],\n        token: values.token\n      }\n    }\n  });\n  return __jsx(React.Fragment, null, !confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Enter Number(ex. +30*********)\",\n    changed: handleChange('number'),\n    value: values.number,\n    touched: touched\n  }), __jsx(Recaptcha, null), __jsx(Button, {\n    onClick: handleGetVerificationCode,\n    title: \"Send Verification Code\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 30,\n    width: 1\n  })) : null, !isMobileVerified && confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Verify & Login\",\n    changed: handleChange('code'),\n    value: values.code,\n    touched: touched\n  }), __jsx(Button, {\n    onClick: handleVerifyCode,\n    title: \"Verify & Login\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1\n  })) : null, isMobileVerified ? __jsx(\"p\", {\n    style: {\n      color: '#30C56D',\n      textAlign: 'center',\n      fontFamily: 'Lato'\n    }\n  }, \"Your number is verified!\") : '', errorMessage ? __jsx(ErrorNotification, {\n    style: {\n      marginTop: 30\n    }\n  }, errorMessage) : '');\n};\n\nexport default MobileNumbersEnhancer(MobileSignIn);","map":null,"metadata":{},"sourceType":"module"}