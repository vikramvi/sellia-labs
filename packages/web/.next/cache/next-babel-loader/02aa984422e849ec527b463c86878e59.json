{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Search/Categories/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useContext } from 'react';\nimport { CategoryListCard } from '../../../components/CategoryCard';\nimport { CategoryLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_CATEGORY } from 'core/graphql/Search.query';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { addOrRemove, inArray } from '../../../helpers';\nimport { setStateToUrl, getUrlToState } from '../../../helpers/urlHandler';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport OnError from '../../../components/OnError';\n\nfunction SearchCategory() {\n  _s();\n\n  var _this = this;\n\n  var urlState = getUrlToState();\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      paginate = _useState2[1];\n\n  var _useContext = useContext(SearchContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var QUERY_VARIABLES = {\n    LIMIT: 6\n  };\n\n  var _useQuery = useQuery(GET_SEARCH_CATEGORY, {\n    variables: QUERY_VARIABLES\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore;\n\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }); // if (loading) return null;\n\n  var allCategories = data && data.categories && data.categories.data ? data.categories.data : [];\n  var categoryCount = data && data.categories && data.categories.length ? data.categories.length : 1;\n  var total = data && data.categories && data.categories.total ? data.categories.total : 1;\n\n  var handleCategorySelection = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(slug) {\n      var selectedCategories;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return addOrRemove(slug, state.categories);\n\n            case 2:\n              selectedCategories = _context.sent;\n              setStateToUrl({\n                categories: selectedCategories\n              });\n              dispatch({\n                type: 'UPDATE',\n                payload: {\n                  categories: selectedCategories\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleCategorySelection(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(ListGrid, {\n    data: allCategories,\n    totalPost: total,\n    postCount: allCategories.length,\n    columnWidth: [1],\n    component: function component(item) {\n      return __jsx(CategoryListCard, {\n        title: item.name,\n        selected: inArray(item.slug, urlState.categories),\n        postNumber: \"\".concat(item.posts.total, \" posts\"),\n        source: item.image ? item.image.url : '',\n        style: {\n          paddingLeft: 30,\n          paddingRight: 20\n        },\n        handleClick: function handleClick() {\n          return handleCategorySelection(item.slug);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      });\n    },\n    loading: loading ? loading : loadingMore,\n    buttonVariant: \"textButton\",\n    loadMoreButtonStyle: {\n      color: '#595959',\n      textDecoration: 'none !important'\n    },\n    placeholder: __jsx(CategoryLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 22\n      }\n    }),\n    limit: QUERY_VARIABLES.LIMIT,\n    componentWrapperStyle: {\n      ml: 0,\n      mr: 0,\n      mb: 20\n    },\n    componentContainerStyle: {\n      pl: 0,\n      pr: 0\n    },\n    loadMoreWrapperStyle: {\n      width: '100%',\n      flexBox: true,\n      flexDirection: 'row',\n      justifyContent: 'center',\n      pt: '5px',\n      pb: '5px',\n      borderTop: '1px solid #e2e2e2'\n    },\n    handleLoadMore: function handleLoadMore(loading) {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: function updateQuery(prev, _ref2) {\n          var fetchMoreResult = _ref2.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          var oldPosts = prev.categories.data;\n          var newPosts = fetchMoreResult.categories.data;\n          console.log('before everything');\n\n          if (categoryCount && total) {\n            console.log('called');\n\n            if (categoryCount <= total) {\n              console.log('called 1');\n              toggleLoading(false);\n              var concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.categories.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(SearchCategory, \"ZpIXBAC85pwXP2NPanWOHZqS4As=\", false, function () {\n  return [useQuery];\n});\n\n_c = SearchCategory;\nexport default SearchCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchCategory\");","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Search/Categories/index.js"],"names":["React","Fragment","useState","useContext","CategoryListCard","CategoryLoader","useQuery","GET_SEARCH_CATEGORY","SearchContext","addOrRemove","inArray","setStateToUrl","getUrlToState","ListGrid","OnError","SearchCategory","urlState","loadingMore","toggleLoading","page","paginate","state","dispatch","QUERY_VARIABLES","LIMIT","variables","data","loading","error","fetchMore","allCategories","categories","categoryCount","length","total","handleCategorySelection","slug","selectedCategories","type","payload","item","name","posts","image","url","paddingLeft","paddingRight","color","textDecoration","ml","mr","mb","pl","pr","width","flexBox","flexDirection","justifyContent","pt","pb","borderTop","updateQuery","prev","fetchMoreResult","oldPosts","newPosts","console","log","concatedPosts","concat"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useContext } from 'react';\nimport { CategoryListCard } from '../../../components/CategoryCard';\nimport { CategoryLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_CATEGORY } from 'core/graphql/Search.query';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { addOrRemove, inArray } from '../../../helpers';\nimport { setStateToUrl, getUrlToState } from '../../../helpers/urlHandler';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport OnError from '../../../components/OnError';\n\nfunction SearchCategory() {\n  const urlState = getUrlToState();\n  const [loadingMore, toggleLoading] = useState(false);\n  const [page, paginate] = useState(1);\n  const { state, dispatch } = useContext(SearchContext);\n  let QUERY_VARIABLES = {\n    LIMIT: 6,\n  };\n\n  const { data, loading, error, fetchMore } = useQuery(GET_SEARCH_CATEGORY, {\n    variables: QUERY_VARIABLES,\n  });\n  if (error) return <OnError />;\n  // if (loading) return null;\n  const allCategories =\n    data && data.categories && data.categories.data ? data.categories.data : [];\n  const categoryCount =\n    data && data.categories && data.categories.length\n      ? data.categories.length\n      : 1;\n  const total =\n    data && data.categories && data.categories.total\n      ? data.categories.total\n      : 1;\n\n  const handleCategorySelection = async slug => {\n    const selectedCategories = await addOrRemove(slug, state.categories);\n    setStateToUrl({\n      categories: selectedCategories,\n    });\n\n    dispatch({\n      type: 'UPDATE',\n      payload: {\n        categories: selectedCategories,\n      },\n    });\n  };\n  return (\n    <Fragment>\n      <ListGrid\n        data={allCategories}\n        totalPost={total}\n        postCount={allCategories.length}\n        columnWidth={[1]}\n        component={item => {\n          return (\n            <CategoryListCard\n              title={item.name}\n              selected={inArray(item.slug, urlState.categories)}\n              postNumber={`${item.posts.total} posts`}\n              source={item.image ? item.image.url : ''}\n              style={{ paddingLeft: 30, paddingRight: 20 }}\n              handleClick={() => handleCategorySelection(item.slug)}\n            />\n          );\n        }}\n        loading={loading ? loading : loadingMore}\n        buttonVariant=\"textButton\"\n        loadMoreButtonStyle={{\n          color: '#595959',\n          textDecoration: 'none !important',\n        }}\n        placeholder={<CategoryLoader />}\n        limit={QUERY_VARIABLES.LIMIT}\n        componentWrapperStyle={{\n          ml: 0,\n          mr: 0,\n          mb: 20,\n        }}\n        componentContainerStyle={{\n          pl: 0,\n          pr: 0,\n        }}\n        loadMoreWrapperStyle={{\n          width: '100%',\n          flexBox: true,\n          flexDirection: 'row',\n          justifyContent: 'center',\n          pt: '5px',\n          pb: '5px',\n          borderTop: '1px solid #e2e2e2',\n        }}\n        handleLoadMore={loading => {\n          toggleLoading(true);\n          paginate(page + 1);\n          fetchMore({\n            variables: {\n              page: page + 1,\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n              if (!fetchMoreResult) {\n                toggleLoading(false);\n                return prev;\n              }\n              const oldPosts = prev.categories.data;\n              const newPosts = fetchMoreResult.categories.data;\n              console.log('before everything');\n              if (categoryCount && total) {\n                console.log('called');\n                if (categoryCount <= total) {\n                  console.log('called 1');\n                  toggleLoading(false);\n                  const concatedPosts = oldPosts.concat(newPosts);\n                  fetchMoreResult.categories.data = concatedPosts;\n                  return fetchMoreResult;\n                }\n              }\n            },\n          });\n        }}\n      />\n    </Fragment>\n  );\n}\n\nexport default SearchCategory;\n"]},"metadata":{},"sourceType":"module"}