{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getFirebaseCookie } from './session';\nimport { GRAPHQL_URL } from '../Config';\n// import cookie from 'cookie';\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = useMemo(() => {\n      // We pass in the apolloClient directly when using getDataFromTree\n      if (apolloClient) {\n        return apolloClient;\n      } // Otherwise initClient using apolloState\n\n\n      return initApolloClient(apolloState, {\n        getToken\n      });\n    }, []);\n    return __jsx(ApolloProvider, {\n      client: client\n    }, __jsx(PageComponent, pageProps));\n  };\n\n  if (false) {\n    // Find correct display name\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component'; // Warn if old way of installing apollo is used\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = `withApollo(${displayName})`; // Add some prop types\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n      const apolloClient = ctx.apolloClient = initApolloClient({}, {\n        getToken: () => getToken(ctx)\n      });\n      const pageProps = PageComponent.getInitialProps ? await PageComponent.getInitialProps(ctx) : {}; // Only on the server\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              })\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\nlet apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(...args) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(...args);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(...args);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient(initialState = {}, {\n  getToken\n}) {\n  const fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n\n  if (true) {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require('https-proxy-agent'))(process.env.https_proxy);\n    }\n  }\n\n  const httpLink = new HttpLink({\n    uri: GRAPHQL_URL,\n    // Server URL (must be absolute)\n    credentials: 'same-origin',\n    fetch,\n    fetchOptions\n  });\n  const authLink = setContext((request, {\n    headers\n  }) => {\n    const token = getToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token ? token : ''\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object.id || null,\n      addTypename: false\n    }).restore(initialState)\n  });\n}\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\n\n\nfunction getToken(ctx) {\n  // const cookies = cookie.parse(req ? req.headers.cookie || '' : document.cookie)\n  const token = getFirebaseCookie('id_token', ctx);\n  return token;\n}","map":null,"metadata":{},"sourceType":"module"}