{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment, useState, useContext } from 'react';\nimport { CategoryListCard } from '../../../components/CategoryCard';\nimport { CategoryLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_CATEGORY } from 'core/graphql/Search.query';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { addOrRemove, inArray } from '../../../helpers';\nimport { setStateToUrl, getUrlToState } from '../../../helpers/urlHandler';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport OnError from '../../../components/OnError';\n\nfunction SearchCategory() {\n  const urlState = getUrlToState();\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  let QUERY_VARIABLES = {\n    LIMIT: 6\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_SEARCH_CATEGORY, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return __jsx(OnError, null); // if (loading) return null;\n\n  const allCategories = data && data.categories && data.categories.data ? data.categories.data : [];\n  const categoryCount = data && data.categories && data.categories.length ? data.categories.length : 1;\n  const total = data && data.categories && data.categories.total ? data.categories.total : 1;\n\n  const handleCategorySelection = async slug => {\n    const selectedCategories = await addOrRemove(slug, state.categories);\n    setStateToUrl({\n      categories: selectedCategories\n    });\n    dispatch({\n      type: 'UPDATE',\n      payload: {\n        categories: selectedCategories\n      }\n    });\n  };\n\n  return __jsx(Fragment, null, __jsx(ListGrid, {\n    data: allCategories,\n    totalPost: total,\n    postCount: allCategories.length,\n    columnWidth: [1],\n    component: item => {\n      return __jsx(CategoryListCard, {\n        title: item.name,\n        selected: inArray(item.slug, urlState.categories),\n        postNumber: `${item.posts.total} posts`,\n        source: item.image ? item.image.url : '',\n        style: {\n          paddingLeft: 30,\n          paddingRight: 20\n        },\n        handleClick: () => handleCategorySelection(item.slug)\n      });\n    },\n    loading: loading ? loading : loadingMore,\n    buttonVariant: \"textButton\",\n    loadMoreButtonStyle: {\n      color: '#595959',\n      textDecoration: 'none !important'\n    },\n    placeholder: __jsx(CategoryLoader, null),\n    limit: QUERY_VARIABLES.LIMIT,\n    componentWrapperStyle: {\n      ml: 0,\n      mr: 0,\n      mb: 20\n    },\n    componentContainerStyle: {\n      pl: 0,\n      pr: 0\n    },\n    loadMoreWrapperStyle: {\n      width: '100%',\n      flexBox: true,\n      flexDirection: 'row',\n      justifyContent: 'center',\n      pt: '5px',\n      pb: '5px',\n      borderTop: '1px solid #e2e2e2'\n    },\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          const oldPosts = prev.categories.data;\n          const newPosts = fetchMoreResult.categories.data;\n          console.log('before everything');\n\n          if (categoryCount && total) {\n            console.log('called');\n\n            if (categoryCount <= total) {\n              console.log('called 1');\n              toggleLoading(false);\n              const concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.categories.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    }\n  }));\n}\n\nexport default SearchCategory;","map":null,"metadata":{},"sourceType":"module"}