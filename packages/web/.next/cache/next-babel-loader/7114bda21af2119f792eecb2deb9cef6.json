{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport Input from '../Input';\nimport LocationWrapper, { SearchResultWrapper } from './style';\n\nconst LocationSearchInput = props => {\n  const handleSelect = selected => {\n    const address = selected;\n    props.handleAddress(address);\n    geocodeByAddress(selected).then(results => getLatLng(results[0])).then(latLng => props.handleLocation(latLng, address)).catch(error => console.error('Error', error));\n  };\n\n  const handleCloseClick = () => {\n    setAddressState(_objectSpread(_objectSpread({}, addressState), {}, {\n      address: ''\n    }));\n  };\n\n  return __jsx(PlacesAutocomplete, {\n    value: props.address,\n    onChange: props.handleChange,\n    onSelect: handleSelect\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => __jsx(LocationWrapper, null, __jsx(\"div\", null, __jsx(Input, _extends({}, getInputProps(), {\n    required: \"required\",\n    label: \"Location\"\n  }))), props.address && __jsx(SearchResultWrapper, {\n    className: \"autocomplete-dropdown-container\"\n  }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: '#e2e2e2'\n    } : {\n      backgroundColor: '#ffffff'\n    };\n    return __jsx(\"div\", getSuggestionItemProps(suggestion, {\n      className,\n      style\n    }), __jsx(\"span\", null, suggestion.description));\n  }))));\n};\n\nexport default LocationSearchInput;","map":null,"metadata":{},"sourceType":"module"}