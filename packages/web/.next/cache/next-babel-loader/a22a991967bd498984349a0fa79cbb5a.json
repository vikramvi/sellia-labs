{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/pages/nearest-posts.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_NEAREST_POST } from 'core/graphql/NearestPost.query';\nimport { CURRENCY } from '../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport PageMeta from '../components/PageMeta';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../components/Loader/CardLoader';\nimport PostCard from '../components/PostCard';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(withLayout(({\n  location\n}) => {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  let QUERY_VARIABLES = {\n    page: 1,\n    LIMIT: 4,\n    location\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_NEAREST_POST, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }\n  });\n  const postCount = data && data.nearest && data.nearest.data ? data.nearest.data.length : 1;\n  const nearest = data && data.nearest && data.nearest.data ? data.nearest.data : [];\n  const totalPost = data && data.nearest ? data.nearest.total : 1;\n\n  const renderNearestPost = item => {\n    const {\n      title,\n      slug,\n      price = 0.0,\n      image: {\n        url,\n        largeUrl\n      }\n    } = item;\n    return __jsx(Link, {\n      href: `${SINGLE_POST_PAGE}/${slug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, __jsx(PostCard, {\n      currency: CURRENCY,\n      title: title,\n      price: price,\n      imageSrc: [url, largeUrl],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(PageMeta, {\n    title: \"Recent Post\",\n    description: \"Recent Post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), __jsx(Box, {\n    mt: 50,\n    mb: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(Heading, {\n    content: \"Nearest Post\",\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), !loading && !nearest.length ? __jsx(NoItemFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }) : __jsx(ListGrid, {\n    data: nearest,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1, 1 / 2, 1 / 4],\n    component: renderNearestPost,\n    loading: loading ? loading : loadingMore,\n    isLoading: loadingMore,\n    placeholder: __jsx(CardLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 30\n      }\n    }),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              return Object.assign({}, prev, {\n                nearest: {\n                  data: [...prev.nearest.data, ...fetchMoreResult.nearest.data],\n                  total: totalPost\n                }\n              });\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }))));\n}));","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/pages/nearest-posts.js"],"names":["useState","Link","Grid","useQuery","GET_NEAREST_POST","CURRENCY","SINGLE_POST_PAGE","withLayout","PageMeta","Heading","Box","ListGrid","CardLoader","PostCard","NoItemFound","OnError","withApollo","location","loadingMore","toggleLoading","page","paginate","QUERY_VARIABLES","LIMIT","data","loading","error","fetchMore","variables","postCount","nearest","length","totalPost","total","renderNearestPost","item","title","slug","price","image","url","largeUrl","fontSize","fontWeight","color","updateQuery","prev","fetchMoreResult","Object","assign"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_NEAREST_POST } from 'core/graphql/NearestPost.query';\nimport { CURRENCY } from '../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport PageMeta from '../components/PageMeta';\n\nimport Heading from 'reusecore/src/elements/Heading';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../components/Loader/CardLoader';\nimport PostCard from '../components/PostCard';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(\n  withLayout(({ location }) => {\n    const [loadingMore, toggleLoading] = useState(false);\n    const [page, paginate] = useState(1);\n    let QUERY_VARIABLES = {\n      page: 1,\n      LIMIT: 4,\n      location,\n    };\n    const { data, loading, error, fetchMore } = useQuery(GET_NEAREST_POST, {\n      variables: QUERY_VARIABLES,\n    });\n\n    if (error) return <OnError />;\n\n    const postCount =\n      data && data.nearest && data.nearest.data ? data.nearest.data.length : 1;\n    const nearest =\n      data && data.nearest && data.nearest.data ? data.nearest.data : [];\n    const totalPost = data && data.nearest ? data.nearest.total : 1;\n\n    const renderNearestPost = item => {\n      const {\n        title,\n        slug,\n        price = 0.0,\n        image: { url, largeUrl },\n      } = item;\n      return (\n        <Link href={`${SINGLE_POST_PAGE}/${slug}`}>\n          <a>\n            <PostCard\n              currency={CURRENCY}\n              title={title}\n              price={price}\n              imageSrc={[url, largeUrl]}\n            />\n          </a>\n        </Link>\n      );\n    };\n\n    return (\n      <>\n        <PageMeta title=\"Recent Post\" description=\"Recent Post\" />\n        <Box mt={50} mb={50}>\n          <Grid>\n            <Heading\n              content=\"Nearest Post\"\n              mb={40}\n              style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\n            />\n            {!loading && !nearest.length ? (\n              <NoItemFound />\n            ) : (\n              <ListGrid\n                data={nearest}\n                totalPost={totalPost}\n                postCount={postCount}\n                columnWidth={[1, 1 / 2, 1 / 4]}\n                component={renderNearestPost}\n                loading={loading ? loading : loadingMore}\n                isLoading={loadingMore}\n                placeholder={<CardLoader />}\n                limit={QUERY_VARIABLES.LIMIT}\n                handleLoadMore={loading => {\n                  toggleLoading(true);\n                  paginate(page + 1);\n                  fetchMore({\n                    variables: {\n                      page: page + 1,\n                    },\n                    updateQuery: (prev, { fetchMoreResult }) => {\n                      if (!fetchMoreResult) {\n                        toggleLoading(false);\n                        return prev;\n                      }\n                      if (postCount && totalPost) {\n                        if (postCount <= totalPost) {\n                          toggleLoading(false);\n                          return Object.assign({}, prev, {\n                            nearest: {\n                              data: [\n                                ...prev.nearest.data,\n                                ...fetchMoreResult.nearest.data,\n                              ],\n                              total: totalPost,\n                            },\n                          });\n                        }\n                      }\n                    },\n                  });\n                }}\n              />\n            )}\n          </Grid>\n        </Box>\n      </>\n    );\n  })\n);\n"]},"metadata":{},"sourceType":"module"}