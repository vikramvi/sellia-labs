{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { getThumbUrl } from './generateThumbUrl';\nimport { storage } from './init';\n/**\n * Helper functions to upload multiple image to firebase storage\n * @param {Array} images\n */\n\nexport function uploadMultipleImages(_x) {\n  return _uploadMultipleImages.apply(this, arguments);\n}\n\nfunction _uploadMultipleImages() {\n  _uploadMultipleImages = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(images) {\n    var allImages, uploadedImages;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            allImages = [];\n\n            storage.ref().constructor.prototype.putFiles = function (files) {\n              var ref = this;\n              return _Promise.all(files.map(function (file) {\n                return ref.child(file.name).put(file);\n              }));\n            };\n\n            _context2.next = 4;\n            return storage.ref().putFiles(images).then(function (metadatas) {\n              return metadatas;\n            });\n\n          case 4:\n            uploadedImages = _context2.sent;\n            return _context2.abrupt(\"return\", _Promise.all(uploadedImages.map(function (snapshot) {\n              return new _Promise(\n              /*#__PURE__*/\n              function () {\n                var _ref = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(resolve, reject) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                            var thumbUrl = getThumbUrl(downloadURL);\n                            allImages.push({\n                              url: thumbUrl,\n                              largeUrl: downloadURL\n                            });\n                          });\n\n                        case 2:\n                          resolve(allImages);\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x2, _x3) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            })));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _uploadMultipleImages.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}