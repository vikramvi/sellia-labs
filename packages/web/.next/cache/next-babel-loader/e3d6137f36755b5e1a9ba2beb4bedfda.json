{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/AccountSetting/ChangePassword/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport { withFormik } from 'formik';\nimport AuthHelper from '../../../helpers/authHelper';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from '../../SignInForm/style';\nvar ResetPassEnhancer = withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      currentPass: '',\n      newPass: '',\n      confirmPass: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    currentPass: Yup.string().required('Current Password is required!'),\n    newPass: Yup.string().required('New Password is required'),\n    confirmPass: Yup.string().oneOf([Yup.ref('newPass'), null], \"Password don't match\").required('Password Confirm is required')\n  })\n});\n\nvar ResetPass = function ResetPass(_ref) {\n  _s();\n\n  var _jsx, _jsx2;\n\n  var values = _ref.values,\n      touched = _ref.touched,\n      errors = _ref.errors,\n      handleChange = _ref.handleChange,\n      handleSubmit = _ref.handleSubmit,\n      handleBlur = _ref.handleBlur;\n\n  var _useState = useState(''),\n      message = _useState[0],\n      setMessage = _useState[1];\n\n  var _useState2 = useState(false),\n      isSubmitted = _useState2[0],\n      setIssubmit = _useState2[1];\n\n  handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var hasPasswordReset;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIssubmit(true);\n\n              if (!(Object.keys(errors).length !== 0)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return AuthHelper.changePassword(values.currentPass, values.newPass);\n\n            case 5:\n              hasPasswordReset = _context.sent;\n\n              if (hasPasswordReset && !hasPasswordReset.error) {\n                setMessage('Password Reset Successful!');\n              } else if (hasPasswordReset.error) {\n                setMessage(hasPasswordReset.error.message);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Password Setting\",\n    pb: 32,\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(FormGroup, {\n    className: errors.currentPass ? 'hasErrorMsg' : '',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    onBlur: handleBlur('currentPass'),\n    label: \"Current Password\",\n    changed: handleChange('currentPass'),\n    secureTextEntry: true,\n    value: values.currentPass,\n    error: errors.currentPass,\n    touched: touched,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), __jsx(\"span\", {\n    className: \"errorMsg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, errors.currentPass && touched.currentPass || isSubmitted && errors.currentPass ? errors.currentPass : null)), __jsx(FormGroup, {\n    className: errors.newPass ? 'hasErrorMsg' : '',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, __jsx(Input, (_jsx = {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    label: \"New Password\",\n    changed: handleChange('newPass'),\n    secureTextEntry: true,\n    onBlur: handleBlur('newPass'),\n    value: values.newPass\n  }, _defineProperty(_jsx, \"secureTextEntry\", true), _defineProperty(_jsx, \"error\", errors.newPass), _defineProperty(_jsx, \"touched\", touched), _defineProperty(_jsx, \"__self\", _this), _defineProperty(_jsx, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }), _jsx)), __jsx(\"span\", {\n    className: \"errorMsg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, errors.newPass && touched.newPass || isSubmitted && errors.newPass ? errors.newPass : null)), __jsx(FormGroup, {\n    className: errors.confirmPass ? 'hasErrorMsg' : '',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(Input, (_jsx2 = {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    label: \"Confirm Password\",\n    changed: handleChange('confirmPass'),\n    onBlur: handleBlur('confirmPass'),\n    secureTextEntry: true,\n    value: values.confirmPass\n  }, _defineProperty(_jsx2, \"secureTextEntry\", true), _defineProperty(_jsx2, \"error\", errors.confirmPass), _defineProperty(_jsx2, \"touched\", touched), _defineProperty(_jsx2, \"__self\", _this), _defineProperty(_jsx2, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }), _jsx2)), __jsx(\"span\", {\n    className: \"errorMsg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, errors.confirmPass && touched.confirmPass || isSubmitted && errors.confirmPass ? errors.confirmPass : null)), message ? __jsx(Box, {\n    flexBox: true,\n    mt: 20,\n    mb: 15,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, __jsx(ErrorNotification, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, message)) : '', __jsx(Button, {\n    onClick: handleSubmit // disabled={Object.keys(errors).length !== 0}\n    ,\n    title: \"Save Changes\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1,\n    mt: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(ResetPass, \"eFCKRy0xpgU5vl279WNHdmScAE0=\");\n\n_c = ResetPass;\nexport default _c2 = ResetPassEnhancer(ResetPass);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ResetPass\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/AccountSetting/ChangePassword/index.js"],"names":["React","useState","Yup","Input","Heading","Button","withFormik","AuthHelper","Box","FormGroup","ErrorNotification","ResetPassEnhancer","mapPropsToValues","props","currentPass","newPass","confirmPass","validationSchema","object","shape","string","required","oneOf","ref","ResetPass","values","touched","errors","handleChange","handleSubmit","handleBlur","message","setMessage","isSubmitted","setIssubmit","Object","keys","length","changePassword","hasPasswordReset","error","type"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport { withFormik } from 'formik';\nimport AuthHelper from '../../../helpers/authHelper';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from '../../SignInForm/style';\n\nconst ResetPassEnhancer = withFormik({\n  mapPropsToValues: props => ({\n    currentPass: '',\n    newPass: '',\n    confirmPass: '',\n  }),\n  validationSchema: Yup.object().shape({\n    currentPass: Yup.string().required('Current Password is required!'),\n    newPass: Yup.string().required('New Password is required'),\n    confirmPass: Yup.string()\n      .oneOf([Yup.ref('newPass'), null], \"Password don't match\")\n      .required('Password Confirm is required'),\n  }),\n});\n\nconst ResetPass = ({\n  values,\n  touched,\n  errors,\n  handleChange,\n  handleSubmit,\n  handleBlur,\n}) => {\n  const [message, setMessage] = useState('');\n  const [isSubmitted, setIssubmit] = useState(false);\n  handleSubmit = async () => {\n    setIssubmit(true);\n    if (Object.keys(errors).length !== 0) {\n      return;\n    }\n    const hasPasswordReset = await AuthHelper.changePassword(\n      values.currentPass,\n      values.newPass\n    );\n    if (hasPasswordReset && !hasPasswordReset.error) {\n      setMessage('Password Reset Successful!');\n    } else if (hasPasswordReset.error) {\n      setMessage(hasPasswordReset.error.message);\n    }\n  };\n  return (\n    <>\n      <Heading\n        as=\"h3\"\n        content=\"Password Setting\"\n        pb={32}\n        fontSize={18}\n        color=\"#333333\"\n        fontWeight={600}\n      />\n\n      <FormGroup className={errors.currentPass ? 'hasErrorMsg' : ''}>\n        <Input\n          elementType=\"input\"\n          elementConfig={{\n            type: 'password',\n            required: 'required',\n          }}\n          onBlur={handleBlur('currentPass')}\n          label=\"Current Password\"\n          changed={handleChange('currentPass')}\n          secureTextEntry={true}\n          value={values.currentPass}\n          error={errors.currentPass}\n          touched={touched}\n        />\n        <span className=\"errorMsg\">\n          {(errors.currentPass && touched.currentPass) ||\n          (isSubmitted && errors.currentPass)\n            ? errors.currentPass\n            : null}\n        </span>\n      </FormGroup>\n\n      <FormGroup className={errors.newPass ? 'hasErrorMsg' : ''}>\n        <Input\n          elementType=\"input\"\n          elementConfig={{\n            type: 'password',\n            required: 'required',\n          }}\n          label=\"New Password\"\n          changed={handleChange('newPass')}\n          secureTextEntry={true}\n          onBlur={handleBlur('newPass')}\n          value={values.newPass}\n          secureTextEntry={true}\n          error={errors.newPass}\n          touched={touched}\n        />\n        <span className=\"errorMsg\">\n          {(errors.newPass && touched.newPass) ||\n          (isSubmitted && errors.newPass)\n            ? errors.newPass\n            : null}\n        </span>\n      </FormGroup>\n\n      <FormGroup className={errors.confirmPass ? 'hasErrorMsg' : ''}>\n        <Input\n          elementType=\"input\"\n          elementConfig={{\n            type: 'password',\n            required: 'required',\n          }}\n          label=\"Confirm Password\"\n          changed={handleChange('confirmPass')}\n          onBlur={handleBlur('confirmPass')}\n          secureTextEntry={true}\n          value={values.confirmPass}\n          secureTextEntry={true}\n          error={errors.confirmPass}\n          touched={touched}\n        />\n        <span className=\"errorMsg\">\n          {(errors.confirmPass && touched.confirmPass) ||\n          (isSubmitted && errors.confirmPass)\n            ? errors.confirmPass\n            : null}\n        </span>\n      </FormGroup>\n\n      {/* <p style={{ color: '#EF5A5A', textAlign: 'center' }}>\n        {message ? message : ''}\n      </p> */}\n\n      {message ? (\n        <Box\n          flexBox\n          mt={20}\n          mb={15}\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <ErrorNotification>{message}</ErrorNotification>\n        </Box>\n      ) : (\n        ''\n      )}\n\n      <Button\n        onClick={handleSubmit}\n        // disabled={Object.keys(errors).length !== 0}\n        title=\"Save Changes\"\n        bg=\"#30C56D\"\n        color=\"#ffffff\"\n        width={1}\n        mt={10}\n      />\n    </>\n  );\n};\n\nexport default ResetPassEnhancer(ResetPass);\n"]},"metadata":{},"sourceType":"module"}