{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport getSlug from 'speakingurl';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport Icon from 'react-icons-kit';\nimport { archive } from 'react-icons-kit/ionicons/archive';\nimport { chevronRight } from 'react-icons-kit/ionicons/chevronRight';\nimport Switch from 'reusecore/src/elements/Switch';\nimport Button from 'reusecore/src/elements/Button';\nimport Text from 'reusecore/src/elements/Text';\nimport Box from 'reusecore/src/elements/Box';\nimport Input from '../../../components/Input';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { ADD_POST } from 'core/graphql/Mutations';\nimport { useMutation } from '@apollo/react-hooks';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nlet imagesUrl = [];\nexport default (() => {\n  const {\n    state,\n    dispatch\n  } = useContext(AddPostContext);\n  const {\n    step,\n    adPost\n  } = state;\n  const {\n    0: errors,\n    1: setError\n  } = useState('');\n  const {\n    0: btnLoading,\n    1: setBtnLoading\n  } = useState(false);\n  const [postMutation] = useMutation(ADD_POST);\n\n  const handleDraftingPost = async () => {\n    await AuthHelper.refreshToken();\n    setBtnLoading(true);\n\n    if (adPost.localGallery.length) {\n      imagesUrl = await uploadMultipleImages(adPost.localGallery);\n\n      if (imagesUrl && imagesUrl.length > 0) {\n        dispatch({\n          type: 'UPDATE_FULL_ADPOST',\n          payload: {\n            gallery: adPost.gallery.concat(imagesUrl[0]),\n            image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n            localImage: {},\n            localGallery: []\n          }\n        });\n      }\n    } else {\n      try {\n        const data = await postMutation({\n          variables: {\n            post: finalData\n          }\n        });\n        setBtnLoading(false);\n\n        if (!adPost.id) {\n          dispatch({\n            type: 'UPDATE_ADPOST',\n            payload: {\n              key: 'id',\n              value: data.data.addPost.id\n            }\n          });\n        }\n      } catch (error) {\n        setBtnLoading(false);\n      }\n    }\n  };\n\n  const {\n    preImage,\n    preGallery,\n    localImage,\n    localGallery,\n    location\n  } = adPost,\n        prossedAdPostData = _objectWithoutProperties(adPost, [\"preImage\", \"preGallery\", \"localImage\", \"localGallery\", \"location\"]);\n\n  let finalData = prossedAdPostData;\n\n  if (location && location.lat) {\n    finalData = _objectSpread({}, prossedAdPostData, {\n      location\n    });\n  }\n\n  useEffect(() => {\n    (async function () {\n      if (imagesUrl.length) {\n        try {\n          const data = await postMutation({\n            variables: {\n              post: finalData\n            }\n          });\n          console.log(data, 'data');\n          setBtnLoading(false);\n\n          if (!adPost.id) {\n            dispatch({\n              type: 'UPDATE_ADPOST',\n              payload: {\n                key: 'id',\n                value: data.data.addPost.id\n              }\n            });\n          }\n        } catch (error) {\n          setBtnLoading(false);\n        }\n      }\n    })();\n  }, [prossedAdPostData.gallery]);\n  return __jsx(React.Fragment, null, __jsx(Text, {\n    content: \"Enter the below details\",\n    pb: 20,\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  }), __jsx(Input, {\n    elementType: \"input\",\n    value: adPost.title,\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Title\",\n    changed: title => {\n      dispatch({\n        type: 'UPDATE_ADPOST',\n        payload: {\n          key: 'title',\n          value: title.target.value\n        }\n      }); // if (adPost.slug === '') {\n\n      dispatch({\n        type: 'UPDATE_ADPOST',\n        payload: {\n          key: 'slug',\n          value: getSlug(title.target.value)\n        }\n      }); // }\n    }\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'number',\n      required: 'required'\n    },\n    label: \"Price\",\n    value: adPost.price,\n    changed: price => dispatch({\n      type: 'UPDATE_ADPOST',\n      payload: {\n        key: 'price',\n        value: _parseFloat(price.target.value)\n      }\n    }),\n    style: {\n      marginBottom: 40\n    }\n  }), __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\",\n    mb: 30\n  }, __jsx(Text, {\n    content: \"Negotiable?\",\n    color: \"#595959\"\n  }), __jsx(Switch, {\n    switchSize: \"50px\",\n    switchColor: \"#30C56D\",\n    barColor: \"#30C56D\",\n    onChange: val => dispatch({\n      type: 'UPDATE_ADPOST',\n      payload: {\n        key: 'isNegotiable',\n        value: !adPost.isNegotiable\n      }\n    }),\n    isChecked: adPost.isNegotiable\n  })), __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\",\n    mb: 30\n  }, __jsx(Text, {\n    content: \"New Condition?\",\n    color: \"#595959\"\n  }), __jsx(Switch, {\n    switchSize: \"50px\",\n    switchColor: \"#30C56D\",\n    barColor: \"#30C56D\",\n    onChange: val => {\n      dispatch({\n        type: 'UPDATE_ADPOST',\n        payload: {\n          key: 'condition',\n          value: !adPost.condition\n        }\n      });\n    },\n    isChecked: adPost.condition\n  })), __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\"\n  }, __jsx(Button, {\n    title: \"Save\",\n    iconPosition: \"left\",\n    icon: __jsx(Icon, {\n      icon: archive,\n      size: 18,\n      color: \"#8C8C8C\"\n    }),\n    onClick: handleDraftingPost,\n    variant: \"textButton\",\n    isLoading: btnLoading\n  }), __jsx(Button, {\n    title: \"Next\",\n    iconPosition: \"right\",\n    disabled: adPost.title.length === 0 || adPost.price.length === 0 || btnLoading,\n    onClick: () => dispatch({\n      type: 'UPDATE_STEP',\n      payload: {\n        step: step + 1\n      }\n    }),\n    icon: __jsx(Icon, {\n      icon: chevronRight,\n      size: 21,\n      color: \"#ffffff\"\n    }),\n    style: {\n      backgroundColor: adPost.title.length === 0 || adPost.price.length === 0 || btnLoading ? '#e2e2e2' : '#30C56D'\n    }\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}