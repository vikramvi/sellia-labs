{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/node_modules/reusecore/src/elements/Switch/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useToggle } from '../../hooks';\nimport SwitchStyle from './switch.style';\n\nconst Switch = (_ref) => {\n  let {\n    className,\n    switchColor,\n    isChecked,\n    labelText,\n    labelPosition,\n    switchSize,\n    isMaterial,\n    barColor,\n    onChange,\n    onFocus,\n    onBlur,\n    handleOnChange\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"switchColor\", \"isChecked\", \"labelText\", \"labelPosition\", \"switchSize\", \"isMaterial\", \"barColor\", \"onChange\", \"onFocus\", \"onBlur\", \"handleOnChange\"]);\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__switch']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  handleOnChange = event => {\n    onChange(!isChecked);\n  };\n\n  const LabelField = labelText && __jsx(\"span\", {\n    className: \"reusecore__field-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, labelText);\n\n  const position = labelPosition || 'top';\n  return __jsx(SwitchStyle, _extends({\n    className: addAllClasses.join(' '),\n    switchColor: switchColor,\n    switchSize: switchSize,\n    barColor: barColor\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }), __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, position === 'left' || position === 'right' || position === 'top' ? LabelField : '', __jsx(\"input\", {\n    checked: isChecked,\n    onChange: handleOnChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    className: \"switch\",\n    type: \"checkbox\",\n    value: isChecked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })), position === 'bottom' && LabelField));\n};\n\nSwitch.propTypes = {\n  /** ClassName of the Switch */\n  className: PropTypes.string,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** labelText of the switch field */\n  labelText: PropTypes.string,\n\n  /** switchSize control switch width and height */\n  switchSize: PropTypes.string,\n\n  /** Set label position of the switch field */\n  labelPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n\n  /** Switch toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** Set color for Switch */\n  SwitchColor: PropTypes.string,\n\n  /** Set material bar color for Switch */\n  barColor: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func\n};\nSwitch.defaultProps = {\n  isChecked: false,\n  labelPosition: 'top',\n  onBlur: () => {},\n  onFocus: () => {},\n  onChange: () => {}\n};\nexport default Switch;","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/node_modules/reusecore/src/elements/Switch/index.js"],"names":["React","useState","PropTypes","useToggle","SwitchStyle","Switch","className","switchColor","isChecked","labelText","labelPosition","switchSize","isMaterial","barColor","onChange","onFocus","onBlur","handleOnChange","props","addAllClasses","push","event","LabelField","position","join","propTypes","string","bool","oneOf","SwitchColor","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useToggle } from '../../hooks';\nimport SwitchStyle from './switch.style';\n\nconst Switch = ({\n  className,\n  switchColor,\n  isChecked,\n  labelText,\n  labelPosition,\n  switchSize,\n  isMaterial,\n  barColor,\n  onChange,\n  onFocus,\n  onBlur,\n  handleOnChange,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__switch'];\n\n  // Add label position class\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  }\n\n  // isMaterial prop checking\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  handleOnChange = event => {\n    onChange(!isChecked);\n  };\n\n  const LabelField = labelText && (\n    <span className=\"reusecore__field-label\">{labelText}</span>\n  );\n\n  const position = labelPosition || 'top';\n\n  return (\n    <SwitchStyle\n      className={addAllClasses.join(' ')}\n      switchColor={switchColor}\n      switchSize={switchSize}\n      barColor={barColor}\n      {...props}\n    >\n      <label>\n        {position === 'left' || position === 'right' || position === 'top'\n          ? LabelField\n          : ''}\n\n        <input\n          checked={isChecked}\n          onChange={handleOnChange}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          className=\"switch\"\n          type=\"checkbox\"\n          value={isChecked}\n        />\n        <div>\n          <div />\n        </div>\n        {position === 'bottom' && LabelField}\n      </label>\n    </SwitchStyle>\n  );\n};\n\nSwitch.propTypes = {\n  /** ClassName of the Switch */\n  className: PropTypes.string,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** labelText of the switch field */\n  labelText: PropTypes.string,\n\n  /** switchSize control switch width and height */\n  switchSize: PropTypes.string,\n\n  /** Set label position of the switch field */\n  labelPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n\n  /** Switch toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** Set color for Switch */\n  SwitchColor: PropTypes.string,\n\n  /** Set material bar color for Switch */\n  barColor: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: PropTypes.func\n};\n\nSwitch.defaultProps = {\n  isChecked: false,\n  labelPosition: 'top',\n  onBlur: () => {},\n  onFocus: () => {},\n  onChange: () => {}\n};\n\nexport default Switch;\n"]},"metadata":{},"sourceType":"module"}