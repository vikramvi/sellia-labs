{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Search/SearchPost/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment, useContext, useState } from 'react';\nimport Link from 'next/link';\nimport ListView from '../../../components/ListView';\nimport { ListLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_POST } from 'core/graphql/Search.query';\nimport { CURRENCY } from '../../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { getUrlToState, setStateToUrl } from '../../../helpers/urlHandler';\nimport PlaceholderImg from 'core/static/images/thumb-grid-placeholder.svg';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\n\nconst timeFormatAMPM = date => {\n  return date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n};\n\nconst SearchPostItem = () => {\n  let publishTime = '';\n  const urlState = getUrlToState();\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_SEARCH_POST, {\n    variables: {\n      queryVariables: urlState\n    }\n  });\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  });\n  let searchPosts = data && data.searchPosts && data.searchPosts.data ? data.searchPosts.data : [];\n  const postCount = searchPosts ? searchPosts.length : 1;\n  const totalPost = data && data.searchPosts && data.searchPosts.total ? data.searchPosts.total : 1;\n  const searchPostsData = searchPosts.map(post => {\n    if (post.createdAt) {\n      if (post && post.createdAt && post.createdAt.seconds) {\n        const createdTime = new Date(post.createdAt.seconds * 1000);\n        publishTime = timeFormatAMPM(createdTime);\n      } else if (post && post.createdAt && post.createdAt._seconds) {\n        const createdTime = new Date(post.createdAt._seconds * 1000);\n        publishTime = timeFormatAMPM(createdTime);\n      }\n\n      return _objectSpread(_objectSpread({}, post), {}, {\n        publishTime\n      });\n    } else {\n      return _objectSpread({}, post);\n    }\n  });\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, searchPostsData.length === 0 && !loading ? __jsx(NoItemFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }) : false && __jsx(ListGrid, {\n    data: searchPostsData,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1],\n    componentContainerStyle: {\n      p: 0,\n      borderBottom: '1px solid #eeeeee'\n    },\n    componentWrapperStyle: {\n      margin: 0\n    },\n    component: item => {\n      return __jsx(Link, {\n        href: `${SINGLE_POST_PAGE}/${item.slug}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 19\n        }\n      }, __jsx(ListView, {\n        currency: CURRENCY,\n        title: item.title,\n        price: item.price,\n        source: item.image ? item.image.url : PlaceholderImg,\n        fallbackSource: item.image ? item.image.largeUrl : PlaceholderImg,\n        negotiable: item.isNegotiable,\n        condition: item.condition,\n        location: item && item.formattedLocation && item.formattedLocation.formattedAddress !== null ? item.formattedLocation.formattedAddress : 'Location goes here',\n        distance: item.distance !== null && item.distance !== undefined ? `Approximately ${Math.floor(item.distance)} km away` : '',\n        icon: \"md-pin\",\n        postedTime: item.publishTime ? `Ad posted at ${item.publishTime}` : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      })));\n    },\n    loading: loading ? loading : loadingMore,\n    loaderColor: \"#ffffff\",\n    placeholder: __jsx(ListLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 26\n      }\n    }),\n    limit: state.LIMIT,\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      setStateToUrl({\n        page: state.page + 1\n      });\n      fetchMore({\n        variables: {\n          queryVariables: _objectSpread(_objectSpread({}, urlState), {}, {\n            page: state.page + 1\n          })\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              dispatch({\n                type: 'UPDATE',\n                payload: _objectSpread(_objectSpread({}, state), {}, {\n                  page: state.page + 1\n                })\n              });\n              return {\n                searchPosts: {\n                  data: [...prev.searchPosts.data, ...fetchMoreResult.searchPosts.data],\n                  total: totalPost\n                }\n              };\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }));\n};\n\nconst SearchPost = props => {\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, __jsx(SearchPostItem, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default SearchPost;","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Search/SearchPost/index.js"],"names":["React","Fragment","useContext","useState","Link","ListView","ListLoader","useQuery","GET_SEARCH_POST","CURRENCY","SINGLE_POST_PAGE","SearchContext","getUrlToState","setStateToUrl","PlaceholderImg","ListGrid","NoItemFound","OnError","timeFormatAMPM","date","toLocaleString","hour","minute","hour12","SearchPostItem","publishTime","urlState","state","dispatch","loadingMore","toggleLoading","data","loading","error","fetchMore","variables","queryVariables","searchPosts","postCount","length","totalPost","total","searchPostsData","map","post","createdAt","seconds","createdTime","Date","_seconds","p","borderBottom","margin","item","slug","title","price","image","url","largeUrl","isNegotiable","condition","formattedLocation","formattedAddress","distance","undefined","Math","floor","LIMIT","page","updateQuery","prev","fetchMoreResult","type","payload","SearchPost","props"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext, useState } from 'react';\nimport Link from 'next/link';\nimport ListView from '../../../components/ListView';\nimport { ListLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_POST } from 'core/graphql/Search.query';\nimport { CURRENCY } from '../../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { getUrlToState, setStateToUrl } from '../../../helpers/urlHandler';\nimport PlaceholderImg from 'core/static/images/thumb-grid-placeholder.svg';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\n\nconst timeFormatAMPM = date => {\n  return date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  });\n};\n\nconst SearchPostItem = () => {\n  let publishTime = '';\n  const urlState = getUrlToState();\n  const { state, dispatch } = useContext(SearchContext);\n  const [loadingMore, toggleLoading] = useState(false);\n\n  const { data, loading, error, fetchMore } = useQuery(GET_SEARCH_POST, {\n    variables: {\n      queryVariables: urlState,\n    },\n  });\n  if (error) return <OnError />;\n\n  let searchPosts =\n    data && data.searchPosts && data.searchPosts.data\n      ? data.searchPosts.data\n      : [];\n  const postCount = searchPosts ? searchPosts.length : 1;\n  const totalPost =\n    data && data.searchPosts && data.searchPosts.total\n      ? data.searchPosts.total\n      : 1;\n  const searchPostsData = searchPosts.map(post => {\n    if (post.createdAt) {\n      if (post && post.createdAt && post.createdAt.seconds) {\n        const createdTime = new Date(post.createdAt.seconds * 1000);\n        publishTime = timeFormatAMPM(createdTime);\n      } else if (post && post.createdAt && post.createdAt._seconds) {\n        const createdTime = new Date(post.createdAt._seconds * 1000);\n        publishTime = timeFormatAMPM(createdTime);\n      }\n      return {\n        ...post,\n        publishTime,\n      };\n    } else {\n      return {\n        ...post,\n      };\n    }\n  });\n  return (\n    <Fragment>\n      {searchPostsData.length === 0 && !loading ? (\n        <NoItemFound />\n      ) : (\n        process.browser && (\n          <ListGrid\n            data={searchPostsData}\n            totalPost={totalPost}\n            postCount={postCount}\n            columnWidth={[1]}\n            componentContainerStyle={{\n              p: 0,\n              borderBottom: '1px solid #eeeeee',\n            }}\n            componentWrapperStyle={{\n              margin: 0,\n            }}\n            component={item => {\n              return (\n                <Link href={`${SINGLE_POST_PAGE}/${item.slug}`}>\n                  <a>\n                    <ListView\n                      currency={CURRENCY}\n                      title={item.title}\n                      price={item.price}\n                      source={item.image ? item.image.url : PlaceholderImg}\n                      fallbackSource={\n                        item.image ? item.image.largeUrl : PlaceholderImg\n                      }\n                      negotiable={item.isNegotiable}\n                      condition={item.condition}\n                      location={\n                        item &&\n                        item.formattedLocation &&\n                        item.formattedLocation.formattedAddress !== null\n                          ? item.formattedLocation.formattedAddress\n                          : 'Location goes here'\n                      }\n                      distance={\n                        item.distance !== null && item.distance !== undefined\n                          ? `Approximately ${Math.floor(item.distance)} km away`\n                          : ''\n                      }\n                      icon=\"md-pin\"\n                      postedTime={\n                        item.publishTime\n                          ? `Ad posted at ${item.publishTime}`\n                          : ''\n                      }\n                    />\n                  </a>\n                </Link>\n              );\n            }}\n            loading={loading ? loading : loadingMore}\n            loaderColor=\"#ffffff\"\n            placeholder={<ListLoader />}\n            limit={state.LIMIT}\n            handleLoadMore={loading => {\n              toggleLoading(true);\n              setStateToUrl({ page: state.page + 1 });\n              fetchMore({\n                variables: {\n                  queryVariables: { ...urlState, page: state.page + 1 },\n                },\n                updateQuery: (prev, { fetchMoreResult }) => {\n                  if (!fetchMoreResult) {\n                    toggleLoading(false);\n                    return prev;\n                  }\n                  if (postCount && totalPost) {\n                    if (postCount <= totalPost) {\n                      toggleLoading(false);\n                      dispatch({\n                        type: 'UPDATE',\n                        payload: { ...state, page: state.page + 1 },\n                      });\n                      return {\n                        searchPosts: {\n                          data: [\n                            ...prev.searchPosts.data,\n                            ...fetchMoreResult.searchPosts.data,\n                          ],\n                          total: totalPost,\n                        },\n                      };\n                    }\n                  }\n                },\n              });\n            }}\n          />\n        )\n      )}\n    </Fragment>\n  );\n};\n\nconst SearchPost = props => {\n  return (\n    <Fragment>\n      <SearchPostItem {...props} />\n    </Fragment>\n  );\n};\n\nexport default SearchPost;\n"]},"metadata":{},"sourceType":"module"}