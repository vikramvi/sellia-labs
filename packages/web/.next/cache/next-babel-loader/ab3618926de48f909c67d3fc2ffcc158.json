{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Box from '../Box';\nimport Button from '../Button';\nimport Loader from '../Loader';\nimport Text from '../Text';\n\nconst LoadMore = ({\n  handleLoadMore,\n  showButton,\n  buttonText,\n  buttonVariant,\n  loaderColor,\n  isLoading,\n  loadMoreComponent,\n  loadMoreWrapperStyle,\n  loadMoreButtonStyle\n}) => {\n  return __jsx(React.Fragment, null, showButton ? __jsx(Box, loadMoreWrapperStyle, loadMoreComponent ? loadMoreComponent : __jsx(Button, _extends({\n    variant: buttonVariant,\n    title: buttonText || 'Load More',\n    isLoading: isLoading,\n    loader: __jsx(Loader, {\n      loaderColor: loaderColor\n    }),\n    onClick: handleLoadMore\n  }, loadMoreButtonStyle))) : null);\n};\n\nconst ListGrid = ({\n  data = [],\n  total,\n  component,\n  columnWidth,\n  postCount,\n  totalPost,\n  pagination,\n  paginationComponent,\n  handleLoadMore,\n  loadMoreComponent,\n  infinityScroll,\n  placeholder,\n  loading,\n  isLoading,\n  limit,\n  buttonText,\n  buttonVariant,\n  loaderColor,\n  componentWrapperStyle,\n  componentContainerStyle,\n  loadMoreWrapperStyle,\n  loadMoreButtonStyle,\n  paginationWrapperStyle,\n  className\n}) => {\n  const Limit = limit ? Number(limit) : 1;\n  const limits = [];\n\n  for (let i = 0; i < Limit; i++) {\n    limits.push(i);\n  } // const grabPostNumber = data.length;\n\n\n  let showButton = postCount < totalPost;\n  return __jsx(React.Fragment, null, __jsx(Box, _extends({}, componentWrapperStyle, {\n    className: className\n  }), data.length ? __jsx(React.Fragment, null, data.map((item, index) => __jsx(Box, _extends({\n    width: columnWidth,\n    key: index\n  }, componentContainerStyle, {\n    className: \"singleGridBox\"\n  }), component(item, index)))) : null, loading && __jsx(React.Fragment, null, limits.map(index => __jsx(Box, _extends({\n    width: columnWidth,\n    key: index\n  }, componentContainerStyle), placeholder ? placeholder : __jsx(Text, {\n    content: \"Loading ...\"\n  }))))), postCount < totalPost && __jsx(LoadMore, {\n    showButton: showButton,\n    handleLoadMore: handleLoadMore,\n    isLoading: isLoading,\n    buttonText: buttonText,\n    buttonVariant: buttonVariant,\n    loaderColor: loaderColor,\n    loadMoreComponent: loadMoreComponent,\n    loadMoreButtonStyle: loadMoreButtonStyle,\n    loadMoreWrapperStyle: loadMoreWrapperStyle\n  }), paginationComponent && __jsx(Box, paginationWrapperStyle, paginationComponent));\n};\n\nListGrid.defaultProps = {\n  componentWrapperStyle: {\n    flexBox: true,\n    flexWrap: 'wrap',\n    mr: '-1rem',\n    ml: '-1rem'\n  },\n  componentContainerStyle: {\n    pr: '1rem',\n    pl: '1rem'\n  },\n  loadMoreWrapperStyle: {\n    flexBox: true,\n    justifyContent: 'center',\n    mt: '1rem'\n  }\n};\nexport default ListGrid;","map":null,"metadata":{},"sourceType":"module"}