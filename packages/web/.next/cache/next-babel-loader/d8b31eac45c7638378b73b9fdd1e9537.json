{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/AccountSetting/ChangePassword/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport { withFormik } from 'formik';\nimport AuthHelper from '../../../helpers/authHelper';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from '../../SignInForm/style';\nconst ResetPassEnhancer = withFormik({\n  mapPropsToValues: props => ({\n    currentPass: '',\n    newPass: '',\n    confirmPass: ''\n  }),\n  validationSchema: Yup.object().shape({\n    currentPass: Yup.string().required('Current Password is required!'),\n    newPass: Yup.string().required('New Password is required'),\n    confirmPass: Yup.string().oneOf([Yup.ref('newPass'), null], \"Password don't match\").required('Password Confirm is required')\n  })\n});\n\nconst ResetPass = ({\n  values,\n  touched,\n  errors,\n  handleChange,\n  handleSubmit,\n  handleBlur\n}) => {\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: isSubmitted,\n    1: setIssubmit\n  } = useState(false);\n\n  handleSubmit = async () => {\n    setIssubmit(true);\n\n    if (Object.keys(errors).length !== 0) {\n      return;\n    }\n\n    const hasPasswordReset = await AuthHelper.changePassword(values.currentPass, values.newPass);\n\n    if (hasPasswordReset && !hasPasswordReset.error) {\n      setMessage('Password Reset Successful!');\n    } else if (hasPasswordReset.error) {\n      setMessage(hasPasswordReset.error.message);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Password Setting\",\n    pb: 32,\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(FormGroup, {\n    className: errors.currentPass ? 'hasErrorMsg' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    onBlur: handleBlur('currentPass'),\n    label: \"Current Password\",\n    changed: handleChange('currentPass'),\n    secureTextEntry: true,\n    value: values.currentPass,\n    error: errors.currentPass,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), __jsx(\"span\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, errors.currentPass && touched.currentPass || isSubmitted && errors.currentPass ? errors.currentPass : null)), __jsx(FormGroup, {\n    className: errors.newPass ? 'hasErrorMsg' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    label: \"New Password\",\n    changed: handleChange('newPass'),\n    secureTextEntry: true,\n    onBlur: handleBlur('newPass'),\n    value: values.newPass,\n    secureTextEntry: true,\n    error: errors.newPass,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), __jsx(\"span\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, errors.newPass && touched.newPass || isSubmitted && errors.newPass ? errors.newPass : null)), __jsx(FormGroup, {\n    className: errors.confirmPass ? 'hasErrorMsg' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    label: \"Confirm Password\",\n    changed: handleChange('confirmPass'),\n    onBlur: handleBlur('confirmPass'),\n    secureTextEntry: true,\n    value: values.confirmPass,\n    secureTextEntry: true,\n    error: errors.confirmPass,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), __jsx(\"span\", {\n    className: \"errorMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, errors.confirmPass && touched.confirmPass || isSubmitted && errors.confirmPass ? errors.confirmPass : null)), message ? __jsx(Box, {\n    flexBox: true,\n    mt: 20,\n    mb: 15,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, __jsx(ErrorNotification, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, message)) : '', __jsx(Button, {\n    onClick: handleSubmit // disabled={Object.keys(errors).length !== 0}\n    ,\n    title: \"Save Changes\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1,\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ResetPassEnhancer(ResetPass);","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/AccountSetting/ChangePassword/index.js"],"names":["React","useState","Yup","Input","Heading","Button","withFormik","AuthHelper","Box","FormGroup","ErrorNotification","ResetPassEnhancer","mapPropsToValues","props","currentPass","newPass","confirmPass","validationSchema","object","shape","string","required","oneOf","ref","ResetPass","values","touched","errors","handleChange","handleSubmit","handleBlur","message","setMessage","isSubmitted","setIssubmit","Object","keys","length","hasPasswordReset","changePassword","error","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,GAAP,MAAgB,4BAAhB;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,wBAA7C;AAEA,MAAMC,iBAAiB,GAAGL,UAAU,CAAC;AACnCM,EAAAA,gBAAgB,EAAEC,KAAK,KAAK;AAC1BC,IAAAA,WAAW,EAAE,EADa;AAE1BC,IAAAA,OAAO,EAAE,EAFiB;AAG1BC,IAAAA,WAAW,EAAE;AAHa,GAAL,CADY;AAMnCC,EAAAA,gBAAgB,EAAEf,GAAG,CAACgB,MAAJ,GAAaC,KAAb,CAAmB;AACnCL,IAAAA,WAAW,EAAEZ,GAAG,CAACkB,MAAJ,GAAaC,QAAb,CAAsB,+BAAtB,CADsB;AAEnCN,IAAAA,OAAO,EAAEb,GAAG,CAACkB,MAAJ,GAAaC,QAAb,CAAsB,0BAAtB,CAF0B;AAGnCL,IAAAA,WAAW,EAAEd,GAAG,CAACkB,MAAJ,GACVE,KADU,CACJ,CAACpB,GAAG,CAACqB,GAAJ,CAAQ,SAAR,CAAD,EAAqB,IAArB,CADI,EACwB,sBADxB,EAEVF,QAFU,CAED,8BAFC;AAHsB,GAAnB;AANiB,CAAD,CAApC;;AAeA,MAAMG,SAAS,GAAG,CAAC;AACjBC,EAAAA,MADiB;AAEjBC,EAAAA,OAFiB;AAGjBC,EAAAA,MAHiB;AAIjBC,EAAAA,YAJiB;AAKjBC,EAAAA,YALiB;AAMjBC,EAAAA;AANiB,CAAD,KAOZ;AACJ,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwB/B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACgC,WAAD;AAAA,OAAcC;AAAd,MAA6BjC,QAAQ,CAAC,KAAD,CAA3C;;AACA4B,EAAAA,YAAY,GAAG,YAAY;AACzBK,IAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,QAAIC,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,MAApB,KAA+B,CAAnC,EAAsC;AACpC;AACD;;AACD,UAAMC,gBAAgB,GAAG,MAAM/B,UAAU,CAACgC,cAAX,CAC7Bd,MAAM,CAACX,WADsB,EAE7BW,MAAM,CAACV,OAFsB,CAA/B;;AAIA,QAAIuB,gBAAgB,IAAI,CAACA,gBAAgB,CAACE,KAA1C,EAAiD;AAC/CR,MAAAA,UAAU,CAAC,4BAAD,CAAV;AACD,KAFD,MAEO,IAAIM,gBAAgB,CAACE,KAArB,EAA4B;AACjCR,MAAAA,UAAU,CAACM,gBAAgB,CAACE,KAAjB,CAAuBT,OAAxB,CAAV;AACD;AACF,GAdD;;AAeA,SACE,4BACE,MAAC,OAAD;AACE,IAAA,EAAE,EAAC,IADL;AAEE,IAAA,OAAO,EAAC,kBAFV;AAGE,IAAA,EAAE,EAAE,EAHN;AAIE,IAAA,QAAQ,EAAE,EAJZ;AAKE,IAAA,KAAK,EAAC,SALR;AAME,IAAA,UAAU,EAAE,GANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUE,MAAC,SAAD;AAAW,IAAA,SAAS,EAAEJ,MAAM,CAACb,WAAP,GAAqB,aAArB,GAAqC,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,WAAW,EAAC,OADd;AAEE,IAAA,aAAa,EAAE;AACb2B,MAAAA,IAAI,EAAE,UADO;AAEbpB,MAAAA,QAAQ,EAAE;AAFG,KAFjB;AAME,IAAA,MAAM,EAAES,UAAU,CAAC,aAAD,CANpB;AAOE,IAAA,KAAK,EAAC,kBAPR;AAQE,IAAA,OAAO,EAAEF,YAAY,CAAC,aAAD,CARvB;AASE,IAAA,eAAe,EAAE,IATnB;AAUE,IAAA,KAAK,EAAEH,MAAM,CAACX,WAVhB;AAWE,IAAA,KAAK,EAAEa,MAAM,CAACb,WAXhB;AAYE,IAAA,OAAO,EAAEY,OAZX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAeE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,MAAM,CAACb,WAAP,IAAsBY,OAAO,CAACZ,WAA/B,IACAmB,WAAW,IAAIN,MAAM,CAACb,WADtB,GAEGa,MAAM,CAACb,WAFV,GAGG,IAJN,CAfF,CAVF,EAiCE,MAAC,SAAD;AAAW,IAAA,SAAS,EAAEa,MAAM,CAACZ,OAAP,GAAiB,aAAjB,GAAiC,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,WAAW,EAAC,OADd;AAEE,IAAA,aAAa,EAAE;AACb0B,MAAAA,IAAI,EAAE,UADO;AAEbpB,MAAAA,QAAQ,EAAE;AAFG,KAFjB;AAME,IAAA,KAAK,EAAC,cANR;AAOE,IAAA,OAAO,EAAEO,YAAY,CAAC,SAAD,CAPvB;AAQE,IAAA,eAAe,EAAE,IARnB;AASE,IAAA,MAAM,EAAEE,UAAU,CAAC,SAAD,CATpB;AAUE,IAAA,KAAK,EAAEL,MAAM,CAACV,OAVhB;AAWE,IAAA,eAAe,EAAE,IAXnB;AAYE,IAAA,KAAK,EAAEY,MAAM,CAACZ,OAZhB;AAaE,IAAA,OAAO,EAAEW,OAbX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAgBE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,MAAM,CAACZ,OAAP,IAAkBW,OAAO,CAACX,OAA3B,IACAkB,WAAW,IAAIN,MAAM,CAACZ,OADtB,GAEGY,MAAM,CAACZ,OAFV,GAGG,IAJN,CAhBF,CAjCF,EAyDE,MAAC,SAAD;AAAW,IAAA,SAAS,EAAEY,MAAM,CAACX,WAAP,GAAqB,aAArB,GAAqC,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,WAAW,EAAC,OADd;AAEE,IAAA,aAAa,EAAE;AACbyB,MAAAA,IAAI,EAAE,UADO;AAEbpB,MAAAA,QAAQ,EAAE;AAFG,KAFjB;AAME,IAAA,KAAK,EAAC,kBANR;AAOE,IAAA,OAAO,EAAEO,YAAY,CAAC,aAAD,CAPvB;AAQE,IAAA,MAAM,EAAEE,UAAU,CAAC,aAAD,CARpB;AASE,IAAA,eAAe,EAAE,IATnB;AAUE,IAAA,KAAK,EAAEL,MAAM,CAACT,WAVhB;AAWE,IAAA,eAAe,EAAE,IAXnB;AAYE,IAAA,KAAK,EAAEW,MAAM,CAACX,WAZhB;AAaE,IAAA,OAAO,EAAEU,OAbX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAgBE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIC,MAAM,CAACX,WAAP,IAAsBU,OAAO,CAACV,WAA/B,IACAiB,WAAW,IAAIN,MAAM,CAACX,WADtB,GAEGW,MAAM,CAACX,WAFV,GAGG,IAJN,CAhBF,CAzDF,EAqFGe,OAAO,GACN,MAAC,GAAD;AACE,IAAA,OAAO,MADT;AAEE,IAAA,EAAE,EAAE,EAFN;AAGE,IAAA,EAAE,EAAE,EAHN;AAIE,IAAA,cAAc,EAAC,QAJjB;AAKE,IAAA,UAAU,EAAC,QALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBA,OAApB,CAPF,CADM,GAWN,EAhGJ,EAmGE,MAAC,MAAD;AACE,IAAA,OAAO,EAAEF,YADX,CAEE;AAFF;AAGE,IAAA,KAAK,EAAC,cAHR;AAIE,IAAA,EAAE,EAAC,SAJL;AAKE,IAAA,KAAK,EAAC,SALR;AAME,IAAA,KAAK,EAAE,CANT;AAOE,IAAA,EAAE,EAAE,EAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnGF,CADF;AA+GD,CAxID;;AA0IA,eAAelB,iBAAiB,CAACa,SAAD,CAAhC","sourcesContent":["import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport { withFormik } from 'formik';\nimport AuthHelper from '../../../helpers/authHelper';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from '../../SignInForm/style';\n\nconst ResetPassEnhancer = withFormik({\n  mapPropsToValues: props => ({\n    currentPass: '',\n    newPass: '',\n    confirmPass: '',\n  }),\n  validationSchema: Yup.object().shape({\n    currentPass: Yup.string().required('Current Password is required!'),\n    newPass: Yup.string().required('New Password is required'),\n    confirmPass: Yup.string()\n      .oneOf([Yup.ref('newPass'), null], \"Password don't match\")\n      .required('Password Confirm is required'),\n  }),\n});\n\nconst ResetPass = ({\n  values,\n  touched,\n  errors,\n  handleChange,\n  handleSubmit,\n  handleBlur,\n}) => {\n  const [message, setMessage] = useState('');\n  const [isSubmitted, setIssubmit] = useState(false);\n  handleSubmit = async () => {\n    setIssubmit(true);\n    if (Object.keys(errors).length !== 0) {\n      return;\n    }\n    const hasPasswordReset = await AuthHelper.changePassword(\n      values.currentPass,\n      values.newPass\n    );\n    if (hasPasswordReset && !hasPasswordReset.error) {\n      setMessage('Password Reset Successful!');\n    } else if (hasPasswordReset.error) {\n      setMessage(hasPasswordReset.error.message);\n    }\n  };\n  return (\n    <>\n      <Heading\n        as=\"h3\"\n        content=\"Password Setting\"\n        pb={32}\n        fontSize={18}\n        color=\"#333333\"\n        fontWeight={600}\n      />\n\n      <FormGroup className={errors.currentPass ? 'hasErrorMsg' : ''}>\n        <Input\n          elementType=\"input\"\n          elementConfig={{\n            type: 'password',\n            required: 'required',\n          }}\n          onBlur={handleBlur('currentPass')}\n          label=\"Current Password\"\n          changed={handleChange('currentPass')}\n          secureTextEntry={true}\n          value={values.currentPass}\n          error={errors.currentPass}\n          touched={touched}\n        />\n        <span className=\"errorMsg\">\n          {(errors.currentPass && touched.currentPass) ||\n          (isSubmitted && errors.currentPass)\n            ? errors.currentPass\n            : null}\n        </span>\n      </FormGroup>\n\n      <FormGroup className={errors.newPass ? 'hasErrorMsg' : ''}>\n        <Input\n          elementType=\"input\"\n          elementConfig={{\n            type: 'password',\n            required: 'required',\n          }}\n          label=\"New Password\"\n          changed={handleChange('newPass')}\n          secureTextEntry={true}\n          onBlur={handleBlur('newPass')}\n          value={values.newPass}\n          secureTextEntry={true}\n          error={errors.newPass}\n          touched={touched}\n        />\n        <span className=\"errorMsg\">\n          {(errors.newPass && touched.newPass) ||\n          (isSubmitted && errors.newPass)\n            ? errors.newPass\n            : null}\n        </span>\n      </FormGroup>\n\n      <FormGroup className={errors.confirmPass ? 'hasErrorMsg' : ''}>\n        <Input\n          elementType=\"input\"\n          elementConfig={{\n            type: 'password',\n            required: 'required',\n          }}\n          label=\"Confirm Password\"\n          changed={handleChange('confirmPass')}\n          onBlur={handleBlur('confirmPass')}\n          secureTextEntry={true}\n          value={values.confirmPass}\n          secureTextEntry={true}\n          error={errors.confirmPass}\n          touched={touched}\n        />\n        <span className=\"errorMsg\">\n          {(errors.confirmPass && touched.confirmPass) ||\n          (isSubmitted && errors.confirmPass)\n            ? errors.confirmPass\n            : null}\n        </span>\n      </FormGroup>\n\n      {/* <p style={{ color: '#EF5A5A', textAlign: 'center' }}>\n        {message ? message : ''}\n      </p> */}\n\n      {message ? (\n        <Box\n          flexBox\n          mt={20}\n          mb={15}\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <ErrorNotification>{message}</ErrorNotification>\n        </Box>\n      ) : (\n        ''\n      )}\n\n      <Button\n        onClick={handleSubmit}\n        // disabled={Object.keys(errors).length !== 0}\n        title=\"Save Changes\"\n        bg=\"#30C56D\"\n        color=\"#ffffff\"\n        width={1}\n        mt={10}\n      />\n    </>\n  );\n};\n\nexport default ResetPassEnhancer(ResetPass);\n"]},"metadata":{},"sourceType":"module"}