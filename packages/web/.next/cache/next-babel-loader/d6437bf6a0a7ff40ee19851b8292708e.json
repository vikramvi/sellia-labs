{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useContext } from 'react';\nimport { CategoryListCard } from '../../../components/CategoryCard';\nimport { CategoryLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_CATEGORY } from 'core/graphql/Search.query';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { addOrRemove, inArray } from '../../../helpers';\nimport { setStateToUrl, getUrlToState } from '../../../helpers/urlHandler';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport OnError from '../../../components/OnError';\n\nfunction SearchCategory() {\n  var urlState = getUrlToState();\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      paginate = _useState2[1];\n\n  var _useContext = useContext(SearchContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var QUERY_VARIABLES = {\n    LIMIT: 6\n  };\n\n  var _useQuery = useQuery(GET_SEARCH_CATEGORY, {\n    variables: QUERY_VARIABLES\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore;\n\n  if (error) return __jsx(OnError, null); // if (loading) return null;\n\n  var allCategories = data && data.categories && data.categories.data ? data.categories.data : [];\n  var categoryCount = data && data.categories && data.categories.length ? data.categories.length : 1;\n  var total = data && data.categories && data.categories.total ? data.categories.total : 1;\n\n  var handleCategorySelection =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(slug) {\n      var selectedCategories;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return addOrRemove(slug, state.categories);\n\n            case 2:\n              selectedCategories = _context.sent;\n              setStateToUrl({\n                categories: selectedCategories\n              });\n              dispatch({\n                type: 'UPDATE',\n                payload: {\n                  categories: selectedCategories\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleCategorySelection(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Fragment, null, __jsx(ListGrid, {\n    data: allCategories,\n    totalPost: total,\n    postCount: allCategories.length,\n    columnWidth: [1],\n    component: function component(item) {\n      return __jsx(CategoryListCard, {\n        title: item.name,\n        selected: inArray(item.slug, urlState.categories),\n        postNumber: \"\".concat(item.posts.total, \" posts\"),\n        source: item.image ? item.image.url : '',\n        style: {\n          paddingLeft: 30,\n          paddingRight: 20\n        },\n        handleClick: function handleClick() {\n          return handleCategorySelection(item.slug);\n        }\n      });\n    },\n    loading: loading ? loading : loadingMore,\n    buttonVariant: \"textButton\",\n    loadMoreButtonStyle: {\n      color: '#595959',\n      textDecoration: 'none !important'\n    },\n    placeholder: __jsx(CategoryLoader, null),\n    limit: QUERY_VARIABLES.LIMIT,\n    componentWrapperStyle: {\n      ml: 0,\n      mr: 0,\n      mb: 20\n    },\n    componentContainerStyle: {\n      pl: 0,\n      pr: 0\n    },\n    loadMoreWrapperStyle: {\n      width: '100%',\n      flexBox: true,\n      flexDirection: 'row',\n      justifyContent: 'center',\n      pt: '5px',\n      pb: '5px',\n      borderTop: '1px solid #e2e2e2'\n    },\n    handleLoadMore: function handleLoadMore(loading) {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: function updateQuery(prev, _ref2) {\n          var fetchMoreResult = _ref2.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          var oldPosts = prev.categories.data;\n          var newPosts = fetchMoreResult.categories.data;\n          console.log('before everything');\n\n          if (categoryCount && total) {\n            console.log('called');\n\n            if (categoryCount <= total) {\n              console.log('called 1');\n              toggleLoading(false);\n              var concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.categories.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    }\n  }));\n}\n\nexport default SearchCategory;","map":null,"metadata":{},"sourceType":"module"}