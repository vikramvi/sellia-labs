{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Profile/userFavourite.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { PostLoader } from '../../components/Placeholder';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_FAVOURITE_POST } from 'core/graphql/Profile.query';\nimport { CURRENCY } from '../../Config';\nimport { withRouter } from 'next/router';\nimport PostCard from '../../components/PostCard';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\nexport default _c2 = withRouter(_c = _s(function FavouritePost(_ref) {\n  var _this = this;\n\n  _s();\n\n  var username = _ref.router.query.username;\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      paginate = _useState2[1]; // QUERY SECTION\n\n\n  var QUERY_VARIABLES;\n  QUERY_VARIABLES = {\n    USERNAME: username,\n    LIMIT: 12\n  };\n\n  var _useQuery = useQuery(GET_FAVOURITE_POST, {\n    variables: QUERY_VARIABLES\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore;\n\n  var favouritePosts = data && data.author && data.author.favourite && data.author.favourite.data ? data.author.favourite.data : [];\n  var favouritePostCount = data && data.author && data.author.favourite ? data.author.favourite.total : 0;\n  var totalPost = favouritePostCount; // this line will be removed by GET ALL POST\n\n  var postCount = favouritePosts.length;\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }); // Post Loop Control Area\n\n  return __jsx(Grid, {\n    style: {\n      paddingLeft: 15,\n      paddingRight: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, !loading && favouritePosts.length === 0 ? __jsx(NoItemFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }) : __jsx(ListGrid, {\n    data: favouritePosts,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: ['100%', '50%', '33.33%', '25%'],\n    component: function component(item) {\n      var postImg = item.image ? item.image.url : '';\n      var postFallbackImage = item.image ? item.image.largeUrl : '';\n      return __jsx(Link, {\n        href: \"\".concat(SINGLE_POST_PAGE, \"/\").concat(item.slug),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, __jsx(PostCard, {\n        currency: CURRENCY,\n        title: item.title,\n        price: item.price,\n        imageSrc: [postImg, postFallbackImage],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 19\n        }\n      })));\n    },\n    loading: loading ? loading : loadingMore,\n    placeholder: __jsx(PostLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 24\n      }\n    }),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: function handleLoadMore(loading) {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: function updateQuery(prev, _ref2) {\n          var fetchMoreResult = _ref2.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          var oldPosts = prev.author.favourite.data;\n          var newPosts = fetchMoreResult.author.favourite.data;\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              var concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.author.favourite.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }));\n}, \"rGadjvRkkFk17R26hi68/KEVYuw=\", false, function () {\n  return [useQuery];\n}));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$withRouter\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/containers/Profile/userFavourite.js"],"names":["React","useState","Link","PostLoader","Grid","SINGLE_POST_PAGE","useQuery","GET_FAVOURITE_POST","CURRENCY","withRouter","PostCard","ListGrid","NoItemFound","OnError","FavouritePost","username","router","query","loadingMore","toggleLoading","page","paginate","QUERY_VARIABLES","USERNAME","LIMIT","variables","data","loading","error","fetchMore","favouritePosts","author","favourite","favouritePostCount","total","totalPost","postCount","length","paddingLeft","paddingRight","item","postImg","image","url","postFallbackImage","largeUrl","slug","title","price","updateQuery","prev","fetchMoreResult","oldPosts","newPosts","concatedPosts","concat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Link from 'next/link';\nimport { PostLoader } from '../../components/Placeholder';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_FAVOURITE_POST } from 'core/graphql/Profile.query';\nimport { CURRENCY } from '../../Config';\nimport { withRouter } from 'next/router';\nimport PostCard from '../../components/PostCard';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\n\nexport default withRouter(function FavouritePost({\n  router: {\n    query: { username },\n  },\n}) {\n  const [loadingMore, toggleLoading] = useState(false);\n  const [page, paginate] = useState(1);\n  // QUERY SECTION\n  let QUERY_VARIABLES;\n  QUERY_VARIABLES = {\n    USERNAME: username,\n    LIMIT: 12,\n  };\n  const { data, loading, error, fetchMore } = useQuery(GET_FAVOURITE_POST, {\n    variables: QUERY_VARIABLES,\n  });\n\n  const favouritePosts =\n    data && data.author && data.author.favourite && data.author.favourite.data\n      ? data.author.favourite.data\n      : [];\n\n  const favouritePostCount =\n    data && data.author && data.author.favourite\n      ? data.author.favourite.total\n      : 0;\n\n  const totalPost = favouritePostCount; // this line will be removed by GET ALL POST\n  const postCount = favouritePosts.length;\n  if (error) return <OnError />;\n\n  // Post Loop Control Area\n  return (\n    <Grid style={{ paddingLeft: 15, paddingRight: 15 }}>\n      {!loading && favouritePosts.length === 0 ? (\n        <NoItemFound />\n      ) : (\n        <ListGrid\n          data={favouritePosts}\n          totalPost={totalPost}\n          postCount={postCount}\n          columnWidth={['100%', '50%', '33.33%', '25%']}\n          component={item => {\n            const postImg = item.image ? item.image.url : '';\n            const postFallbackImage = item.image ? item.image.largeUrl : '';\n            return (\n              <Link href={`${SINGLE_POST_PAGE}/${item.slug}`}>\n                <a>\n                  <PostCard\n                    currency={CURRENCY}\n                    title={item.title}\n                    price={item.price}\n                    imageSrc={[postImg, postFallbackImage]}\n                  />\n                </a>\n              </Link>\n            );\n          }}\n          loading={loading ? loading : loadingMore}\n          placeholder={<PostLoader />}\n          limit={QUERY_VARIABLES.LIMIT}\n          handleLoadMore={loading => {\n            toggleLoading(true);\n            paginate(page + 1);\n            fetchMore({\n              variables: {\n                page: page + 1,\n              },\n              updateQuery: (prev, { fetchMoreResult }) => {\n                if (!fetchMoreResult) {\n                  toggleLoading(false);\n                  return prev;\n                }\n                const oldPosts = prev.author.favourite.data;\n                const newPosts = fetchMoreResult.author.favourite.data;\n                if (postCount && totalPost) {\n                  if (postCount <= totalPost) {\n                    toggleLoading(false);\n                    const concatedPosts = oldPosts.concat(newPosts);\n                    fetchMoreResult.author.favourite.data = concatedPosts;\n                    return fetchMoreResult;\n                  }\n                }\n              },\n            });\n          }}\n        />\n      )}\n    </Grid>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}