{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { firebaseAuth } from './init';\nimport { setFirebaseCookie } from './session';\n/**\n * Firebase Authentication helper functions\n */\n\nclass AuthHelper {\n  constructor() {\n    _defineProperty(this, \"signUp\", async (provider, email, password) => {\n      try {\n        switch (provider) {\n          case 'password':\n            return new Promise((resolve, reject) => {\n              firebaseAuth().createUserWithEmailAndPassword(email, password).then(result => {\n                resolve(result);\n              }).catch(error => {\n                resolve({\n                  error\n                });\n              });\n            });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"forgetPass\", async email => {\n      return new Promise((resolve, reject) => {\n        firebaseAuth().sendPasswordResetEmail(email).then(result => {\n          resolve(true);\n        }).catch(error => {\n          resolve({\n            error\n          });\n        });\n      });\n    });\n\n    _defineProperty(this, \"reauthenticate\", async currentPassword => {\n      var user = firebaseAuth().currentUser;\n      var cred = firebaseAuth.EmailAuthProvider.credential(user.email, currentPassword);\n      return user.reauthenticateWithCredential(cred);\n    });\n\n    _defineProperty(this, \"changePassword\", async (currentPassword, newPassword) => new Promise((resolve, reject) => {\n      try {\n        this.reauthenticate(currentPassword).then(() => {\n          var user = firebaseAuth().currentUser;\n          user.updatePassword(newPassword).then(() => {\n            resolve(true);\n          }).catch(error => {\n            resolve({\n              error\n            });\n          });\n        }).catch(error => {\n          resolve({\n            error\n          });\n        });\n      } catch (error) {\n        resolve({\n          error\n        });\n      }\n    }));\n\n    _defineProperty(this, \"login\", async (provider, email = null, password = null, phoneNumber = null) => {\n      try {\n        switch (provider) {\n          case 'password':\n            return new Promise((resolve, reject) => {\n              firebaseAuth().signInWithEmailAndPassword(email, password).then(result => {\n                resolve(result);\n              }).catch(error => {\n                resolve({\n                  error\n                });\n              });\n            });\n\n          case 'google':\n            var authProvider = new firebaseAuth.GoogleAuthProvider();\n            return firebaseAuth().signInWithPopup(authProvider);\n\n          case 'facebook':\n            var authProvider = new firebaseAuth.FacebookAuthProvider();\n            return firebaseAuth().signInWithPopup(authProvider);\n\n          case 'twitter':\n            var authProvider = new firebaseAuth.TwitterAuthProvider();\n            return firebaseAuth().signInWithPopup(authProvider);\n\n          case 'phone':\n            let appVerifier;\n            appVerifier = window.recaptchaVerifier;\n            return new Promise((resolve, reject) => {\n              firebaseAuth().signInWithPhoneNumber(phoneNumber, appVerifier).then(result => {\n                resolve(result);\n              }).catch(error => {\n                resolve({\n                  error\n                });\n              });\n            });\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    });\n\n    _defineProperty(this, \"confirmVerification\", async (confirmationResult, code) => {\n      return new Promise((resolve, reject) => {\n        confirmationResult.confirm(code).then(result => {\n          resolve(result.user);\n        }).catch(function (error) {\n          resolve({\n            error\n          });\n        });\n      });\n    });\n\n    _defineProperty(this, \"getToken\", async User => {\n      try {\n        return User.getIdToken();\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"refreshToken\", async () => {\n      await firebaseAuth().currentUser.getIdToken(true).then(function (idToken) {\n        setFirebaseCookie('id_token', idToken);\n      }).catch(function (error) {});\n    });\n\n    _defineProperty(this, \"logout\", async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          firebaseAuth().signOut().then(() => {\n            resolve(true);\n          });\n        } catch (error) {\n          reject(false);\n        }\n      });\n    });\n\n    _defineProperty(this, \"isAuthenticated\", async () => {\n      return new Promise((resolve, reject) => {\n        const unsubscribe = firebaseAuth().onAuthStateChanged(authUser => {\n          resolve(authUser);\n          unsubscribe();\n        }, error => reject(error));\n      });\n    });\n\n    _defineProperty(this, \"getCurrentUser\", async () => {\n      return firebaseAuth().currentUser;\n    });\n  }\n\n}\n\nexport default new AuthHelper();","map":null,"metadata":{},"sourceType":"module"}