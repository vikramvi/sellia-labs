{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Row } from 'react-styled-flexboxgrid';\nimport LocationSearchInput from '../../../components/InputGooglePlace/altered';\nimport { RangeBoxWrapper, RangeSlider, Holder, Col } from './style';\nimport Switch from 'reusecore/src/elements/Switch';\nimport { SearchContext, initialState } from '../../../contexts/SearchContext';\nimport { setStateToUrl, getUrlToState, clearUrl } from '../../../helpers/urlHandler';\nimport Button from 'reusecore/src/elements/Button';\nimport Text from 'reusecore/src/elements/Text';\nimport Input from '../../../components/Input';\n\nconst FilterElements = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  const urlState = getUrlToState();\n  const {\n    0: filterState,\n    1: setFilterState\n  } = useState(_objectSpread({}, urlState));\n\n  const negotiableSwitchToggle = value => {\n    setFilterState(_objectSpread(_objectSpread({}, filterState), {}, {\n      isNegotiable: value\n    }));\n  };\n\n  const newConditionSwitchToggle = value => {\n    setFilterState(_objectSpread(_objectSpread({}, filterState), {}, {\n      condition: value\n    }));\n  };\n\n  const onRadiusSlidingComplete = value => {\n    setFilterState(_objectSpread(_objectSpread({}, filterState), {}, {\n      radius: value\n    }));\n  };\n\n  const onPriceSlidingComplete = value => {\n    setFilterState(_objectSpread(_objectSpread({}, filterState), {}, {\n      price: value\n    }));\n  };\n\n  const handleAddress = address => {\n    setFilterState(_objectSpread(_objectSpread({}, filterState), {}, {\n      address\n    }));\n  };\n\n  const handleLocation = (location, address) => {\n    setFilterState(_objectSpread(_objectSpread({}, filterState), {}, {\n      address,\n      location_lat: location.lat,\n      location_lng: location.lng,\n      radius: filterState.radius ? filterState.radius : state.radius\n    }));\n  };\n\n  const handleApply = async () => {\n    dispatch({\n      type: 'UPDATE',\n      payload: filterState\n    });\n    setStateToUrl(_objectSpread({}, filterState));\n  };\n\n  const handleClearSearch = async () => {\n    clearUrl();\n    setFilterState(_objectSpread(_objectSpread({}, initialState), {}, {\n      price: [0, 0],\n      radius: 0\n    }));\n    dispatch({\n      type: 'UPDATE',\n      payload: {}\n    }); // setStateToUrl({});\n  };\n\n  const {\n    address,\n    isNegotiable,\n    condition,\n    radius,\n    price,\n    text\n  } = filterState;\n  return __jsx(\"div\", {\n    style: {\n      paddingTop: 20,\n      paddingBottom: 40\n    }\n  }, __jsx(Input, {\n    elementType: \"input\",\n    value: text,\n    label: \"Title\",\n    elementConfig: {\n      type: 'email',\n      required: 'required'\n    },\n    changed: e => {\n      setFilterState(_objectSpread(_objectSpread({}, filterState), {}, {\n        text: e.target.value\n      }));\n    },\n    style: {\n      marginTop: 20\n    }\n  }), __jsx(LocationSearchInput, {\n    address: address,\n    handleAddress: () => {},\n    handleChange: handleAddress,\n    handleLocation: (location, selectedAddress) => handleLocation(location, selectedAddress)\n  }), __jsx(Row, null, __jsx(Col, {\n    md: 6,\n    sm: 12,\n    xs: 12,\n    style: {\n      marginBottom: 20\n    }\n  }, __jsx(Text, {\n    fontSize: 14,\n    color: \"#595959\",\n    mb: 10,\n    content: \"Radius\"\n  }), __jsx(RangeBoxWrapper, null, __jsx(RangeSlider, {\n    min: 20,\n    max: 1000,\n    labelText: \"\",\n    slideDefaultValue: radius,\n    tipFormatter: value => `${value}km`,\n    handleChangefunc: value => onRadiusSlidingComplete(value),\n    onAfterChange: value => onRadiusSlidingComplete(value)\n  }))), __jsx(Col, {\n    md: 6,\n    sm: 12,\n    xs: 12\n  }, __jsx(Text, {\n    fontSize: 14,\n    color: \"#595959\",\n    mb: 10,\n    content: \"Price\"\n  }), __jsx(RangeBoxWrapper, null, __jsx(RangeSlider, {\n    min: 0,\n    max: 1000000,\n    step: 1000,\n    rangeDefaultValue: price,\n    labelText: \"\",\n    handleChangefunc: value => onPriceSlidingComplete(value),\n    onAfterChange: value => onPriceSlidingComplete(value),\n    tipFormatter: value => `$ ${value}`,\n    type: \"range\",\n    dotStyle: {\n      height: 0\n    }\n  })))), __jsx(Row, null, __jsx(Col, {\n    md: 6,\n    sm: 12,\n    xs: 12\n  }, __jsx(Holder, {\n    style: {\n      marginTop: 32\n    }\n  }, __jsx(Text, {\n    fontSize: 14,\n    color: \"#595959\",\n    mr: 30,\n    mb: 0,\n    content: \"Negotiable?\"\n  }), __jsx(Switch, {\n    onChange: value => negotiableSwitchToggle(value),\n    value: isNegotiable,\n    isChecked: isNegotiable,\n    switchSize: \"50px\",\n    switchColor: \"#30C56D\",\n    barColor: \"#30C56D\"\n  }))), __jsx(Col, {\n    md: 6,\n    sm: 12,\n    xs: 12\n  }, __jsx(Holder, {\n    style: {\n      marginTop: 32\n    }\n  }, __jsx(Text, {\n    fontSize: 14,\n    color: \"#595959\",\n    mr: 30,\n    mb: 0,\n    content: \"New Condition?\"\n  }), __jsx(Switch, {\n    onChange: value => newConditionSwitchToggle(value),\n    value: condition,\n    isChecked: condition,\n    switchSize: \"50px\",\n    switchColor: \"#30C56D\",\n    barColor: \"#30C56D\"\n  })))), __jsx(Row, null, __jsx(Col, {\n    mdOffset: 6,\n    md: 6,\n    xs: 12,\n    sm: 12\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: true,\n    className: \"visible-lg\"\n  }, __jsx(Button, {\n    onClick: props.toggleSearchDrawer,\n    title: \"Hide\",\n    bg: \"#e2e2e2\",\n    color: \"#545454\",\n    style: {\n      marginTop: 30,\n      width: '100%'\n    }\n  })), __jsx(Col, {\n    xs: true\n  }, __jsx(Button, {\n    onClick: handleClearSearch,\n    title: \"Clear\",\n    bg: \"#e2e2e2\",\n    color: \"#545454\",\n    style: {\n      marginTop: 30,\n      width: '100%'\n    }\n  })), __jsx(Col, {\n    xs: true\n  }, __jsx(Button, {\n    onClick: handleApply,\n    title: \"Apply\",\n    style: {\n      marginTop: 30,\n      width: '100%'\n    }\n  }))))));\n};\n\nexport default FilterElements;","map":null,"metadata":{},"sourceType":"module"}