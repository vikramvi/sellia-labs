{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/pages/categories.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORIES } from 'core/graphql/Category.query';\nimport { SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport { CategoryGridCard } from '../components/CategoryCard';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CategoryLoader from '../components/Loader/CategoryLoader';\nimport PageMeta from '../components/PageMeta';\nimport Heading from 'reusecore/src/elements/Heading';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(withLayout(() => {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  let QUERY_VARIABLES = {\n    LIMIT: 20\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_CATEGORIES, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 23\n    }\n  });\n  const categoryCount = data && data.categories && data.categories.data ? data.categories.data.length : 1;\n  const categories = data && data.categories && data.categories.data ? data.categories.data : [];\n  const totalCategory = data && data.categories ? data.categories.total : 1;\n\n  const renderCategoryItem = item => {\n    const {\n      slug,\n      image: {\n        url\n      },\n      name,\n      posts\n    } = item;\n    const postNumber = posts ? posts.total : '';\n    return __jsx(Link, {\n      href: `${SINGLE_CATEGORY_PAGE}/[slug]`,\n      as: `${SINGLE_CATEGORY_PAGE}/${slug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, __jsx(CategoryGridCard, {\n      imageSrc: url,\n      title: name,\n      postNumber: `${postNumber} post`,\n      height: \"auto\",\n      mb: \"2rem\",\n      boxShadow: \"1px 3px 15px rgba(0, 0, 0, 0.05)\",\n      border: \"none\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(PageMeta, {\n    title: \"Categories\",\n    description: \"Categories\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), __jsx(Box, {\n    pt: 70,\n    pb: 70,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, __jsx(Heading, {\n    content: \"Categories\",\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), !categories.length && !loading ? __jsx(NoItemFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }) : __jsx(ListGrid, {\n    data: categories,\n    totalPost: totalCategory,\n    postCount: categoryCount,\n    columnWidth: [1, 1 / 2, 1 / 4],\n    component: renderCategoryItem,\n    loading: loading ? loading : loadingMore,\n    placeholder: __jsx(CategoryLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 30\n      }\n    }),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: () => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          if (categoryCount && totalCategory) {\n            if (categoryCount <= totalCategory) {\n              toggleLoading(false);\n              return Object.assign({}, prev, {\n                categories: {\n                  data: [...prev.categories.data, ...fetchMoreResult.categories.data],\n                  total: totalCategory\n                }\n              });\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }))));\n}));","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/pages/categories.js"],"names":["useState","Link","Grid","useQuery","GET_CATEGORIES","SINGLE_CATEGORY_PAGE","withLayout","CategoryGridCard","Box","ListGrid","CategoryLoader","PageMeta","Heading","NoItemFound","OnError","withApollo","loadingMore","toggleLoading","page","paginate","QUERY_VARIABLES","LIMIT","data","loading","error","fetchMore","variables","categoryCount","categories","length","totalCategory","total","renderCategoryItem","item","slug","image","url","name","posts","postNumber","fontSize","fontWeight","color","updateQuery","prev","fetchMoreResult","Object","assign"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORIES } from 'core/graphql/Category.query';\nimport { SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport { CategoryGridCard } from '../components/CategoryCard';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CategoryLoader from '../components/Loader/CategoryLoader';\nimport PageMeta from '../components/PageMeta';\n\nimport Heading from 'reusecore/src/elements/Heading';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(\n  withLayout(() => {\n    const [loadingMore, toggleLoading] = useState(false);\n    const [page, paginate] = useState(1);\n    let QUERY_VARIABLES = {\n      LIMIT: 20,\n    };\n    const { data, loading, error, fetchMore } = useQuery(GET_CATEGORIES, {\n      variables: QUERY_VARIABLES,\n    });\n    if (error) return <OnError />;\n\n    const categoryCount =\n      data && data.categories && data.categories.data\n        ? data.categories.data.length\n        : 1;\n    const categories =\n      data && data.categories && data.categories.data\n        ? data.categories.data\n        : [];\n    const totalCategory = data && data.categories ? data.categories.total : 1;\n    const renderCategoryItem = item => {\n      const {\n        slug,\n        image: { url },\n        name,\n        posts,\n      } = item;\n      const postNumber = posts ? posts.total : '';\n      return (\n        <Link\n          href={`${SINGLE_CATEGORY_PAGE}/[slug]`}\n          as={`${SINGLE_CATEGORY_PAGE}/${slug}`}\n        >\n          <a>\n            <CategoryGridCard\n              imageSrc={url}\n              title={name}\n              postNumber={`${postNumber} post`}\n              height=\"auto\"\n              mb=\"2rem\"\n              boxShadow=\"1px 3px 15px rgba(0, 0, 0, 0.05)\"\n              border=\"none\"\n            />\n          </a>\n        </Link>\n      );\n    };\n\n    return (\n      <>\n        <PageMeta title=\"Categories\" description=\"Categories\" />\n        <Box pt={70} pb={70}>\n          <Grid>\n            <Heading\n              content=\"Categories\"\n              mb={40}\n              style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\n            />\n            {!categories.length && !loading ? (\n              <NoItemFound />\n            ) : (\n              <ListGrid\n                data={categories}\n                totalPost={totalCategory}\n                postCount={categoryCount}\n                columnWidth={[1, 1 / 2, 1 / 4]}\n                component={renderCategoryItem}\n                loading={loading ? loading : loadingMore}\n                placeholder={<CategoryLoader />}\n                limit={QUERY_VARIABLES.LIMIT}\n                handleLoadMore={() => {\n                  toggleLoading(true);\n                  paginate(page + 1);\n                  fetchMore({\n                    variables: {\n                      page: page + 1,\n                    },\n                    updateQuery: (prev, { fetchMoreResult }) => {\n                      if (!fetchMoreResult) {\n                        toggleLoading(false);\n                        return prev;\n                      }\n                      if (categoryCount && totalCategory) {\n                        if (categoryCount <= totalCategory) {\n                          toggleLoading(false);\n                          return Object.assign({}, prev, {\n                            categories: {\n                              data: [\n                                ...prev.categories.data,\n                                ...fetchMoreResult.categories.data,\n                              ],\n                              total: totalCategory,\n                            },\n                          });\n                        }\n                      }\n                    },\n                  });\n                }}\n              />\n            )}\n          </Grid>\n        </Box>\n      </>\n    );\n  })\n);\n"]},"metadata":{},"sourceType":"module"}