{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport { withFormik } from 'formik';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport Input from '../../../components/Input';\nimport MobileNumberList from './MobileNumberList';\nimport { useMutation } from '@apollo/react-hooks';\nimport { GET_VERIFICATION_CODE, VERIFY_CODE, UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport AuthHelper from '../../../helpers/authHelper';\nconst MobileNumbersEnhancer = withFormik({\n  mapPropsToValues: props => {\n    const {\n      author,\n      loading\n    } = props;\n    const mobile = !loading && author && author.mobile && author.mobile.length ? author.mobile : [];\n    const number = '';\n    const code = '';\n    return {\n      mobile,\n      number,\n      code\n    };\n  },\n  handleSubmit: (values, {\n    props,\n    setSubmitting\n  }) => {}\n});\n\nconst Recaptcha = () => {\n  useEffect(() => {\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha');\n    window.recaptchaVerifier.render().then(function (widgetId) {\n      window.recaptchaWidgetId = widgetId;\n    });\n  }, []);\n  return __jsx(\"div\", {\n    id: \"recaptcha\"\n  });\n};\n\nconst AddMobileNumber = ({\n  values,\n  touched,\n  handleChange,\n  handleSubmit,\n  userInfo,\n  showModal,\n  author,\n  setFieldValue,\n  loading\n}) => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    confirmResult: false,\n    isMobileVerified: false,\n    wrongCode: false\n  });\n  const [handleAuthorMutation, {\n    data\n  }] = useMutation(UPDATE_AUTHOR);\n  const {\n    confirmResult,\n    isMobileVerified,\n    wrongCode\n  } = state;\n\n  const HandleStoringMobileNumber = async () => {\n    await AuthHelper.refreshToken();\n    await handleAuthorMutation({\n      variables: {\n        author: _objectSpread({}, author, {\n          mobile: values.mobile\n        })\n      }\n    });\n  };\n\n  const handleRemove = async item => {\n    await AuthHelper.refreshToken();\n    let mobileNumber = values.mobile;\n    const index = mobileNumber.indexOf(item);\n\n    if (index > -1) {\n      mobileNumber.splice(index, 1);\n    }\n\n    setFieldValue('mobile', mobileNumber);\n    await handleAuthorMutation({\n      variables: {\n        author: _objectSpread({}, author, {\n          mobile: values.mobile\n        })\n      }\n    });\n  };\n\n  const handleGetVerificationCode = async () => {\n    const confirmResult = await AuthHelper.login('phone', null, null, values.number);\n    setState(_objectSpread({}, state, {\n      confirmResult\n    }));\n  };\n\n  const handleVerifyCode = async () => {\n    let mobileNumbers = values.mobile;\n\n    try {\n      const isVerified = await AuthHelper.confirmVerification(state.confirmResult, values.code);\n\n      if (!isVerified.error) {\n        setState(_objectSpread({}, state, {\n          isMobileVerified: true\n        }));\n        mobileNumbers.push({\n          number: values.number\n        });\n        setFieldValue('mobile', mobileNumbers);\n      } else {\n        setState(_objectSpread({}, state, {\n          wrongCode: true\n        }));\n      }\n    } catch (error) {\n      console.error(error);\n      setState(_objectSpread({}, state, {\n        wrongCode: true\n      }));\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Mobile Number Settings\",\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600,\n    mb: 30\n  }), values.mobile && __jsx(MobileNumberList, {\n    items: values.mobile,\n    handleRemoveMobile: item => handleRemove(item)\n  }), !confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Enter Number(ex. +30*********)\",\n    changed: handleChange('number'),\n    value: values.number,\n    touched: touched\n  }), __jsx(Recaptcha, null), __jsx(Button, {\n    onClick: handleGetVerificationCode,\n    title: \"Send Verification Code\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 30,\n    width: 1\n  })) : null, !isMobileVerified && confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Verify Code\",\n    changed: handleChange('code'),\n    value: values.code,\n    touched: touched\n  }), __jsx(Button, {\n    onClick: handleVerifyCode,\n    title: \"Verify Code\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1\n  })) : null, isMobileVerified ? __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      color: '#30C56D',\n      textAlign: 'center'\n    }\n  }, \"Your number is verified!\"), __jsx(Button, {\n    onClick: HandleStoringMobileNumber,\n    title: \"Save Mobile Number\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 30,\n    width: 1\n  })) : '', !isMobileVerified && wrongCode ? __jsx(\"p\", {\n    style: {\n      color: '#EF5A5A',\n      textAlign: 'center'\n    }\n  }, \"Invalid code!\") : '');\n};\n\nexport default MobileNumbersEnhancer(AddMobileNumber);","map":null,"metadata":{},"sourceType":"module"}