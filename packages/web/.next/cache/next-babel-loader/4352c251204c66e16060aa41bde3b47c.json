{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { ADD_POST } from 'core/graphql/Mutations';\nimport Text from 'reusecore/src/elements/Text';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Box from 'reusecore/src/elements/Box';\nimport Alert from 'reusecore/src/elements/Alert';\nimport DropArea from '../../../components/DropArea';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport LoadingIndicator from '../../../components/LoadingIndicator';\nlet imagesUrl = [];\n\nconst PickImages = ({\n  userId\n}) => {\n  const {\n    0: uploadLoader,\n    1: ToggleLoader\n  } = useState(false);\n  const {\n    0: uploadRejected,\n    1: setUploadRejected\n  } = useState(false);\n  const {\n    state,\n    dispatch\n  } = useContext(AddPostContext);\n  const {\n    step,\n    adPost\n  } = state;\n  const authorId = userId;\n  const [postMutation, {\n    data\n  }] = useMutation(ADD_POST);\n\n  const onPreviewDrop = async selectedImages => {\n    setUploadRejected(false);\n\n    if (selectedImages.length) {\n      ToggleLoader(true);\n      await AuthHelper.refreshToken();\n      imagesUrl = await uploadMultipleImages(selectedImages);\n\n      if (imagesUrl && imagesUrl.length > 0) {\n        dispatch({\n          type: 'UPDATE_FULL_ADPOST',\n          payload: {\n            gallery: adPost.gallery.concat(imagesUrl[0]),\n            image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n            authorId: authorId,\n            slug: new Date()\n          }\n        });\n      }\n\n      dispatch({\n        type: 'UPDATE_STEP',\n        payload: {\n          step: step + 1\n        }\n      });\n    }\n  };\n\n  const {\n    preImage,\n    preGallery,\n    localImage,\n    localGallery\n  } = adPost,\n        prossedAdPostData = _objectWithoutProperties(adPost, [\"preImage\", \"preGallery\", \"localImage\", \"localGallery\"]);\n\n  useEffect(() => {\n    (async function () {\n      if (imagesUrl.length) {\n        try {\n          const data = await postMutation({\n            variables: {\n              post: prossedAdPostData\n            }\n          });\n          ToggleLoader(false);\n\n          if (!adPost.id) {\n            dispatch({\n              type: 'UPDATE_ADPOST',\n              payload: {\n                key: 'id',\n                value: data.data.addPost.id\n              }\n            });\n          }\n        } catch (error) {\n          ToggleLoader(false);\n        }\n      }\n    })();\n  }, [prossedAdPostData.gallery]);\n\n  const onDropRejected = () => {\n    ToggleLoader(false);\n    setUploadRejected(true);\n  };\n\n  return __jsx(Box, {\n    flexBox: true,\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    style: {\n      minHeight: 'inherit'\n    }\n  }, __jsx(Box, {\n    width: \"305px\"\n  }, __jsx(Heading, {\n    as: \"h1\",\n    content: \"Post Ads\",\n    textAlign: \"center\",\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    }\n  }), uploadLoader && __jsx(LoadingIndicator, null), uploadRejected && __jsx(Alert, {\n    colors: \"error\",\n    mb: 30\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, \"Maximum upload size 1MB\")), __jsx(Dropzone, {\n    onDrop: onPreviewDrop,\n    maxSize: 1024000,\n    onDropRejected: onDropRejected\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => {\n    return __jsx(\"div\", _extends({}, getRootProps(), {\n      style: {\n        outline: 0\n      }\n    }), __jsx(\"input\", getInputProps()), __jsx(DropArea, null));\n  }), __jsx(Text, {\n    content: \"World\\u2019s largest free buy and selling advertising platform .\",\n    textAlign: \"center\",\n    lineHeight: \"22px\",\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  })));\n};\n\nexport default PickImages;","map":null,"metadata":{},"sourceType":"module"}