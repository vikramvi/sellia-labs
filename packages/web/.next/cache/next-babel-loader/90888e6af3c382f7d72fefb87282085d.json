{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useEffect } from 'react';\nimport { Grid, Row, Col } from 'react-styled-flexboxgrid';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Modal } from '@redq/reuse-modal';\nimport { GET_POST_FOR_EDIT } from 'core/graphql/Post.query';\nimport Alert from 'reusecore/src/elements/Alert';\nimport SecretPage from '../../hoc/secretPage';\nimport withLayout from '../../hoc/withLayout';\nimport { adPostSteps, STEPS, AddPostContext, AddPostProvider } from '../../contexts/AddPostContext';\nimport PageMeta from '../../components/PageMeta';\nimport PickImages from '../../containers/AddPost/PickImages';\nimport TitleAndPriceInfo from '../../containers/AddPost/TitleAndPriceInfo';\nimport CategoryAndDetailInfo from '../../containers/AddPost/CategoryAndDetailInfo';\nimport LocationInfo from '../../containers/AddPost/LocationInfo';\nimport ContactNumberInfo from '../../containers/AddPost/ContactNumberInfo';\nimport TopToolBar from '../../containers/AddPost/TopToolBar';\nimport AdImagesInfo from '../../containers/AddPost/AddImage';\nimport Progress from '../../components/Progress';\nimport { withApollo } from '../../helpers/apollo';\nlet counter = 0;\n\nconst AddPost = ({\n  isLoggedIn,\n  userId,\n  email\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(AddPostContext);\n  const {\n    step\n  } = state;\n  const {\n    query: {\n      id\n    }\n  } = useRouter();\n\n  if (id != 'new') {\n    const {\n      data,\n      loading,\n      error\n    } = useQuery(GET_POST_FOR_EDIT, {\n      variables: {\n        id\n      }\n    });\n    useEffect(() => {\n      if (!loading && Object.keys(data).length) {\n        if (counter < 1) {\n          dispatch({\n            type: 'UPDATE_STEP',\n            payload: {\n              step: 1\n            }\n          });\n\n          if (id) {\n            dispatch({\n              type: 'UPDATE_FULL_ADPOST',\n              payload: {\n                id: id\n              }\n            });\n          }\n\n          let location = null;\n\n          if (data.post.formattedLocation && data.post.formattedLocation.lat) {\n            location = {\n              lat: data.post.formattedLocation && data.post.formattedLocation.lat,\n              lng: data.post.formattedLocation && data.post.formattedLocation.lng,\n              formattedAddress: data.post.formattedLocation && data.post.formattedLocation.formattedAddress ? data.post.formattedLocation.formattedAddress : ''\n            };\n          }\n\n          dispatch({\n            type: 'UPDATE_FULL_ADPOST',\n            payload: {\n              title: data.post.title,\n              condition: data.post.condition,\n              price: data.post.price,\n              image: data.post.image,\n              gallery: data.post.gallery,\n              isNegotiable: data.post.isNegotiable,\n              authorId: userId,\n              content: data.post.content,\n              status: data.post.status,\n              slug: data.post.slug,\n              location,\n              categories: data.post.categories,\n              contactNumber: data.post.contactNumber\n            }\n          });\n          counter++;\n        }\n      }\n\n      return () => {\n        null;\n      };\n    }, [data]); // Error Rendering.\n\n    if (error) return __jsx(Alert, null, `Error! ${error.message}`);\n  }\n\n  return __jsx(React.Fragment, null, adPostSteps[step] && adPostSteps[step] === STEPS.STEP_CHOOSE_IMAGES ? __jsx(PickImages, {\n    userId: userId\n  }) : __jsx(Grid, {\n    style: {\n      paddingTop: '80px'\n    }\n  }, __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 12\n  }, __jsx(TopToolBar, {\n    onClose: () => dispatch({\n      type: 'CANCEL_AD_POSTING'\n    })\n  }), __jsx(Progress, {\n    color: \"#30c56d\",\n    progress: 1 / 4 * step,\n    height: 4,\n    style: {\n      marginBottom: '40px'\n    }\n  }))), __jsx(Row, null, __jsx(Col, {\n    xs: 12,\n    sm: 7,\n    md: 7\n  }, __jsx(AdImagesInfo, null)), __jsx(Col, {\n    xs: 12,\n    sm: 5,\n    md: 5,\n    style: {\n      marginBottom: 50\n    }\n  }, adPostSteps[step] && adPostSteps[step] === STEPS.STEP_SET_TITLE_AND_PRICE && __jsx(TitleAndPriceInfo, null), adPostSteps[step] && adPostSteps[step] === STEPS.STEP_SET_LOCATION && __jsx(LocationInfo, null), adPostSteps[step] && adPostSteps[step] === STEPS.STEP_SET_CATEGORY_AND_TAGS && __jsx(CategoryAndDetailInfo, null), adPostSteps[step] && adPostSteps[step] === STEPS.STEP_SET_CONTACT_NUMBER && __jsx(ContactNumberInfo, {\n    userId: userId\n  })))));\n};\n\nfunction AdPostPage(props) {\n  return __jsx(React.Fragment, null, __jsx(PageMeta, {\n    title: \"Add post\",\n    description: \"Add post\"\n  }), __jsx(AddPostProvider, null, __jsx(AddPost, props), __jsx(Modal, null)));\n}\n\nexport default withApollo(SecretPage(withLayout(AdPostPage)));","map":null,"metadata":{},"sourceType":"module"}