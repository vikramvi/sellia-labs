{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport { setUrl } from '../helpers/urlHandler';\nimport { getUrlToState } from '../helpers/urlHandler';\nconst userLocation = process.browser && localStorage.getItem('currentLocation') !== null ? JSON.parse(localStorage.getItem('currentLocation')) : null;\nexport const initialState = {\n  categories: [],\n  text: '',\n  price: 0,\n  isNegotiable: false,\n  condition: false,\n  address: '',\n  location: userLocation ? userLocation : {\n    lat: 40.706877,\n    lng: -74.011265\n  },\n  radius: 0,\n  page: 1,\n  limit: 8,\n  sorting: {\n    field: 'distance',\n    type: 'asc'\n  }\n};\nconst urlState = getUrlToState();\nconst urlInitialState = _Object$keys(urlState).length ? _objectSpread({}, initialState, urlState) : initialState;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'RESET':\n      setUrl(initialState);\n      return urlInitialState;\n\n    case 'UPDATE':\n      return _objectSpread({}, state, action.payload);\n\n    default:\n      return state;\n  }\n}\n\nexport const SearchContext = React.createContext({});\nexport const SearchProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, urlInitialState);\n  return __jsx(SearchContext.Provider, {\n    value: {\n      state,\n      dispatch\n    }\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}