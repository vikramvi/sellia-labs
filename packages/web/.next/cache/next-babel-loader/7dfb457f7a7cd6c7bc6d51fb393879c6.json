{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Box from '../Box';\nimport Button from '../Button';\nimport Loader from '../Loader';\nimport Text from '../Text';\n\nvar LoadMore = function LoadMore(_ref) {\n  var handleLoadMore = _ref.handleLoadMore,\n      showButton = _ref.showButton,\n      buttonText = _ref.buttonText,\n      buttonVariant = _ref.buttonVariant,\n      loaderColor = _ref.loaderColor,\n      isLoading = _ref.isLoading,\n      loadMoreComponent = _ref.loadMoreComponent,\n      loadMoreWrapperStyle = _ref.loadMoreWrapperStyle,\n      loadMoreButtonStyle = _ref.loadMoreButtonStyle;\n  return __jsx(React.Fragment, null, showButton ? __jsx(Box, loadMoreWrapperStyle, loadMoreComponent ? loadMoreComponent : __jsx(Button, _extends({\n    variant: buttonVariant,\n    title: buttonText || 'Load More',\n    isLoading: isLoading,\n    loader: __jsx(Loader, {\n      loaderColor: loaderColor\n    }),\n    onClick: handleLoadMore\n  }, loadMoreButtonStyle))) : null);\n};\n\nvar ListGrid = function ListGrid(_ref2) {\n  var _ref2$data = _ref2.data,\n      data = _ref2$data === void 0 ? [] : _ref2$data,\n      total = _ref2.total,\n      component = _ref2.component,\n      columnWidth = _ref2.columnWidth,\n      postCount = _ref2.postCount,\n      totalPost = _ref2.totalPost,\n      pagination = _ref2.pagination,\n      paginationComponent = _ref2.paginationComponent,\n      handleLoadMore = _ref2.handleLoadMore,\n      loadMoreComponent = _ref2.loadMoreComponent,\n      infinityScroll = _ref2.infinityScroll,\n      placeholder = _ref2.placeholder,\n      loading = _ref2.loading,\n      isLoading = _ref2.isLoading,\n      limit = _ref2.limit,\n      buttonText = _ref2.buttonText,\n      buttonVariant = _ref2.buttonVariant,\n      loaderColor = _ref2.loaderColor,\n      componentWrapperStyle = _ref2.componentWrapperStyle,\n      componentContainerStyle = _ref2.componentContainerStyle,\n      loadMoreWrapperStyle = _ref2.loadMoreWrapperStyle,\n      loadMoreButtonStyle = _ref2.loadMoreButtonStyle,\n      paginationWrapperStyle = _ref2.paginationWrapperStyle,\n      className = _ref2.className;\n  var Limit = limit ? Number(limit) : 1;\n  var limits = [];\n\n  for (var i = 0; i < Limit; i++) {\n    limits.push(i);\n  } // const grabPostNumber = data.length;\n\n\n  var showButton = postCount < totalPost;\n  return __jsx(React.Fragment, null, __jsx(Box, _extends({}, componentWrapperStyle, {\n    className: className\n  }), data.length ? __jsx(React.Fragment, null, data.map(function (item, index) {\n    return __jsx(Box, _extends({\n      width: columnWidth,\n      key: index\n    }, componentContainerStyle, {\n      className: \"singleGridBox\"\n    }), component(item, index));\n  })) : null, loading && __jsx(React.Fragment, null, limits.map(function (index) {\n    return __jsx(Box, _extends({\n      width: columnWidth,\n      key: index\n    }, componentContainerStyle), placeholder ? placeholder : __jsx(Text, {\n      content: \"Loading ...\"\n    }));\n  }))), postCount < totalPost && __jsx(LoadMore, {\n    showButton: showButton,\n    handleLoadMore: handleLoadMore,\n    isLoading: isLoading,\n    buttonText: buttonText,\n    buttonVariant: buttonVariant,\n    loaderColor: loaderColor,\n    loadMoreComponent: loadMoreComponent,\n    loadMoreButtonStyle: loadMoreButtonStyle,\n    loadMoreWrapperStyle: loadMoreWrapperStyle\n  }), paginationComponent && __jsx(Box, paginationWrapperStyle, paginationComponent));\n};\n\nListGrid.defaultProps = {\n  componentWrapperStyle: {\n    flexBox: true,\n    flexWrap: 'wrap',\n    mr: '-1rem',\n    ml: '-1rem'\n  },\n  componentContainerStyle: {\n    pr: '1rem',\n    pl: '1rem'\n  },\n  loadMoreWrapperStyle: {\n    flexBox: true,\n    justifyContent: 'center',\n    mt: '1rem'\n  }\n};\nexport default ListGrid;","map":null,"metadata":{},"sourceType":"module"}