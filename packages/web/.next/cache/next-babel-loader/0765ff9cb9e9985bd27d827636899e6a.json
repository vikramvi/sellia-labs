{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/node_modules/reusecore/src/elements/ListGrid/index.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '../Box';\nimport Button from '../Button';\nimport Loader from '../Loader';\nimport Text from '../Text';\n\nvar LoadMore = function LoadMore(_ref) {\n  var handleLoadMore = _ref.handleLoadMore,\n      showButton = _ref.showButton,\n      buttonText = _ref.buttonText,\n      buttonVariant = _ref.buttonVariant,\n      loaderColor = _ref.loaderColor,\n      isLoading = _ref.isLoading,\n      loadMoreComponent = _ref.loadMoreComponent,\n      loadMoreWrapperStyle = _ref.loadMoreWrapperStyle,\n      loadMoreButtonStyle = _ref.loadMoreButtonStyle;\n  return __jsx(React.Fragment, null, showButton ? __jsx(Box, _extends({}, loadMoreWrapperStyle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }), loadMoreComponent ? loadMoreComponent : __jsx(Button, _extends({\n    variant: buttonVariant,\n    title: buttonText || 'Load More',\n    isLoading: isLoading,\n    loader: __jsx(Loader, {\n      loaderColor: loaderColor,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 23\n      }\n    }),\n    onClick: handleLoadMore\n  }, loadMoreButtonStyle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }))) : null);\n};\n\n_c = LoadMore;\n\nvar ListGrid = function ListGrid(_ref2) {\n  var _ref2$data = _ref2.data,\n      data = _ref2$data === void 0 ? [] : _ref2$data,\n      total = _ref2.total,\n      component = _ref2.component,\n      columnWidth = _ref2.columnWidth,\n      postCount = _ref2.postCount,\n      totalPost = _ref2.totalPost,\n      pagination = _ref2.pagination,\n      paginationComponent = _ref2.paginationComponent,\n      handleLoadMore = _ref2.handleLoadMore,\n      loadMoreComponent = _ref2.loadMoreComponent,\n      infinityScroll = _ref2.infinityScroll,\n      placeholder = _ref2.placeholder,\n      loading = _ref2.loading,\n      isLoading = _ref2.isLoading,\n      limit = _ref2.limit,\n      buttonText = _ref2.buttonText,\n      buttonVariant = _ref2.buttonVariant,\n      loaderColor = _ref2.loaderColor,\n      componentWrapperStyle = _ref2.componentWrapperStyle,\n      componentContainerStyle = _ref2.componentContainerStyle,\n      loadMoreWrapperStyle = _ref2.loadMoreWrapperStyle,\n      loadMoreButtonStyle = _ref2.loadMoreButtonStyle,\n      paginationWrapperStyle = _ref2.paginationWrapperStyle,\n      className = _ref2.className;\n  var Limit = limit ? Number(limit) : 1;\n  var limits = [];\n\n  for (var i = 0; i < Limit; i++) {\n    limits.push(i);\n  } // const grabPostNumber = data.length;\n\n\n  var showButton = postCount < totalPost;\n  return __jsx(React.Fragment, null, __jsx(Box, _extends({}, componentWrapperStyle, {\n    className: className,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), data.length ? __jsx(React.Fragment, null, data.map(function (item, index) {\n    return __jsx(Box, _extends({\n      width: columnWidth,\n      key: index\n    }, componentContainerStyle, {\n      className: \"singleGridBox\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }), component(item, index));\n  })) : null, loading && __jsx(React.Fragment, null, limits.map(function (index) {\n    return __jsx(Box, _extends({\n      width: columnWidth,\n      key: index\n    }, componentContainerStyle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }), placeholder ? placeholder : __jsx(Text, {\n      content: \"Loading ...\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 46\n      }\n    }));\n  }))), postCount < totalPost && __jsx(LoadMore, {\n    showButton: showButton,\n    handleLoadMore: handleLoadMore,\n    isLoading: isLoading,\n    buttonText: buttonText,\n    buttonVariant: buttonVariant,\n    loaderColor: loaderColor,\n    loadMoreComponent: loadMoreComponent,\n    loadMoreButtonStyle: loadMoreButtonStyle,\n    loadMoreWrapperStyle: loadMoreWrapperStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), paginationComponent && __jsx(Box, _extends({}, paginationWrapperStyle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), paginationComponent));\n};\n\n_c2 = ListGrid;\nListGrid.propTypes = {\n  data: PropTypes.array.isRequired,\n  totalPost: PropTypes.number,\n  component: PropTypes.func.isRequired,\n  columnWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),\n  pagination: PropTypes.bool,\n  paginationComponent: PropTypes.element,\n  handleLoadMore: PropTypes.func,\n  loadMoreComponent: PropTypes.element,\n  infinityScroll: PropTypes.bool,\n  placeholder: PropTypes.element,\n  loading: PropTypes.bool,\n  limit: PropTypes.number,\n  buttonText: PropTypes.string,\n  listWrapperStyle: PropTypes.object,\n  componentWrapperStyle: PropTypes.object,\n  componentContainerStyle: PropTypes.object,\n  loadMoreWrapperStyle: PropTypes.object,\n  loadMoreStyle: PropTypes.object,\n  paginationWrapperStyle: PropTypes.object\n};\nListGrid.defaultProps = {\n  componentWrapperStyle: {\n    flexBox: true,\n    flexWrap: 'wrap',\n    mr: '-1rem',\n    ml: '-1rem'\n  },\n  componentContainerStyle: {\n    pr: '1rem',\n    pl: '1rem'\n  },\n  loadMoreWrapperStyle: {\n    flexBox: true,\n    justifyContent: 'center',\n    mt: '1rem'\n  }\n};\nexport default ListGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoadMore\");\n$RefreshReg$(_c2, \"ListGrid\");","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/node_modules/reusecore/src/elements/ListGrid/index.js"],"names":["React","PropTypes","Box","Button","Loader","Text","LoadMore","handleLoadMore","showButton","buttonText","buttonVariant","loaderColor","isLoading","loadMoreComponent","loadMoreWrapperStyle","loadMoreButtonStyle","ListGrid","data","total","component","columnWidth","postCount","totalPost","pagination","paginationComponent","infinityScroll","placeholder","loading","limit","componentWrapperStyle","componentContainerStyle","paginationWrapperStyle","className","Limit","Number","limits","i","push","length","map","item","index","propTypes","array","isRequired","number","func","oneOfType","string","bool","element","listWrapperStyle","object","loadMoreStyle","defaultProps","flexBox","flexWrap","mr","ml","pr","pl","justifyContent","mt"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '../Box';\nimport Button from '../Button';\nimport Loader from '../Loader';\nimport Text from '../Text';\n\nconst LoadMore = ({\n  handleLoadMore,\n  showButton,\n  buttonText,\n  buttonVariant,\n  loaderColor,\n  isLoading,\n  loadMoreComponent,\n  loadMoreWrapperStyle,\n  loadMoreButtonStyle\n}) => {\n  return (\n    <>\n      {showButton ? (\n        <Box {...loadMoreWrapperStyle}>\n          {loadMoreComponent ? (\n            loadMoreComponent\n          ) : (\n            <Button\n              variant={buttonVariant}\n              title={buttonText || 'Load More'}\n              isLoading={isLoading}\n              loader={<Loader loaderColor={loaderColor} />}\n              onClick={handleLoadMore}\n              {...loadMoreButtonStyle}\n            />\n          )}\n        </Box>\n      ) : null}\n    </>\n  );\n};\n\nconst ListGrid = ({\n  data = [],\n  total,\n  component,\n  columnWidth,\n  postCount,\n  totalPost,\n  pagination,\n  paginationComponent,\n  handleLoadMore,\n  loadMoreComponent,\n  infinityScroll,\n  placeholder,\n  loading,\n  isLoading,\n  limit,\n  buttonText,\n  buttonVariant,\n  loaderColor,\n  componentWrapperStyle,\n  componentContainerStyle,\n  loadMoreWrapperStyle,\n  loadMoreButtonStyle,\n  paginationWrapperStyle,\n  className\n}) => {\n  const Limit = limit ? Number(limit) : 1;\n  const limits = [];\n  for (let i = 0; i < Limit; i++) {\n    limits.push(i);\n  }\n  // const grabPostNumber = data.length;\n  let showButton = postCount < totalPost;\n\n  return (\n    <>\n      <Box {...componentWrapperStyle} className={className}>\n        {data.length ? (\n          <>\n            {data.map((item, index) => (\n              <Box\n                width={columnWidth}\n                key={index}\n                {...componentContainerStyle}\n                className=\"singleGridBox\"\n              >\n                {component(item, index)}\n              </Box>\n            ))}\n          </>\n        ) : null}\n        {loading && (\n          <>\n            {limits.map(index => (\n              <Box width={columnWidth} key={index} {...componentContainerStyle}>\n                {placeholder ? placeholder : <Text content=\"Loading ...\" />}\n              </Box>\n            ))}\n          </>\n        )}\n      </Box>\n      {postCount < totalPost && (\n        <LoadMore\n          showButton={showButton}\n          handleLoadMore={handleLoadMore}\n          isLoading={isLoading}\n          buttonText={buttonText}\n          buttonVariant={buttonVariant}\n          loaderColor={loaderColor}\n          loadMoreComponent={loadMoreComponent}\n          loadMoreButtonStyle={loadMoreButtonStyle}\n          loadMoreWrapperStyle={loadMoreWrapperStyle}\n        />\n      )}\n      {paginationComponent && (\n        <Box {...paginationWrapperStyle}>{paginationComponent}</Box>\n      )}\n    </>\n  );\n};\n\nListGrid.propTypes = {\n  data: PropTypes.array.isRequired,\n  totalPost: PropTypes.number,\n  component: PropTypes.func.isRequired,\n  columnWidth: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  pagination: PropTypes.bool,\n  paginationComponent: PropTypes.element,\n  handleLoadMore: PropTypes.func,\n  loadMoreComponent: PropTypes.element,\n  infinityScroll: PropTypes.bool,\n  placeholder: PropTypes.element,\n  loading: PropTypes.bool,\n  limit: PropTypes.number,\n  buttonText: PropTypes.string,\n  listWrapperStyle: PropTypes.object,\n  componentWrapperStyle: PropTypes.object,\n  componentContainerStyle: PropTypes.object,\n  loadMoreWrapperStyle: PropTypes.object,\n  loadMoreStyle: PropTypes.object,\n  paginationWrapperStyle: PropTypes.object\n};\n\nListGrid.defaultProps = {\n  componentWrapperStyle: {\n    flexBox: true,\n    flexWrap: 'wrap',\n    mr: '-1rem',\n    ml: '-1rem'\n  },\n  componentContainerStyle: {\n    pr: '1rem',\n    pl: '1rem'\n  },\n  loadMoreWrapperStyle: {\n    flexBox: true,\n    justifyContent: 'center',\n    mt: '1rem'\n  }\n};\n\nexport default ListGrid;\n"]},"metadata":{},"sourceType":"module"}