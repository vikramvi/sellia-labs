{"ast":null,"code":"const pad = (num, totalChars) => {\n  let pad = '0';\n  num = num + '';\n\n  while (num.length < totalChars) {\n    num = pad + num;\n  }\n\n  return num;\n}; // Ratio is between 0 and 1\n\n\nconst changeColor = (color, ratio, darker) => {\n  // Trim trailing/leading whitespace\n  color = color.replace(/^\\s*|\\s*$/, ''); // Expand three-digit hex\n\n  color = color.replace(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i, '#$1$1$2$2$3$3'); // Calculate ratio\n\n  const difference = Math.round(ratio * 256) * (darker ? -1 : 1),\n        // Determine if input is RGB(A)\n  rgb = color.match(new RegExp('^rgba?\\\\(\\\\s*' + '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' + '\\\\s*,\\\\s*' + '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' + '\\\\s*,\\\\s*' + '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' + '(?:\\\\s*,\\\\s*' + '(0|1|0?\\\\.\\\\d+))?' + '\\\\s*\\\\)$', 'i')),\n        alpha = !!rgb && rgb[4] != null ? rgb[4] : null,\n        // Convert hex to decimal\n  decimal = !!rgb ? [rgb[1], rgb[2], rgb[3]] : color.replace(/^#?([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])/i, function () {\n    return parseInt(arguments[1], 16) + ',' + parseInt(arguments[2], 16) + ',' + parseInt(arguments[3], 16);\n  }).split(/,/); // Return RGB(A)\n\n  return !!rgb ? 'rgb' + (alpha !== null ? 'a' : '') + '(' + Math[darker ? 'max' : 'min'](parseInt(decimal[0], 10) + difference, darker ? 0 : 255) + ', ' + Math[darker ? 'max' : 'min'](parseInt(decimal[1], 10) + difference, darker ? 0 : 255) + ', ' + Math[darker ? 'max' : 'min'](parseInt(decimal[2], 10) + difference, darker ? 0 : 255) + (alpha !== null ? ', ' + alpha : '') + ')' : // Return hex\n  ['#', pad(Math[darker ? 'max' : 'min'](parseInt(decimal[0], 10) + difference, darker ? 0 : 255).toString(16), 2), pad(Math[darker ? 'max' : 'min'](parseInt(decimal[1], 10) + difference, darker ? 0 : 255).toString(16), 2), pad(Math[darker ? 'max' : 'min'](parseInt(decimal[2], 10) + difference, darker ? 0 : 255).toString(16), 2)].join('');\n};\n\nconst lightenColor = (color, ratio) => {\n  return changeColor(color, ratio, false);\n};\n\nconst darkenColor = (color, ratio) => {\n  return changeColor(color, ratio, true);\n};\n\nexport { lightenColor, darkenColor };","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/node_modules/reusecore/src/theme/lightenDarken.js"],"names":["pad","num","totalChars","length","changeColor","color","ratio","darker","replace","difference","Math","round","rgb","match","RegExp","alpha","decimal","parseInt","arguments","split","toString","join","lightenColor","darkenColor"],"mappings":"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","sourcesContent":["const pad = (num, totalChars) => {\n  let pad = '0';\n  num = num + '';\n  while (num.length < totalChars) {\n    num = pad + num;\n  }\n  return num;\n};\n\n// Ratio is between 0 and 1\nconst changeColor = (color, ratio, darker) => {\n  // Trim trailing/leading whitespace\n  color = color.replace(/^\\s*|\\s*$/, '');\n\n  // Expand three-digit hex\n  color = color.replace(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i, '#$1$1$2$2$3$3');\n\n  // Calculate ratio\n  const difference = Math.round(ratio * 256) * (darker ? -1 : 1),\n    // Determine if input is RGB(A)\n    rgb = color.match(\n      new RegExp(\n        '^rgba?\\\\(\\\\s*' +\n          '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' +\n          '\\\\s*,\\\\s*' +\n          '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' +\n          '\\\\s*,\\\\s*' +\n          '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' +\n          '(?:\\\\s*,\\\\s*' +\n          '(0|1|0?\\\\.\\\\d+))?' +\n          '\\\\s*\\\\)$',\n        'i'\n      )\n    ),\n    alpha = !!rgb && rgb[4] != null ? rgb[4] : null,\n    // Convert hex to decimal\n    decimal = !!rgb\n      ? [rgb[1], rgb[2], rgb[3]]\n      : color\n          .replace(\n            /^#?([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])/i,\n            function() {\n              return (\n                parseInt(arguments[1], 16) +\n                ',' +\n                parseInt(arguments[2], 16) +\n                ',' +\n                parseInt(arguments[3], 16)\n              );\n            }\n          )\n          .split(/,/);\n\n  // Return RGB(A)\n  return !!rgb\n    ? 'rgb' +\n        (alpha !== null ? 'a' : '') +\n        '(' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[0], 10) + difference,\n          darker ? 0 : 255\n        ) +\n        ', ' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[1], 10) + difference,\n          darker ? 0 : 255\n        ) +\n        ', ' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[2], 10) + difference,\n          darker ? 0 : 255\n        ) +\n        (alpha !== null ? ', ' + alpha : '') +\n        ')'\n    : // Return hex\n      [\n        '#',\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[0], 10) + difference,\n            darker ? 0 : 255\n          ).toString(16),\n          2\n        ),\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[1], 10) + difference,\n            darker ? 0 : 255\n          ).toString(16),\n          2\n        ),\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[2], 10) + difference,\n            darker ? 0 : 255\n          ).toString(16),\n          2\n        )\n      ].join('');\n};\nconst lightenColor = (color, ratio) => {\n  return changeColor(color, ratio, false);\n};\nconst darkenColor = (color, ratio) => {\n  return changeColor(color, ratio, true);\n};\n\nexport { lightenColor, darkenColor };\n"]},"metadata":{},"sourceType":"module"}