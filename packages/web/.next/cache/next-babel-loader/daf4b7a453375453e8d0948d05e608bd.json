{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/node_modules/reusecore/src/elements/Alert/index.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport AlertStyle from './alert.style';\n\nvar Alert = function Alert(_ref) {\n  var className = _ref.className,\n      isMaterial = _ref.isMaterial,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"className\", \"isMaterial\", \"children\"]);\n\n  // Add all classs to an array\n  var addAllClasses = ['reusecore__alert']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  return __jsx(AlertStyle, _extends({\n    className: addAllClasses.join(' ')\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }), children);\n};\n\n_c = Alert;\nAlert.propTypes = {\n  /** ClassName of the Alert */\n  className: PropTypes.string,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** Used to render icon, button, text or any elements inside the Alert.\n   * This can be a string or any component. */\n  children: PropTypes.element\n};\nAlert.defaultProps = {};\nexport default Alert;\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/node_modules/reusecore/src/elements/Alert/index.js"],"names":["React","PropTypes","AlertStyle","Alert","className","isMaterial","children","props","addAllClasses","push","join","propTypes","string","bool","element","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAmD;AAAA,MAAhDC,SAAgD,QAAhDA,SAAgD;AAAA,MAArCC,UAAqC,QAArCA,UAAqC;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAZC,KAAY;;AAC/D;AACA,MAAMC,aAAa,GAAG,CAAC,kBAAD,CAAtB,CAF+D,CAI/D;;AACA,MAAIJ,SAAJ,EAAe;AACbI,IAAAA,aAAa,CAACC,IAAd,CAAmBL,SAAnB;AACD,GAP8D,CAS/D;;;AACA,MAAIC,UAAJ,EAAgB;AACdG,IAAAA,aAAa,CAACC,IAAd,CAAmB,aAAnB;AACD;;AAED,SACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAED,aAAa,CAACE,IAAd,CAAmB,GAAnB;AAAvB,KAAoDH,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,QADH,CADF;AAKD,CAnBD;;KAAMH,K;AAqBNA,KAAK,CAACQ,SAAN,GAAkB;AAChB;AACAP,EAAAA,SAAS,EAAEH,SAAS,CAACW,MAFL;;AAIhB;AACAP,EAAAA,UAAU,EAAEJ,SAAS,CAACY,IALN;;AAOhB;AACF;AACEP,EAAAA,QAAQ,EAAEL,SAAS,CAACa;AATJ,CAAlB;AAYAX,KAAK,CAACY,YAAN,GAAqB,EAArB;AAEA,eAAeZ,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport AlertStyle from './alert.style';\n\nconst Alert = ({ className, isMaterial, children, ...props }) => {\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__alert'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // isMaterial prop checking\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  return (\n    <AlertStyle className={addAllClasses.join(' ')} {...props}>\n      {children}\n    </AlertStyle>\n  );\n};\n\nAlert.propTypes = {\n  /** ClassName of the Alert */\n  className: PropTypes.string,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** Used to render icon, button, text or any elements inside the Alert.\n   * This can be a string or any component. */\n  children: PropTypes.element\n};\n\nAlert.defaultProps = {};\n\nexport default Alert;\n"]},"metadata":{},"sourceType":"module"}