{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/bhavikshah/Work/headless-graphql/packages/web/helpers/apollo.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getFirebaseCookie } from './session';\nimport { GRAPHQL_URL } from '../Config';\nimport PropTypes from 'prop-types'; // import cookie from 'cookie';\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = useMemo(function () {\n      // We pass in the apolloClient directly when using getDataFromTree\n      if (apolloClient) {\n        return apolloClient;\n      } // Otherwise initClient using apolloState\n\n\n      return initApolloClient(apolloState, {\n        getToken: _getToken\n      });\n    }, []);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })));\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component'; // Warn if old way of installing apollo is used\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\"); // Add some prop types\n\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object\n    };\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _ref4, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree; // Run all GraphQL queries in the component tree\n                // and extract the resulting data\n\n                apolloClient = ctx.apolloClient = initApolloClient({}, {\n                  getToken: function getToken() {\n                    return _getToken(ctx);\n                  }\n                });\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 5;\n                return PageComponent.getInitialProps(ctx);\n\n              case 5:\n                _context.t0 = _context.sent;\n                _context.next = 9;\n                break;\n\n              case 8:\n                _context.t0 = {};\n\n              case 9:\n                pageProps = _context.t0;\n\n                if (!false) {\n                  _context.next = 27;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {});\n\n              case 13:\n                if (!ssr) {\n                  _context.next = 26;\n                  break;\n                }\n\n                _context.prev = 14;\n                _context.next = 17;\n                return import('@apollo/react-ssr');\n\n              case 17:\n                _ref4 = _context.sent;\n                getDataFromTree = _ref4.getDataFromTree;\n                _context.next = 21;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  }),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 91\n                  },\n                  __self: this\n                }));\n\n              case 21:\n                _context.next = 26;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t1 = _context[\"catch\"](14);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t1);\n\n              case 26:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 27:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  apolloState: apolloState\n                }));\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[14, 23]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient() {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient.apply(void 0, arguments);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient.apply(void 0, arguments);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref5 = arguments.length > 1 ? arguments[1] : undefined,\n      getToken = _ref5.getToken;\n\n  var fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n\n  if (false) {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require('https-proxy-agent'))(process.env.https_proxy);\n    }\n  }\n\n  var httpLink = new HttpLink({\n    uri: GRAPHQL_URL,\n    // Server URL (must be absolute)\n    credentials: 'same-origin',\n    fetch: fetch,\n    fetchOptions: fetchOptions\n  });\n  var authLink = setContext(function (request, _ref6) {\n    var headers = _ref6.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? token : ''\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      dataIdFromObject: function dataIdFromObject(object) {\n        return object.id || null;\n      },\n      addTypename: false\n    }).restore(initialState)\n  });\n}\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\n\n\nfunction _getToken(ctx) {\n  // const cookies = cookie.parse(req ? req.headers.cookie || '' : document.cookie)\n  var token = getFirebaseCookie('id_token', ctx);\n  return token;\n}","map":{"version":3,"sources":["/Users/bhavikshah/Work/headless-graphql/packages/web/helpers/apollo.js"],"names":["React","useMemo","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","setContext","fetch","getFirebaseCookie","GRAPHQL_URL","PropTypes","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","getToken","process","env","NODE_ENV","displayName","name","console","warn","propTypes","object","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","createApolloClient","initialState","fetchOptions","https_proxy","agent","require","httpLink","uri","credentials","authLink","request","headers","token","authorization","ssrMode","link","concat","dataIdFromObject","id","addTypename","restore"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getFirebaseCookie } from './session';\nimport { GRAPHQL_URL } from '../Config';\nimport PropTypes from 'prop-types';\n// import cookie from 'cookie';\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = useMemo(() => {\n      // We pass in the apolloClient directly when using getDataFromTree\n      if (apolloClient) {\n        return apolloClient;\n      }\n\n      // Otherwise initClient using apolloState\n      return initApolloClient(apolloState, { getToken });\n    }, []);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component';\n\n    // Warn if old way of installing apollo is used\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n\n    // Add some prop types\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object,\n    };\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.apolloClient = initApolloClient(\n        {},\n        {\n          getToken: () => getToken(ctx),\n        }\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(...args) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(...args);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(...args);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, { getToken }) {\n  const fetchOptions = {};\n\n  // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n  if (typeof window === 'undefined') {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require('https-proxy-agent'))(\n        process.env.https_proxy\n      );\n    }\n  }\n\n  const httpLink = new HttpLink({\n    uri: GRAPHQL_URL, // Server URL (must be absolute)\n    credentials: 'same-origin',\n    fetch,\n    fetchOptions,\n  });\n\n  const authLink = setContext((request, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? token : '',\n      },\n    };\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object.id || null,\n      addTypename: false,\n    }).restore(initialState),\n  });\n}\n\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\nfunction getToken(ctx) {\n  // const cookies = cookie.parse(req ? req.headers.cookie || '' : document.cookie)\n  const token = getFirebaseCookie('id_token', ctx);\n  return token;\n}\n"]},"metadata":{},"sourceType":"module"}