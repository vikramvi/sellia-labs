{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect, useState } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { ADD_POST } from 'core/graphql/Mutations';\nimport Text from 'reusecore/src/elements/Text';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Box from 'reusecore/src/elements/Box';\nimport Alert from 'reusecore/src/elements/Alert';\nimport DropArea from '../../../components/DropArea';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport LoadingIndicator from '../../../components/LoadingIndicator';\nvar imagesUrl = [];\n\nvar PickImages = function PickImages(_ref) {\n  var userId = _ref.userId;\n\n  var _useState = useState(false),\n      uploadLoader = _useState[0],\n      ToggleLoader = _useState[1];\n\n  var _useState2 = useState(false),\n      uploadRejected = _useState2[0],\n      setUploadRejected = _useState2[1];\n\n  var _useContext = useContext(AddPostContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var step = state.step,\n      adPost = state.adPost;\n  var authorId = userId;\n\n  var _useMutation = useMutation(ADD_POST),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      postMutation = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  var onPreviewDrop = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(selectedImages) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setUploadRejected(false);\n\n              if (!selectedImages.length) {\n                _context.next = 10;\n                break;\n              }\n\n              ToggleLoader(true);\n              _context.next = 5;\n              return AuthHelper.refreshToken();\n\n            case 5:\n              _context.next = 7;\n              return uploadMultipleImages(selectedImages);\n\n            case 7:\n              imagesUrl = _context.sent;\n\n              if (imagesUrl && imagesUrl.length > 0) {\n                dispatch({\n                  type: 'UPDATE_FULL_ADPOST',\n                  payload: {\n                    gallery: adPost.gallery.concat(imagesUrl[0]),\n                    image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n                    authorId: authorId,\n                    slug: new Date()\n                  }\n                });\n              }\n\n              dispatch({\n                type: 'UPDATE_STEP',\n                payload: {\n                  step: step + 1\n                }\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onPreviewDrop(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var preImage = adPost.preImage,\n      preGallery = adPost.preGallery,\n      localImage = adPost.localImage,\n      localGallery = adPost.localGallery,\n      prossedAdPostData = _objectWithoutProperties(adPost, [\"preImage\", \"preGallery\", \"localImage\", \"localGallery\"]);\n\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!imagesUrl.length) {\n                _context2.next = 12;\n                break;\n              }\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return postMutation({\n                variables: {\n                  post: prossedAdPostData\n                }\n              });\n\n            case 4:\n              _data = _context2.sent;\n              ToggleLoader(false);\n\n              if (!adPost.id) {\n                dispatch({\n                  type: 'UPDATE_ADPOST',\n                  payload: {\n                    key: 'id',\n                    value: _data.data.addPost.id\n                  }\n                });\n              }\n\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              ToggleLoader(false);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }))();\n  }, [prossedAdPostData.gallery]);\n\n  var onDropRejected = function onDropRejected() {\n    ToggleLoader(false);\n    setUploadRejected(true);\n  };\n\n  return __jsx(Box, {\n    flexBox: true,\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    style: {\n      minHeight: 'inherit'\n    }\n  }, __jsx(Box, {\n    width: \"305px\"\n  }, __jsx(Heading, {\n    as: \"h1\",\n    content: \"Post Ads\",\n    textAlign: \"center\",\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    }\n  }), uploadLoader && __jsx(LoadingIndicator, null), uploadRejected && __jsx(Alert, {\n    colors: \"error\",\n    mb: 30\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, \"Maximum upload size 1MB\")), __jsx(Dropzone, {\n    onDrop: onPreviewDrop,\n    maxSize: 1024000,\n    onDropRejected: onDropRejected\n  }, function (_ref4) {\n    var getRootProps = _ref4.getRootProps,\n        getInputProps = _ref4.getInputProps;\n    return __jsx(\"div\", _extends({}, getRootProps(), {\n      style: {\n        outline: 0\n      }\n    }), __jsx(\"input\", getInputProps()), __jsx(DropArea, null));\n  }), __jsx(Text, {\n    content: \"World\\u2019s largest free buy and selling advertising platform .\",\n    textAlign: \"center\",\n    lineHeight: \"22px\",\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  })));\n};\n\nexport default PickImages;","map":null,"metadata":{},"sourceType":"module"}