{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORY_POST } from 'core/graphql/CategoryPost.query';\nimport { CURRENCY } from '../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../../hoc/withLayout';\nimport Box from 'reusecore/src/elements/Box';\nimport Heading from 'reusecore/src/elements/Heading';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../../components/Loader/CardLoader';\nimport PostCard from '../../components/PostCard';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\nimport PageMeta from '../../components/PageMeta';\nimport { withApollo } from '../../helpers/apollo';\n\nconst SingleCategory = ({\n  data,\n  loading,\n  fetchMore,\n  limit\n}) => {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  const fetchedCategoryPost = data && data.category ? data.category.posts.data : [];\n  const postCount = fetchedCategoryPost.length;\n  const totalPost = data && data.category ? data.category.posts.total : null;\n  const categoryName = data && data.category ? data.category.name : null;\n\n  const renderCategoryPost = item => {\n    const {\n      title,\n      price = `0.00`,\n      slug,\n      image: {\n        url,\n        largeUrl\n      }\n    } = item;\n    return __jsx(Link, {\n      href: `${SINGLE_POST_PAGE}/[slug]`,\n      as: `${SINGLE_POST_PAGE}/${slug}`\n    }, __jsx(\"a\", null, __jsx(PostCard, {\n      currency: CURRENCY,\n      title: title,\n      price: price,\n      imageSrc: [url, largeUrl]\n    })));\n  };\n\n  return __jsx(Box, {\n    mt: 50,\n    mb: 50\n  }, __jsx(Grid, null, __jsx(Heading, {\n    content: categoryName,\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    }\n  }), !fetchedCategoryPost ? __jsx(NoItemFound, null) : __jsx(ListGrid, {\n    data: fetchedCategoryPost,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1, 1 / 2, 1 / 4],\n    component: renderCategoryPost,\n    loading: loading ? loading : loadingMore,\n    isLoading: loadingMore,\n    placeholder: __jsx(CardLoader, null),\n    limit: limit,\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          const oldPosts = prev.category.posts.data;\n          const newPosts = fetchMoreResult.category.posts.data;\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              const concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.category.posts.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    }\n  })));\n};\n\nexport default withApollo(withLayout(() => {\n  const {\n    query: {\n      slug\n    }\n  } = useRouter();\n  let QUERY_VARIABLES = {\n    SLUG: slug,\n    LIMIT: 20\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_CATEGORY_POST, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return __jsx(OnError, null);\n  const {\n    name\n  } = data && data.category ? data.category : '';\n  return __jsx(Fragment, null, __jsx(PageMeta, {\n    title: name,\n    description: \"Product categories\"\n  }), __jsx(SingleCategory, {\n    data: data,\n    loading: loading,\n    fetchMore: fetchMore,\n    limit: QUERY_VARIABLES.LIMIT\n  }));\n}));","map":null,"metadata":{},"sourceType":"module"}