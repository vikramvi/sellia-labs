{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport Tag, { TagGroup, LabelTag } from '../../../components/TagGroup';\nimport { openModal } from '@redq/reuse-modal';\nimport ShareModal from '../../ModalContainer/ShareModal';\nimport LoginModal from '../../ModalContainer/LoginModal';\nimport ContactInfoModal from '../../ModalContainer/ContactInfoModal';\nimport { CURRENCY } from '../../../Config';\nimport { useMutation } from '@apollo/react-hooks';\nimport { HANDLE_FAV } from 'core/graphql/Mutations';\nimport AuthHelper from '../../../helpers/authHelper';\nimport AddressBox from '../../../components/AddressBox';\nimport Text from 'reusecore/src/elements/Text';\nimport Icon from '../../../components/Icon';\nimport Button from 'reusecore/src/elements/Button';\nimport InfoBox from '../../../components/UserInfoBox';\nimport ReadMore from '../../../components/Truncate';\nimport { ADD_POST, SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\nimport { DescriptionBlock, AlignCenterWrapper, InfoBoxWrapper, ButtonWrapper } from './description.style';\n\nvar timeFormatAMPM = function timeFormatAMPM(date) {\n  return date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n};\n\nvar Description = function Description(_ref) {\n  var postData = _ref.postData,\n      isLoggedIn = _ref.isLoggedIn,\n      userId = _ref.userId;\n  var userFavList = [];\n  var userNewFavList = [];\n  var publishTime = '';\n\n  var _useState = useState(false),\n      btnLoading = _useState[0],\n      setBtnLoading = _useState[1];\n\n  var favouritedBy = postData && postData.favouritedBy ? postData.favouritedBy : [];\n  var contactNumber = postData && postData.contactNumber ? postData.contactNumber : '';\n  var authorImage = postData.author && postData.author.image && postData.author.image.url ? postData.author.image.url : null;\n  var authorFallbackImage = postData.author && postData.author.image && postData.author.image.largeUrl ? postData.author.image.largeUrl : null;\n\n  if (favouritedBy.includes(userId)) {\n    userFavList.push({\n      id: postData.id\n    });\n  }\n\n  var _useState2 = useState(userFavList),\n      userFav = _useState2[0],\n      setUserfav = _useState2[1];\n\n  var isFavourite = function isFavourite(id, favList) {\n    var favItem = favList.filter(function (item) {\n      return item.id === id;\n    });\n\n    if (favItem.length) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var isFav = isFavourite(postData.id, userFav);\n  var handleFavMutation = useMutation(HANDLE_FAV, {\n    variables: {\n      fav: {\n        id: userId,\n        postId: postData.id\n      }\n    }\n  });\n\n  var handleFavourite = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$handleFavMutat, data, _config;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setBtnLoading(true);\n\n              if (!isLoggedIn) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 4;\n              return AuthHelper.refreshToken();\n\n            case 4:\n              if (!isLoggedIn) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.prev = 5;\n              _context.next = 8;\n              return handleFavMutation();\n\n            case 8:\n              _yield$handleFavMutat = _context.sent;\n              data = _yield$handleFavMutat.data;\n              userNewFavList = data && data.handleFav && data.handleFav.data && data.handleFav.data.length ? data.handleFav.data : [];\n\n              if (userFav.length !== userNewFavList.length) {\n                setUserfav(userNewFavList);\n              }\n\n              setBtnLoading(false);\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](5);\n              setBtnLoading(false);\n\n            case 18:\n              _context.next = 22;\n              break;\n\n            case 20:\n              setBtnLoading(false); // SHOW MODAL\n\n              openModal({\n                config: (_config = {\n                  disableDragging: false,\n                  minHeight: 'auto',\n                  width: 'auto',\n                  height: 'auto',\n                  enableResizing: false\n                }, _defineProperty(_config, \"disableDragging\", true), _defineProperty(_config, \"transition\", {\n                  tension: 150\n                }), _config),\n                springStyle: {\n                  backgroundColor: '#ffffff',\n                  overflowY: 'auto'\n                },\n                modalClass: 'customModal',\n                closeOnClickOutside: true,\n                component: LoginModal,\n                componentProps: {}\n              });\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 15]]);\n    }));\n\n    return function handleFavourite() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  if (postData && postData.createdAt && postData.createdAt.seconds) {\n    var timeCalculation = new Date(postData.createdAt.seconds * 1000);\n    publishTime = timeFormatAMPM(timeCalculation);\n  } else if (postData && postData.createdAt && postData.createdAt._seconds) {\n    var _timeCalculation = new Date(postData.createdAt._seconds * 1000);\n\n    publishTime = timeFormatAMPM(_timeCalculation);\n  }\n\n  var adsCategory = function adsCategory(category, index) {\n    return __jsx(Link, {\n      key: index,\n      href: {\n        pathname: \"\".concat(SINGLE_CATEGORY_PAGE, \"/\").concat(category.slug),\n        state: {\n          termId: category.id\n        }\n      }\n    }, __jsx(\"a\", null, __jsx(Tag, {\n      tagContent: category.name,\n      style: {\n        marginRight: 10\n      }\n    })));\n  };\n\n  return __jsx(Fragment, null, __jsx(Text, {\n    content: postData.title,\n    as: \"span\",\n    fontSize: 18,\n    fontWeight: 600,\n    color: \"#333333\"\n  }), __jsx(TagGroup, {\n    marginBottom: \"25px\",\n    style: {\n      marginTop: 25,\n      width: '100%'\n    }\n  }, __jsx(LabelTag, {\n    tagContent: \"\".concat(CURRENCY, \" \").concat(postData.price)\n  }), postData.isNegotiable && __jsx(Text, {\n    content: \"Negotiable\",\n    as: \"span\",\n    fontSize: 14,\n    fontWeight: 400,\n    color: \"#595959\",\n    mb: 0\n  })), postData && postData.distance ? __jsx(AddressBox, {\n    distance: postData.distance ? \"Approximately \".concat(Math.floor(postData.distance), \" km away\") : '',\n    location: postData.formattedLocation ? postData.formattedLocation.formattedAddress : '',\n    style: {\n      marginBottom: '20px'\n    }\n  }) : __jsx(\"p\", null) // <p>Please Enable your location to get distance</p>\n  , __jsx(Button, {\n    iconPosition: \"left\",\n    title: \"Show Contact\",\n    bg: \"#30C56D\",\n    style: {\n      marginBottom: 38,\n      width: '100%'\n    },\n    icon: __jsx(Icon, {\n      name: \"ios-call\",\n      fontSize: 19,\n      color: \"#fff\",\n      mr: 10\n    }),\n    onClick: function onClick() {\n      var _config2;\n\n      return openModal({\n        config: (_config2 = {\n          disableDragging: false,\n          className: 'contactModal',\n          width: 'auto',\n          height: 'auto',\n          enableResizing: false\n        }, _defineProperty(_config2, \"disableDragging\", true), _defineProperty(_config2, \"transition\", {\n          tension: 150\n        }), _config2),\n        closeOnClickOutside: true,\n        component: ContactInfoModal,\n        componentProps: {\n          data: {\n            contactNumber: contactNumber\n          }\n        }\n      });\n    }\n  }), __jsx(InfoBoxWrapper, null, __jsx(InfoBox, {\n    imgWidth: \"45px\",\n    imgHeight: \"45px\",\n    imgRadius: 30,\n    source: [authorImage, authorFallbackImage],\n    title: postData && postData.author && postData.author.name ? postData.author.name : '',\n    author: postData.authorId,\n    postedTime: publishTime !== '' ? \"Ad posted at \".concat(publishTime) : '',\n    style: {\n      flexGrow: 1\n    }\n  }), __jsx(ButtonWrapper, {\n    style: {\n      flexGrow: 0\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    icon: __jsx(Icon, {\n      name: \"ios-share-alt\",\n      fontSize: 18,\n      color: \"#8C8C8C\"\n    }),\n    height: 40,\n    width: 40,\n    className: \"outlineButton\",\n    style: {\n      marginRight: 10,\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: '#e2e2e2',\n      minHeight: 'auto',\n      minWidth: 'auto'\n    },\n    onClick: function onClick() {\n      var _config3;\n\n      return openModal({\n        config: (_config3 = {\n          disableDragging: false,\n          className: 'shareModal',\n          width: 'auto',\n          height: 'auto',\n          enableResizing: false\n        }, _defineProperty(_config3, \"disableDragging\", true), _defineProperty(_config3, \"transition\", {\n          tension: 150\n        }), _config3),\n        withRnd: false,\n        closeOnClickOutside: true,\n        component: ShareModal,\n        componentProps: {\n          data: {\n            author: postData.author.name,\n            link: true ? window.location.href : null,\n            title: postData.title\n          }\n        }\n      });\n    }\n  }), __jsx(Button, {\n    variant: \"outlined\",\n    className: \"outlineButton\",\n    isLoading: btnLoading,\n    icon: __jsx(Icon, {\n      name: \"ios-heart\",\n      fontSize: 18,\n      color: isFav ? '#30C56D' : '#8C8C8C'\n    }),\n    height: 40,\n    width: 40,\n    style: {\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: isFav ? '#30C56D' : '#e2e2e2',\n      minHeight: 'auto',\n      minWidth: 'auto',\n      padding: 0\n    },\n    onClick: handleFavourite\n  }))), __jsx(Text, {\n    content: \"Description\",\n    fontSize: 16,\n    fontFamily: \"Poppins\",\n    fontWeight: 600,\n    color: \"#333333\",\n    mb: 15,\n    style: {\n      display: 'inline-block'\n    }\n  }), postData && __jsx(Tag, {\n    bgColor: postData.condition ? '#00b6ff' : '#30C56D',\n    tagContent: postData.condition ? 'New' : 'Used',\n    size: \"14px\",\n    tagColor: \"#ffffff\",\n    style: {\n      marginLeft: 15,\n      fontWeight: 700\n    }\n  }), __jsx(AlignCenterWrapper, {\n    style: {\n      marginBottom: 15\n    }\n  }, __jsx(DescriptionBlock, null, __jsx(ReadMore, {\n    character: 150\n  }, postData.content))), __jsx(AlignCenterWrapper, {\n    style: {\n      marginTop: 25,\n      marginBottom: 25\n    }\n  }, postData.categories && postData.categories.length ? postData.categories.map(adsCategory) : null), isLoggedIn && postData.authorId && userId === postData.authorId ? __jsx(Button, {\n    title: \"Edit\",\n    variant: \"textButton\",\n    style: {\n      minHeight: 'auto',\n      minWidth: 'auto'\n    },\n    onClick: function onClick() {\n      return Router.push(\"\".concat(ADD_POST, \"/\").concat(postData.id));\n    }\n  }) : null);\n};\n\nexport default Description;","map":null,"metadata":{},"sourceType":"module"}