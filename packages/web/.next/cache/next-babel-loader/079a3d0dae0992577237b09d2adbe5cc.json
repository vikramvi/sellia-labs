{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Icon from 'react-icons-kit';\nimport { chevronRight } from 'react-icons-kit/ionicons/chevronRight';\nimport { chevronLeft } from 'react-icons-kit/ionicons/chevronLeft';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport Box from 'reusecore/src/elements/Box';\nimport Button from 'reusecore/src/elements/Button';\nimport Text from 'reusecore/src/elements/Text';\nimport Dropdown from '../../../components/DropdownSelect';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { ADD_POST } from 'core/graphql/Mutations';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport PublishModal from '../../ModalContainer/PostPublishModal';\nimport AuthHelper from '../../../helpers/authHelper';\nimport Link from 'next/link';\nimport { ACCOUNT_SETTING_PAGE } from 'core/navigation/constant';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nimport gql from 'graphql-tag';\nconst GET_AUTHOR_MOBILE_NUMBER = gql`\n  query GetAuthorMobile($username: ID!) {\n    author(id: $username) {\n      id\n      mobile {\n        number\n      }\n    }\n  }\n`;\n\nconst publishModal = newPost => {\n  if (newPost && newPost.data && newPost.data.addPost && newPost.data.addPost.status === 'publish') {\n    openModal({\n      config: {\n        disableDragging: false,\n        size: {\n          width: 360,\n          height: 320\n        },\n        enableResizing: {\n          bottom: true,\n          bottomLeft: true,\n          bottomRight: true,\n          left: true,\n          right: true,\n          top: true,\n          topLeft: true,\n          topRight: true\n        }\n      },\n      closeOnClickOutside: true,\n      component: PublishModal,\n      componentProps: {\n        data: {\n          closeModal,\n          title: 'Congrats!!!',\n          message: 'Your account information saved successfully',\n          slug: newPost.data.addPost.slug\n        }\n      }\n    });\n  }\n};\n\nlet imagesUrl = [];\n\nconst ContactNumberInfo = ({\n  userId\n}) => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_AUTHOR_MOBILE_NUMBER, {\n    variables: {\n      username: userId\n    }\n  });\n  const {\n    state,\n    dispatch\n  } = useContext(AddPostContext);\n  const {\n    0: btnLoading,\n    1: setBtnLoading\n  } = useState(false);\n  const {\n    0: publishBtnLoading,\n    1: setPublishBtnLoading\n  } = useState(false);\n  const {\n    step,\n    adPost\n  } = state;\n  const [postMutation] = useMutation(ADD_POST);\n\n  const handlePostSubmit = async () => {\n    await AuthHelper.refreshToken();\n    setPublishBtnLoading(true);\n    dispatch({\n      type: 'UPDATE_ADPOST',\n      payload: {\n        key: 'status',\n        value: 'publish'\n      }\n    });\n\n    if (adPost.localGallery.length) {\n      imagesUrl = await uploadMultipleImages(adPost.localGallery);\n\n      if (imagesUrl && imagesUrl.length > 0) {\n        dispatch({\n          type: 'UPDATE_FULL_ADPOST',\n          payload: {\n            gallery: adPost.gallery.concat(imagesUrl[0]),\n            image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n            localImage: {},\n            localGallery: []\n          }\n        });\n      }\n    } else {\n      try {\n        const data = await postMutation({\n          variables: {\n            post: _objectSpread(_objectSpread({}, finalData), {}, {\n              status: 'publish'\n            })\n          }\n        });\n        setPublishBtnLoading(false);\n\n        if (!adPost.id) {\n          dispatch({\n            type: 'UPDATE_ADPOST',\n            payload: {\n              key: 'id',\n              value: data.data.addPost.id\n            }\n          });\n        }\n\n        publishModal(data);\n      } catch (error) {\n        console.log(error, 'error');\n        setPublishBtnLoading(false);\n      }\n    }\n  };\n\n  const {\n    preImage,\n    preGallery,\n    localImage,\n    localGallery,\n    location\n  } = adPost,\n        prossedAdPostData = _objectWithoutProperties(adPost, [\"preImage\", \"preGallery\", \"localImage\", \"localGallery\", \"location\"]);\n\n  let finalData = prossedAdPostData;\n\n  if (location && location.lat) {\n    finalData = _objectSpread(_objectSpread({}, prossedAdPostData), {}, {\n      location\n    });\n  }\n\n  useEffect(() => {\n    (async function () {\n      if (imagesUrl.length) {\n        try {\n          const data = await postMutation({\n            variables: {\n              post: _objectSpread(_objectSpread({}, finalData), {}, {\n                status: 'publish'\n              })\n            }\n          });\n          setPublishBtnLoading(false);\n          setBtnLoading(false);\n\n          if (!adPost.id) {\n            dispatch({\n              type: 'UPDATE_ADPOST',\n              payload: {\n                key: 'id',\n                value: data.data.addPost.id\n              }\n            });\n          }\n\n          publishModal(data);\n        } catch (error) {\n          setPublishBtnLoading(false);\n          setBtnLoading(false);\n        }\n      }\n    })();\n  }, [prossedAdPostData.gallery]);\n  let mobiles = [];\n\n  if (!loading && data.author && data.author.mobile && data.author.mobile.length) {\n    data.author.mobile.map(mobile => {\n      mobiles.push({\n        value: mobile.number,\n        label: mobile.number\n      });\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Text, {\n    content: \"Select the mobile number you want as contact\",\n    pb: 20,\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  }), !mobiles.length && !loading ? __jsx(Link, {\n    href: `${ACCOUNT_SETTING_PAGE}?view=add-mobile-number`\n  }, __jsx(Button, {\n    title: \"Add Mobile Number Now\",\n    variant: \"textButton\"\n  })) : null, mobiles.length && !loading ? __jsx(React.Fragment, null, __jsx(Text, {\n    content: \"Select Your Mobile Number\",\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  }), __jsx(Dropdown, {\n    options: mobiles,\n    value: {\n      label: adPost.contactNumber,\n      value: adPost.contactNumber\n    },\n    onChange: (contact, index, options) => {\n      dispatch({\n        type: 'UPDATE_ADPOST',\n        payload: {\n          key: 'contactNumber',\n          value: contact.value\n        }\n      });\n    },\n    placeholder: \"Contact Number\",\n    label: \"Contact Number\"\n  })) : null, __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\"\n  }, __jsx(Button, {\n    title: \"Previous\",\n    iconPosition: \"left\",\n    onClick: () => dispatch({\n      type: 'UPDATE_STEP',\n      payload: {\n        step: step - 1\n      }\n    }),\n    disabled: btnLoading,\n    icon: __jsx(Icon, {\n      icon: chevronLeft,\n      size: 14,\n      color: \"#8C8C8C\"\n    }),\n    variant: \"textButton\",\n    mr: 30,\n    ml: \"auto\"\n  }), __jsx(Button, {\n    title: \"Done\",\n    iconPosition: \"right\",\n    disabled: adPost.contactNumber.length === 0 || btnLoading,\n    isLoading: publishBtnLoading,\n    loaderColor: \"#ffffff\",\n    onClick: handlePostSubmit,\n    icon: __jsx(Icon, {\n      icon: chevronRight,\n      size: 21,\n      color: \"#ffffff\"\n    }),\n    style: {\n      backgroundColor: adPost.contactNumber.length === 0 || btnLoading ? '#d2d2d2' : '#30C56D'\n    }\n  })));\n};\n\nexport default ContactNumberInfo;","map":null,"metadata":{},"sourceType":"module"}