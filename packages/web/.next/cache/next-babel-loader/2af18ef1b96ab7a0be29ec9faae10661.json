{"ast":null,"code":"var _jsxFileName = \"/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/helpers/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getFirebaseCookie } from './session';\nimport { GRAPHQL_URL } from '../Config';\nimport PropTypes from 'prop-types'; // import cookie from 'cookie';\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = useMemo(() => {\n      // We pass in the apolloClient directly when using getDataFromTree\n      if (apolloClient) {\n        return apolloClient;\n      } // Otherwise initClient using apolloState\n\n\n      return initApolloClient(apolloState, {\n        getToken\n      });\n    }, []);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  if (true) {\n    // Find correct display name\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component'; // Warn if old way of installing apollo is used\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = `withApollo(${displayName})`; // Add some prop types\n\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object\n    };\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n      const apolloClient = ctx.apolloClient = initApolloClient({}, {\n        getToken: () => getToken(ctx)\n      });\n      const pageProps = PageComponent.getInitialProps ? await PageComponent.getInitialProps(ctx) : {}; // Only on the server\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 15\n              }\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\nlet apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(...args) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(...args);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(...args);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient(initialState = {}, {\n  getToken\n}) {\n  const fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n\n  if (true) {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require('https-proxy-agent'))(process.env.https_proxy);\n    }\n  }\n\n  const httpLink = new HttpLink({\n    uri: GRAPHQL_URL,\n    // Server URL (must be absolute)\n    credentials: 'same-origin',\n    fetch,\n    fetchOptions\n  });\n  const authLink = setContext((request, {\n    headers\n  }) => {\n    const token = getToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token ? token : ''\n      })\n    };\n  }); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object.id || null,\n      addTypename: false\n    }).restore(initialState)\n  });\n}\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\n\n\nfunction getToken(ctx) {\n  // const cookies = cookie.parse(req ? req.headers.cookie || '' : document.cookie)\n  const token = getFirebaseCookie('id_token', ctx);\n  return token;\n}","map":{"version":3,"sources":["/Users/bhavikshah/Work/Sellia/sellia-mono/selliafemono/packages/web/helpers/apollo.js"],"names":["React","useMemo","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","setContext","fetch","getFirebaseCookie","GRAPHQL_URL","PropTypes","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","getToken","displayName","name","console","warn","propTypes","object","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","args","createApolloClient","initialState","fetchOptions","process","env","https_proxy","agent","require","httpLink","uri","credentials","authLink","request","headers","token","authorization","ssrMode","link","concat","dataIdFromObject","id","addTypename","restore"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,aAApB,EAAmC;AAAEC,EAAAA,GAAG,GAAG;AAAR,IAAiB,EAApD,EAAwD;AAC7D,QAAMC,UAAU,GAAG,UAAiD;AAAA,QAAhD;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAgD;AAAA,QAAhBC,SAAgB;;AAClE,UAAMC,MAAM,GAAGlB,OAAO,CAAC,MAAM;AAC3B;AACA,UAAIe,YAAJ,EAAkB;AAChB,eAAOA,YAAP;AACD,OAJ0B,CAM3B;;;AACA,aAAOI,gBAAgB,CAACH,WAAD,EAAc;AAAEI,QAAAA;AAAF,OAAd,CAAvB;AACD,KARqB,EAQnB,EARmB,CAAtB;AASA,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GAfD;;AAiBA,YAA2C;AACzC;AACA,UAAMI,WAAW,GACfT,aAAa,CAACS,WAAd,IAA6BT,aAAa,CAACU,IAA3C,IAAmD,WADrD,CAFyC,CAKzC;;AACA,QAAID,WAAW,KAAK,KAApB,EAA2B;AACzBE,MAAAA,OAAO,CAACC,IAAR,CAAa,qDAAb;AACD,KARwC,CAUzC;;;AACAV,IAAAA,UAAU,CAACO,WAAX,GAA0B,cAAaA,WAAY,GAAnD,CAXyC,CAazC;;AACAP,IAAAA,UAAU,CAACW,SAAX,GAAuB;AACrB;AACAV,MAAAA,YAAY,EAAEL,SAAS,CAACgB,MAFH;AAGrB;AACAV,MAAAA,WAAW,EAAEN,SAAS,CAACgB;AAJF,KAAvB;AAMD;;AAED,MAAIb,GAAG,IAAID,aAAa,CAACe,eAAzB,EAA0C;AACxCb,IAAAA,UAAU,CAACa,eAAX,GAA6B,MAAMC,GAAN,IAAa;AACxC,YAAM;AAAEC,QAAAA;AAAF,UAAcD,GAApB,CADwC,CAExC;AACA;;AACA,YAAMb,YAAY,GAAIa,GAAG,CAACb,YAAJ,GAAmBI,gBAAgB,CACvD,EADuD,EAEvD;AACEC,QAAAA,QAAQ,EAAE,MAAMA,QAAQ,CAACQ,GAAD;AAD1B,OAFuD,CAAzD;AAOA,YAAMX,SAAS,GAAGL,aAAa,CAACe,eAAd,GACd,MAAMf,aAAa,CAACe,eAAd,CAA8BC,GAA9B,CADQ,GAEd,EAFJ,CAXwC,CAexC;;AACA,gBAAmC;AACjC;AACA;AACA,YAAIA,GAAG,CAACE,GAAJ,IAAWF,GAAG,CAACE,GAAJ,CAAQC,QAAvB,EAAiC;AAC/B,iBAAO,EAAP;AACD;;AAED,YAAIlB,GAAJ,EAAS;AACP,cAAI;AACF;AACA,kBAAM;AAAEmB,cAAAA;AAAF,gBAAsB,MAAM,OAAO,mBAAP,CAAlC;AACA,kBAAMA,eAAe,CACnB,MAAC,OAAD;AACE,cAAA,SAAS,kCACJf,SADI;AAEPF,gBAAAA;AAFO,gBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADmB,CAArB;AAQD,WAXD,CAWE,OAAOkB,KAAP,EAAc;AACd;AACA;AACA;AACAV,YAAAA,OAAO,CAACU,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD;AACF,SAzBgC,CA2BjC;AACA;;;AACAhC,QAAAA,IAAI,CAACiC,MAAL;AACD,OA9CuC,CAgDxC;;;AACA,YAAMlB,WAAW,GAAGD,YAAY,CAACoB,KAAb,CAAmBC,OAAnB,EAApB;AAEA,6CACKnB,SADL;AAEED,QAAAA;AAFF;AAID,KAvDD;AAwDD;;AAED,SAAOF,UAAP;AACD;AAED,IAAIC,YAAY,GAAG,IAAnB;AAEA;AACA;AACA;AACA;;AACA,SAASI,gBAAT,CAA0B,GAAGkB,IAA7B,EAAmC;AACjC;AACA;AACA,YAAmC;AACjC,WAAOC,kBAAkB,CAAC,GAAGD,IAAJ,CAAzB;AACD,GALgC,CAOjC;;;AACA,MAAI,CAACtB,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGuB,kBAAkB,CAAC,GAAGD,IAAJ,CAAjC;AACD;;AAED,SAAOtB,YAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASuB,kBAAT,CAA4BC,YAAY,GAAG,EAA3C,EAA+C;AAAEnB,EAAAA;AAAF,CAA/C,EAA6D;AAC3D,QAAMoB,YAAY,GAAG,EAArB,CAD2D,CAG3D;AACA;;AACA,YAAmC;AACjC,QAAIC,OAAO,CAACC,GAAR,CAAYC,WAAhB,EAA6B;AAC3BH,MAAAA,YAAY,CAACI,KAAb,GAAqB,KAAKC,OAAO,CAAC,mBAAD,CAAZ,EACnBJ,OAAO,CAACC,GAAR,CAAYC,WADO,CAArB;AAGD;AACF;;AAED,QAAMG,QAAQ,GAAG,IAAIzC,QAAJ,CAAa;AAC5B0C,IAAAA,GAAG,EAAEtC,WADuB;AACV;AAClBuC,IAAAA,WAAW,EAAE,aAFe;AAG5BzC,IAAAA,KAH4B;AAI5BiC,IAAAA;AAJ4B,GAAb,CAAjB;AAOA,QAAMS,QAAQ,GAAG3C,UAAU,CAAC,CAAC4C,OAAD,EAAU;AAAEC,IAAAA;AAAF,GAAV,KAA0B;AACpD,UAAMC,KAAK,GAAGhC,QAAQ,EAAtB;AACA,WAAO;AACL+B,MAAAA,OAAO,kCACFA,OADE;AAELE,QAAAA,aAAa,EAAED,KAAK,GAAGA,KAAH,GAAW;AAF1B;AADF,KAAP;AAMD,GAR0B,CAA3B,CApB2D,CA8B3D;;AACA,SAAO,IAAIjD,YAAJ,CAAiB;AACtBmD,IAAAA,OAAO,MADe;AACkB;AACxCC,IAAAA,IAAI,EAAEN,QAAQ,CAACO,MAAT,CAAgBV,QAAhB,CAFgB;AAGtBX,IAAAA,KAAK,EAAE,IAAI/B,aAAJ,CAAkB;AACvBqD,MAAAA,gBAAgB,EAAE/B,MAAM,IAAIA,MAAM,CAACgC,EAAP,IAAa,IADlB;AAEvBC,MAAAA,WAAW,EAAE;AAFU,KAAlB,EAGJC,OAHI,CAGIrB,YAHJ;AAHe,GAAjB,CAAP;AAQD;AAED;AACA;AACA;AACA;;;AACA,SAASnB,QAAT,CAAkBQ,GAAlB,EAAuB;AACrB;AACA,QAAMwB,KAAK,GAAG5C,iBAAiB,CAAC,UAAD,EAAaoB,GAAb,CAA/B;AACA,SAAOwB,KAAP;AACD","sourcesContent":["import React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport { getFirebaseCookie } from './session';\nimport { GRAPHQL_URL } from '../Config';\nimport PropTypes from 'prop-types';\n// import cookie from 'cookie';\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = useMemo(() => {\n      // We pass in the apolloClient directly when using getDataFromTree\n      if (apolloClient) {\n        return apolloClient;\n      }\n\n      // Otherwise initClient using apolloState\n      return initApolloClient(apolloState, { getToken });\n    }, []);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component';\n\n    // Warn if old way of installing apollo is used\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n\n    // Add some prop types\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object,\n    };\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.apolloClient = initApolloClient(\n        {},\n        {\n          getToken: () => getToken(ctx),\n        }\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(...args) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(...args);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(...args);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, { getToken }) {\n  const fetchOptions = {};\n\n  // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n  if (typeof window === 'undefined') {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require('https-proxy-agent'))(\n        process.env.https_proxy\n      );\n    }\n  }\n\n  const httpLink = new HttpLink({\n    uri: GRAPHQL_URL, // Server URL (must be absolute)\n    credentials: 'same-origin',\n    fetch,\n    fetchOptions,\n  });\n\n  const authLink = setContext((request, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? token : '',\n      },\n    };\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object.id || null,\n      addTypename: false,\n    }).restore(initialState),\n  });\n}\n\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\nfunction getToken(ctx) {\n  // const cookies = cookie.parse(req ? req.headers.cookie || '' : document.cookie)\n  const token = getFirebaseCookie('id_token', ctx);\n  return token;\n}\n"]},"metadata":{},"sourceType":"module"}