{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport { withFormik } from 'formik';\nimport Button from 'reusecore/src/elements/Button';\nimport { ErrorNotification } from '../SignInForm/style';\nimport Input from '../../components/Input';\nimport { setFirebaseCookie } from '../../helpers/session';\nimport redirect from '../../helpers/redirect';\nimport { useMutation } from '@apollo/react-hooks';\nimport { REGISTER } from 'core/graphql/Mutations';\nimport { GET_VERIFICATION_CODE, VERIFY_CODE, UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport AuthHelper from '../../helpers/authHelper';\nvar MobileNumbersEnhancer = withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    var number = '';\n    var code = '';\n    return {\n      number: number,\n      code: code\n    };\n  }\n});\n\nvar Recaptcha = function Recaptcha() {\n  useEffect(function () {\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha');\n    window.recaptchaVerifier.render().then(function (widgetId) {\n      window.recaptchaWidgetId = widgetId;\n    });\n  }, []);\n  return __jsx(\"div\", {\n    id: \"recaptcha\"\n  });\n};\n\nvar MobileSignIn = function MobileSignIn(_ref) {\n  var values = _ref.values,\n      touched = _ref.touched,\n      handleChange = _ref.handleChange,\n      userInfo = _ref.userInfo,\n      showModal = _ref.showModal,\n      author = _ref.author,\n      setFieldValue = _ref.setFieldValue,\n      loading = _ref.loading;\n\n  var _useState = useState({\n    confirmResult: false,\n    isMobileVerified: false,\n    wrongCode: false,\n    errorMessage: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var confirmResult = state.confirmResult,\n      isMobileVerified = state.isMobileVerified,\n      wrongCode = state.wrongCode,\n      errorMessage = state.errorMessage;\n\n  var handleGetVerificationCode = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _confirmResult;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return AuthHelper.login('phone', null, null, values.number);\n\n            case 3:\n              _confirmResult = _context.sent;\n\n              if (!_confirmResult.error) {\n                setState(_objectSpread(_objectSpread({}, state), {}, {\n                  confirmResult: _confirmResult,\n                  errorMessage: false\n                }));\n              } else {\n                setState(_objectSpread(_objectSpread({}, state), {}, {\n                  errorMessage: _confirmResult.error.message\n                }));\n              }\n\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function handleGetVerificationCode() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleVerifyCode = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var mobileNumbers, user, token;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              mobileNumbers = values.mobile;\n              _context2.next = 3;\n              return AuthHelper.confirmVerification(state.confirmResult, values.code);\n\n            case 3:\n              user = _context2.sent;\n\n              if (!(user && !user.error)) {\n                _context2.next = 12;\n                break;\n              }\n\n              setState(_objectSpread(_objectSpread({}, state), {}, {\n                isMobileVerified: true,\n                errorMessage: false\n              }));\n              _context2.next = 8;\n              return user.getIdToken();\n\n            case 8:\n              token = _context2.sent;\n              setFieldValue('token', token);\n              _context2.next = 13;\n              break;\n\n            case 12:\n              if (user.error) {\n                setState(_objectSpread(_objectSpread({}, state), {}, {\n                  errorMessage: user.error.message\n                }));\n              }\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleVerifyCode() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var res, user;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n\n              if (!values.token) {\n                _context3.next = 6;\n                break;\n              }\n\n              _context3.next = 4;\n              return registerMutation();\n\n            case 4:\n              res = _context3.sent;\n\n              if (res && res.data && res.data.register) {\n                user = res.data.register;\n                setFirebaseCookie('id_token', values.token);\n                setFirebaseCookie('user', _objectSpread({}, user));\n                redirect({}, '/');\n              }\n\n            case 6:\n              _context3.next = 11;\n              break;\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 8]]);\n    }))();\n  }, [values.token]);\n  var registerMutation = useMutation(REGISTER, {\n    variables: {\n      user: {\n        mobile: [{\n          number: values.number\n        }],\n        token: values.token\n      }\n    }\n  });\n  return __jsx(React.Fragment, null, !confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Enter Number(ex. +30*********)\",\n    changed: handleChange('number'),\n    value: values.number,\n    touched: touched\n  }), __jsx(Recaptcha, null), __jsx(Button, {\n    onClick: handleGetVerificationCode,\n    title: \"Send Verification Code\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 30,\n    width: 1\n  })) : null, !isMobileVerified && confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Verify & Login\",\n    changed: handleChange('code'),\n    value: values.code,\n    touched: touched\n  }), __jsx(Button, {\n    onClick: handleVerifyCode,\n    title: \"Verify & Login\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1\n  })) : null, isMobileVerified ? __jsx(\"p\", {\n    style: {\n      color: '#30C56D',\n      textAlign: 'center',\n      fontFamily: 'Lato'\n    }\n  }, \"Your number is verified!\") : '', errorMessage ? __jsx(ErrorNotification, {\n    style: {\n      marginTop: 30\n    }\n  }, errorMessage) : '');\n};\n\nexport default MobileNumbersEnhancer(MobileSignIn);","map":null,"metadata":{},"sourceType":"module"}