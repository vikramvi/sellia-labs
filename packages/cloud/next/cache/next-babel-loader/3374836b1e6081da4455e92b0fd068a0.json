{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, useContext, useState } from 'react';\nimport Link from 'next/link';\nimport ListView from '../../../components/ListView';\nimport { ListLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_POST } from 'core/graphql/Search.query';\nimport { CURRENCY } from '../../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { getUrlToState, setStateToUrl } from '../../../helpers/urlHandler';\nimport PlaceholderImg from 'core/static/images/thumb-grid-placeholder.svg';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\n\nvar timeFormatAMPM = function timeFormatAMPM(date) {\n  return date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n};\n\nvar SearchPostItem = function SearchPostItem() {\n  var publishTime = '';\n  var urlState = getUrlToState();\n\n  var _useContext = useContext(SearchContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useQuery = useQuery(GET_SEARCH_POST, {\n    variables: {\n      queryVariables: urlState\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore;\n\n  if (error) return __jsx(OnError, null);\n  var searchPosts = data && data.searchPosts && data.searchPosts.data ? data.searchPosts.data : [];\n  var postCount = searchPosts ? searchPosts.length : 1;\n  var totalPost = data && data.searchPosts && data.searchPosts.total ? data.searchPosts.total : 1;\n  var searchPostsData = searchPosts.map(function (post) {\n    if (post.createdAt) {\n      if (post && post.createdAt && post.createdAt.seconds) {\n        var createdTime = new Date(post.createdAt.seconds * 1000);\n        publishTime = timeFormatAMPM(createdTime);\n      } else if (post && post.createdAt && post.createdAt._seconds) {\n        var _createdTime = new Date(post.createdAt._seconds * 1000);\n\n        publishTime = timeFormatAMPM(_createdTime);\n      }\n\n      return _objectSpread(_objectSpread({}, post), {}, {\n        publishTime: publishTime\n      });\n    } else {\n      return _objectSpread({}, post);\n    }\n  });\n  return __jsx(Fragment, null, searchPostsData.length === 0 && !loading ? __jsx(NoItemFound, null) : true && __jsx(ListGrid, {\n    data: searchPostsData,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1],\n    componentContainerStyle: {\n      p: 0,\n      borderBottom: '1px solid #eeeeee'\n    },\n    componentWrapperStyle: {\n      margin: 0\n    },\n    component: function component(item) {\n      return __jsx(Link, {\n        href: \"\".concat(SINGLE_POST_PAGE, \"/\").concat(item.slug)\n      }, __jsx(\"a\", null, __jsx(ListView, {\n        currency: CURRENCY,\n        title: item.title,\n        price: item.price,\n        source: item.image ? item.image.url : PlaceholderImg,\n        fallbackSource: item.image ? item.image.largeUrl : PlaceholderImg,\n        negotiable: item.isNegotiable,\n        condition: item.condition,\n        location: item && item.formattedLocation && item.formattedLocation.formattedAddress !== null ? item.formattedLocation.formattedAddress : 'Location goes here',\n        distance: item.distance !== null && item.distance !== undefined ? \"Approximately \".concat(Math.floor(item.distance), \" km away\") : '',\n        icon: \"md-pin\",\n        postedTime: item.publishTime ? \"Ad posted at \".concat(item.publishTime) : ''\n      })));\n    },\n    loading: loading ? loading : loadingMore,\n    loaderColor: \"#ffffff\",\n    placeholder: __jsx(ListLoader, null),\n    limit: state.LIMIT,\n    handleLoadMore: function handleLoadMore(loading) {\n      toggleLoading(true);\n      setStateToUrl({\n        page: state.page + 1\n      });\n      fetchMore({\n        variables: {\n          queryVariables: _objectSpread(_objectSpread({}, urlState), {}, {\n            page: state.page + 1\n          })\n        },\n        updateQuery: function updateQuery(prev, _ref) {\n          var fetchMoreResult = _ref.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              dispatch({\n                type: 'UPDATE',\n                payload: _objectSpread(_objectSpread({}, state), {}, {\n                  page: state.page + 1\n                })\n              });\n              return {\n                searchPosts: {\n                  data: [].concat(_toConsumableArray(prev.searchPosts.data), _toConsumableArray(fetchMoreResult.searchPosts.data)),\n                  total: totalPost\n                }\n              };\n            }\n          }\n        }\n      });\n    }\n  }));\n};\n\nvar SearchPost = function SearchPost(props) {\n  return __jsx(Fragment, null, __jsx(SearchPostItem, props));\n};\n\nexport default SearchPost;","map":null,"metadata":{},"sourceType":"module"}