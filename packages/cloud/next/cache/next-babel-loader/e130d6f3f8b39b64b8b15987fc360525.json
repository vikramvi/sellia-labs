{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { firebaseAuth } from './init';\nimport { setFirebaseCookie } from './session';\n/**\n * Firebase Authentication helper functions\n */\n\nclass AuthHelper {\n  constructor() {\n    _defineProperty(this, \"signUp\", async (provider, email, password) => {\n      try {\n        switch (provider) {\n          case 'password':\n            return new _Promise((resolve, reject) => {\n              firebaseAuth().createUserWithEmailAndPassword(email, password).then(result => {\n                resolve(result);\n              }).catch(error => {\n                resolve({\n                  error\n                });\n              });\n            });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"forgetPass\", async email => {\n      return new _Promise((resolve, reject) => {\n        firebaseAuth().sendPasswordResetEmail(email).then(result => {\n          resolve(true);\n        }).catch(error => {\n          resolve({\n            error\n          });\n        });\n      });\n    });\n\n    _defineProperty(this, \"reauthenticate\", async currentPassword => {\n      var user = firebaseAuth().currentUser;\n      var cred = firebaseAuth.EmailAuthProvider.credential(user.email, currentPassword);\n      return user.reauthenticateWithCredential(cred);\n    });\n\n    _defineProperty(this, \"changePassword\", async (currentPassword, newPassword) => new _Promise((resolve, reject) => {\n      try {\n        this.reauthenticate(currentPassword).then(() => {\n          var user = firebaseAuth().currentUser;\n          user.updatePassword(newPassword).then(() => {\n            resolve(true);\n          }).catch(error => {\n            resolve({\n              error\n            });\n          });\n        }).catch(error => {\n          resolve({\n            error\n          });\n        });\n      } catch (error) {\n        resolve({\n          error\n        });\n      }\n    }));\n\n    _defineProperty(this, \"login\", async (provider, email = null, password = null, phoneNumber = null) => {\n      try {\n        switch (provider) {\n          case 'password':\n            return new _Promise((resolve, reject) => {\n              firebaseAuth().signInWithEmailAndPassword(email, password).then(result => {\n                resolve(result);\n              }).catch(error => {\n                resolve({\n                  error\n                });\n              });\n            });\n\n          case 'google':\n            var authProvider = new firebaseAuth.GoogleAuthProvider();\n            return firebaseAuth().signInWithPopup(authProvider);\n\n          case 'facebook':\n            var authProvider = new firebaseAuth.FacebookAuthProvider();\n            return firebaseAuth().signInWithPopup(authProvider);\n\n          case 'twitter':\n            var authProvider = new firebaseAuth.TwitterAuthProvider();\n            return firebaseAuth().signInWithPopup(authProvider);\n\n          case 'phone':\n            let appVerifier;\n            appVerifier = window.recaptchaVerifier;\n            return new _Promise((resolve, reject) => {\n              firebaseAuth().signInWithPhoneNumber(phoneNumber, appVerifier).then(result => {\n                resolve(result);\n              }).catch(error => {\n                resolve({\n                  error\n                });\n              });\n            });\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    });\n\n    _defineProperty(this, \"confirmVerification\", async (confirmationResult, code) => {\n      return new _Promise((resolve, reject) => {\n        confirmationResult.confirm(code).then(result => {\n          resolve(result.user);\n        }).catch(function (error) {\n          resolve({\n            error\n          });\n        });\n      });\n    });\n\n    _defineProperty(this, \"getToken\", async User => {\n      try {\n        return User.getIdToken();\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"refreshToken\", async () => {\n      await firebaseAuth().currentUser.getIdToken(true).then(function (idToken) {\n        setFirebaseCookie('id_token', idToken);\n      }).catch(function (error) {});\n    });\n\n    _defineProperty(this, \"logout\", async () => {\n      return new _Promise((resolve, reject) => {\n        try {\n          firebaseAuth().signOut().then(() => {\n            resolve(true);\n          });\n        } catch (error) {\n          reject(false);\n        }\n      });\n    });\n\n    _defineProperty(this, \"isAuthenticated\", async () => {\n      return new _Promise((resolve, reject) => {\n        const unsubscribe = firebaseAuth().onAuthStateChanged(authUser => {\n          resolve(authUser);\n          unsubscribe();\n        }, error => reject(error));\n      });\n    });\n\n    _defineProperty(this, \"getCurrentUser\", async () => {\n      return firebaseAuth().currentUser;\n    });\n  }\n\n}\n\nexport default new AuthHelper();","map":{"version":3,"sources":["/Users/bhavikshah/Work/headless-graphql/packages/web/helpers/authHelper.js"],"names":["firebaseAuth","setFirebaseCookie","AuthHelper","constructor","provider","email","password","resolve","reject","createUserWithEmailAndPassword","then","result","catch","error","console","log","sendPasswordResetEmail","currentPassword","user","currentUser","cred","EmailAuthProvider","credential","reauthenticateWithCredential","newPassword","reauthenticate","updatePassword","phoneNumber","signInWithEmailAndPassword","authProvider","GoogleAuthProvider","signInWithPopup","FacebookAuthProvider","TwitterAuthProvider","appVerifier","window","recaptchaVerifier","signInWithPhoneNumber","confirmationResult","code","confirm","User","getIdToken","idToken","signOut","unsubscribe","onAuthStateChanged","authUser"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,SAASC,iBAAT,QAAkC,WAAlC;AAEA;;;;AAGA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,GAAG;AAAA,oCAEL,OAAOC,QAAP,EAAiBC,KAAjB,EAAwBC,QAAxB,KAAqC;AAC5C,UAAI;AACF,gBAAQF,QAAR;AACE,eAAK,UAAL;AACE,mBAAO,aAAY,CAACG,OAAD,EAAUC,MAAV,KAAqB;AACtCR,cAAAA,YAAY,GACTS,8BADH,CACkCJ,KADlC,EACyCC,QADzC,EAEGI,IAFH,CAEQC,MAAM,IAAI;AACdJ,gBAAAA,OAAO,CAACI,MAAD,CAAP;AACD,eAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdN,gBAAAA,OAAO,CAAC;AAAEM,kBAAAA;AAAF,iBAAD,CAAP;AACD,eAPH;AAQD,aATM,CAAP;AAFJ;AAaD,OAdD,CAcE,OAAOA,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KApBa;;AAAA,wCAsBD,MAAMR,KAAN,IAAe;AAC1B,aAAO,aAAY,CAACE,OAAD,EAAUC,MAAV,KAAqB;AACtCR,QAAAA,YAAY,GACTgB,sBADH,CAC0BX,KAD1B,EAEGK,IAFH,CAEQC,MAAM,IAAI;AACdJ,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAJH,EAKGK,KALH,CAKSC,KAAK,IAAI;AACdN,UAAAA,OAAO,CAAC;AAAEM,YAAAA;AAAF,WAAD,CAAP;AACD,SAPH;AAQD,OATM,CAAP;AAUD,KAjCa;;AAAA,4CAmCG,MAAMI,eAAN,IAAyB;AACxC,UAAIC,IAAI,GAAGlB,YAAY,GAAGmB,WAA1B;AACA,UAAIC,IAAI,GAAGpB,YAAY,CAACqB,iBAAb,CAA+BC,UAA/B,CACTJ,IAAI,CAACb,KADI,EAETY,eAFS,CAAX;AAIA,aAAOC,IAAI,CAACK,4BAAL,CAAkCH,IAAlC,CAAP;AACD,KA1Ca;;AAAA,4CA4CG,OAAOH,eAAP,EAAwBO,WAAxB,KACf,aAAY,CAACjB,OAAD,EAAUC,MAAV,KAAqB;AAC/B,UAAI;AACF,aAAKiB,cAAL,CAAoBR,eAApB,EACGP,IADH,CACQ,MAAM;AACV,cAAIQ,IAAI,GAAGlB,YAAY,GAAGmB,WAA1B;AACAD,UAAAA,IAAI,CACDQ,cADH,CACkBF,WADlB,EAEGd,IAFH,CAEQ,MAAM;AACVH,YAAAA,OAAO,CAAC,IAAD,CAAP;AACD,WAJH,EAKGK,KALH,CAKSC,KAAK,IAAI;AACdN,YAAAA,OAAO,CAAC;AAAEM,cAAAA;AAAF,aAAD,CAAP;AACD,WAPH;AAQD,SAXH,EAYGD,KAZH,CAYSC,KAAK,IAAI;AACdN,UAAAA,OAAO,CAAC;AAAEM,YAAAA;AAAF,WAAD,CAAP;AACD,SAdH;AAeD,OAhBD,CAgBE,OAAOA,KAAP,EAAc;AACdN,QAAAA,OAAO,CAAC;AAAEM,UAAAA;AAAF,SAAD,CAAP;AACD;AACF,KApBD,CA7CY;;AAAA,mCAmEN,OACNT,QADM,EAENC,KAAK,GAAG,IAFF,EAGNC,QAAQ,GAAG,IAHL,EAINqB,WAAW,GAAG,IAJR,KAKH;AACH,UAAI;AACF,gBAAQvB,QAAR;AACE,eAAK,UAAL;AACE,mBAAO,aAAY,CAACG,OAAD,EAAUC,MAAV,KAAqB;AACtCR,cAAAA,YAAY,GACT4B,0BADH,CAC8BvB,KAD9B,EACqCC,QADrC,EAEGI,IAFH,CAEQC,MAAM,IAAI;AACdJ,gBAAAA,OAAO,CAACI,MAAD,CAAP;AACD,eAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdN,gBAAAA,OAAO,CAAC;AAAEM,kBAAAA;AAAF,iBAAD,CAAP;AACD,eAPH;AAQD,aATM,CAAP;;AAUF,eAAK,QAAL;AACE,gBAAIgB,YAAY,GAAG,IAAI7B,YAAY,CAAC8B,kBAAjB,EAAnB;AACA,mBAAO9B,YAAY,GAAG+B,eAAf,CAA+BF,YAA/B,CAAP;;AACF,eAAK,UAAL;AACE,gBAAIA,YAAY,GAAG,IAAI7B,YAAY,CAACgC,oBAAjB,EAAnB;AACA,mBAAOhC,YAAY,GAAG+B,eAAf,CAA+BF,YAA/B,CAAP;;AACF,eAAK,SAAL;AACE,gBAAIA,YAAY,GAAG,IAAI7B,YAAY,CAACiC,mBAAjB,EAAnB;AACA,mBAAOjC,YAAY,GAAG+B,eAAf,CAA+BF,YAA/B,CAAP;;AACF,eAAK,OAAL;AACE,gBAAIK,WAAJ;AACAA,YAAAA,WAAW,GAAGC,MAAM,CAACC,iBAArB;AACA,mBAAO,aAAY,CAAC7B,OAAD,EAAUC,MAAV,KAAqB;AACtCR,cAAAA,YAAY,GACTqC,qBADH,CACyBV,WADzB,EACsCO,WADtC,EAEGxB,IAFH,CAEQC,MAAM,IAAI;AACdJ,gBAAAA,OAAO,CAACI,MAAD,CAAP;AACD,eAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdN,gBAAAA,OAAO,CAAC;AAAEM,kBAAAA;AAAF,iBAAD,CAAP;AACD,eAPH;AAQD,aATM,CAAP;AAxBJ;AAmCD,OApCD,CAoCE,OAAOA,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,KAhHa;;AAAA,iDAkHQ,OAAOyB,kBAAP,EAA2BC,IAA3B,KAAoC;AACxD,aAAO,aAAY,CAAChC,OAAD,EAAUC,MAAV,KAAqB;AACtC8B,QAAAA,kBAAkB,CACfE,OADH,CACWD,IADX,EAEG7B,IAFH,CAEQC,MAAM,IAAI;AACdJ,UAAAA,OAAO,CAACI,MAAM,CAACO,IAAR,CAAP;AACD,SAJH,EAKGN,KALH,CAKS,UAASC,KAAT,EAAgB;AACrBN,UAAAA,OAAO,CAAC;AAAEM,YAAAA;AAAF,WAAD,CAAP;AACD,SAPH;AAQD,OATM,CAAP;AAUD,KA7Ha;;AAAA,sCA+HH,MAAM4B,IAAN,IAAc;AACvB,UAAI;AACF,eAAOA,IAAI,CAACC,UAAL,EAAP;AACD,OAFD,CAEE,OAAO7B,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KArIa;;AAAA,0CAuIC,YAAY;AACzB,YAAMb,YAAY,GACfmB,WADG,CACSuB,UADT,CACoB,IADpB,EAEHhC,IAFG,CAEE,UAASiC,OAAT,EAAkB;AACtB1C,QAAAA,iBAAiB,CAAC,UAAD,EAAa0C,OAAb,CAAjB;AACD,OAJG,EAKH/B,KALG,CAKG,UAASC,KAAT,EAAgB,CAAE,CALrB,CAAN;AAMD,KA9Ia;;AAAA,oCAgJL,YAAY;AACnB,aAAO,aAAY,CAACN,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAI;AACFR,UAAAA,YAAY,GACT4C,OADH,GAEGlC,IAFH,CAEQ,MAAM;AACVH,YAAAA,OAAO,CAAC,IAAD,CAAP;AACD,WAJH;AAKD,SAND,CAME,OAAOM,KAAP,EAAc;AACdL,UAAAA,MAAM,CAAC,KAAD,CAAN;AACD;AACF,OAVM,CAAP;AAWD,KA5Ja;;AAAA,6CA8JI,YAAY;AAC5B,aAAO,aAAY,CAACD,OAAD,EAAUC,MAAV,KAAqB;AACtC,cAAMqC,WAAW,GAAG7C,YAAY,GAAG8C,kBAAf,CAClBC,QAAQ,IAAI;AACVxC,UAAAA,OAAO,CAACwC,QAAD,CAAP;AACAF,UAAAA,WAAW;AACZ,SAJiB,EAMlBhC,KAAK,IAAIL,MAAM,CAACK,KAAD,CANG,CAApB;AAQD,OATM,CAAP;AAUD,KAzKa;;AAAA,4CA2KG,YAAY;AAC3B,aAAOb,YAAY,GAAGmB,WAAtB;AACD,KA7Ka;AAAE;;AADD;;AAiLjB,eAAe,IAAIjB,UAAJ,EAAf","sourcesContent":["import { firebaseAuth } from './init';\nimport { setFirebaseCookie } from './session';\n\n/**\n * Firebase Authentication helper functions\n */\nclass AuthHelper {\n  constructor() {}\n\n  signUp = async (provider, email, password) => {\n    try {\n      switch (provider) {\n        case 'password':\n          return new Promise((resolve, reject) => {\n            firebaseAuth()\n              .createUserWithEmailAndPassword(email, password)\n              .then(result => {\n                resolve(result);\n              })\n              .catch(error => {\n                resolve({ error });\n              });\n          });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  forgetPass = async email => {\n    return new Promise((resolve, reject) => {\n      firebaseAuth()\n        .sendPasswordResetEmail(email)\n        .then(result => {\n          resolve(true);\n        })\n        .catch(error => {\n          resolve({ error });\n        });\n    });\n  };\n\n  reauthenticate = async currentPassword => {\n    var user = firebaseAuth().currentUser;\n    var cred = firebaseAuth.EmailAuthProvider.credential(\n      user.email,\n      currentPassword\n    );\n    return user.reauthenticateWithCredential(cred);\n  };\n\n  changePassword = async (currentPassword, newPassword) =>\n    new Promise((resolve, reject) => {\n      try {\n        this.reauthenticate(currentPassword)\n          .then(() => {\n            var user = firebaseAuth().currentUser;\n            user\n              .updatePassword(newPassword)\n              .then(() => {\n                resolve(true);\n              })\n              .catch(error => {\n                resolve({ error });\n              });\n          })\n          .catch(error => {\n            resolve({ error });\n          });\n      } catch (error) {\n        resolve({ error });\n      }\n    });\n\n  login = async (\n    provider,\n    email = null,\n    password = null,\n    phoneNumber = null\n  ) => {\n    try {\n      switch (provider) {\n        case 'password':\n          return new Promise((resolve, reject) => {\n            firebaseAuth()\n              .signInWithEmailAndPassword(email, password)\n              .then(result => {\n                resolve(result);\n              })\n              .catch(error => {\n                resolve({ error });\n              });\n          });\n        case 'google':\n          var authProvider = new firebaseAuth.GoogleAuthProvider();\n          return firebaseAuth().signInWithPopup(authProvider);\n        case 'facebook':\n          var authProvider = new firebaseAuth.FacebookAuthProvider();\n          return firebaseAuth().signInWithPopup(authProvider);\n        case 'twitter':\n          var authProvider = new firebaseAuth.TwitterAuthProvider();\n          return firebaseAuth().signInWithPopup(authProvider);\n        case 'phone':\n          let appVerifier;\n          appVerifier = window.recaptchaVerifier;\n          return new Promise((resolve, reject) => {\n            firebaseAuth()\n              .signInWithPhoneNumber(phoneNumber, appVerifier)\n              .then(result => {\n                resolve(result);\n              })\n              .catch(error => {\n                resolve({ error });\n              });\n          });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  confirmVerification = async (confirmationResult, code) => {\n    return new Promise((resolve, reject) => {\n      confirmationResult\n        .confirm(code)\n        .then(result => {\n          resolve(result.user);\n        })\n        .catch(function(error) {\n          resolve({ error });\n        });\n    });\n  };\n\n  getToken = async User => {\n    try {\n      return User.getIdToken();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  refreshToken = async () => {\n    await firebaseAuth()\n      .currentUser.getIdToken(true)\n      .then(function(idToken) {\n        setFirebaseCookie('id_token', idToken);\n      })\n      .catch(function(error) {});\n  };\n\n  logout = async () => {\n    return new Promise((resolve, reject) => {\n      try {\n        firebaseAuth()\n          .signOut()\n          .then(() => {\n            resolve(true);\n          });\n      } catch (error) {\n        reject(false);\n      }\n    });\n  };\n\n  isAuthenticated = async () => {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = firebaseAuth().onAuthStateChanged(\n        authUser => {\n          resolve(authUser);\n          unsubscribe();\n        },\n\n        error => reject(error)\n      );\n    });\n  };\n\n  getCurrentUser = async () => {\n    return firebaseAuth().currentUser;\n  };\n}\n\nexport default new AuthHelper();\n"]},"metadata":{},"sourceType":"module"}