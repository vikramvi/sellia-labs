{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { CURRENCY } from '../../../Config';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_ALL_POST } from 'core/graphql/AllPost.query';\nimport { RECENT_POST_PAGE, SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { PostLoader } from '../../../components/Placeholder';\nimport PostCard from '../../../components/PostCard';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport Box from 'reusecore/src/elements/Box';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\nexport default function RecentPost() {\n  // QUERY SECTION\n  let QUERY_VARIABLES = {\n    LIMIT: 8\n  };\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_ALL_POST, {\n    variables: QUERY_VARIABLES\n  }); // Error Rendering.\n\n  if (error) return __jsx(OnError, null); // Extract Post Data\n\n  const recentPosts = data && data.posts ? data.posts.data : []; // Post Loop Control Area\n\n  const renderRecentPost = item => {\n    const {\n      title,\n      slug,\n      price,\n      image: {\n        url,\n        largeUrl\n      }\n    } = item;\n    return __jsx(Link, {\n      href: `${SINGLE_POST_PAGE}/[slug]`,\n      as: `${SINGLE_POST_PAGE}/${slug}`\n    }, __jsx(\"a\", null, __jsx(PostCard, {\n      currency: CURRENCY,\n      title: title,\n      price: price,\n      imageSrc: [url, largeUrl]\n    })));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  }, __jsx(Heading, {\n    content: \"Recently Uploaded\",\n    mb: 0,\n    fontSize: 20,\n    fontWeight: 600\n  }), __jsx(Link, {\n    href: RECENT_POST_PAGE\n  }, __jsx(\"a\", null, __jsx(Button, {\n    title: \"See all\",\n    color: \"#8c8c8c\",\n    fontWeight: 500,\n    variant: \"textButton\"\n  })))), __jsx(Box, {\n    mt: 20\n  }, !recentPosts ? __jsx(NoItemFound, null) : __jsx(ListGrid, {\n    data: recentPosts,\n    columnWidth: [1, 1 / 2, 1 / 3, 1 / 4],\n    limit: QUERY_VARIABLES.LIMIT,\n    component: renderRecentPost,\n    loading: loading,\n    placeholder: __jsx(PostLoader, null)\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}