{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useToggle } from '../../hooks';\nimport SwitchStyle from './switch.style';\n\nconst Switch = (_ref) => {\n  let {\n    className,\n    switchColor,\n    isChecked,\n    labelText,\n    labelPosition,\n    switchSize,\n    isMaterial,\n    barColor,\n    onChange,\n    onFocus,\n    onBlur,\n    handleOnChange\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"switchColor\", \"isChecked\", \"labelText\", \"labelPosition\", \"switchSize\", \"isMaterial\", \"barColor\", \"onChange\", \"onFocus\", \"onBlur\", \"handleOnChange\"]);\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__switch']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  handleOnChange = event => {\n    onChange(!isChecked);\n  };\n\n  const LabelField = labelText && __jsx(\"span\", {\n    className: \"reusecore__field-label\"\n  }, labelText);\n\n  const position = labelPosition || 'top';\n  return __jsx(SwitchStyle, _extends({\n    className: addAllClasses.join(' '),\n    switchColor: switchColor,\n    switchSize: switchSize,\n    barColor: barColor\n  }, props), __jsx(\"label\", null, position === 'left' || position === 'right' || position === 'top' ? LabelField : '', __jsx(\"input\", {\n    checked: isChecked,\n    onChange: handleOnChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    className: \"switch\",\n    type: \"checkbox\",\n    value: isChecked\n  }), __jsx(\"div\", null, __jsx(\"div\", null)), position === 'bottom' && LabelField));\n};\n\nSwitch.defaultProps = {\n  isChecked: false,\n  labelPosition: 'top',\n  onBlur: () => {},\n  onFocus: () => {},\n  onChange: () => {}\n};\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}