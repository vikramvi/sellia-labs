{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext, useEffect } from 'react';\nimport Icon from 'react-icons-kit';\nimport { archive } from 'react-icons-kit/ionicons/archive';\nimport { chevronRight } from 'react-icons-kit/ionicons/chevronRight';\nimport { chevronLeft } from 'react-icons-kit/ionicons/chevronLeft';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport Box from 'reusecore/src/elements/Box';\nimport Button from 'reusecore/src/elements/Button';\nimport Text from 'reusecore/src/elements/Text';\nimport LocationSearchInput from '../../../components/InputGooglePlace/altered';\nimport { withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\nimport { ADD_POST } from 'core/graphql/Mutations';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nconst MapView = withGoogleMap(props => {\n  return __jsx(GoogleMap, {\n    defaultZoom: 13,\n    center: {\n      lat: props.location.latitude,\n      lng: props.location.longitude\n    }\n  }, __jsx(Marker, {\n    position: {\n      lat: props.location.latitude,\n      lng: props.location.longitude\n    },\n    draggable: true,\n    onDragEnd: props.markerDrag\n  }));\n});\nlet imagesUrl = [];\nexport default (() => {\n  const {\n    state,\n    dispatch\n  } = useContext(AddPostContext);\n  const {\n    step,\n    adPost\n  } = state;\n  const {\n    0: btnLoading,\n    1: setBtnLoading\n  } = useState(false);\n  const [postMutation, {\n    data\n  }] = useMutation(ADD_POST);\n\n  const handleLocation = (latlng, selected) => {\n    let locationObject = {\n      lat: false,\n      lng: false,\n      formattedAddress: ''\n    };\n\n    const location = _objectSpread({}, locationObject, {\n      lat: latlng.lat,\n      lng: latlng.lng,\n      formattedAddress: selected\n    });\n\n    dispatch({\n      type: 'UPDATE_ADPOST',\n      payload: {\n        key: 'location',\n        value: location\n      }\n    });\n  };\n\n  const handleAddress = () => {};\n\n  const handleDraftingPost = async () => {\n    await AuthHelper.refreshToken();\n    setBtnLoading(true);\n\n    if (adPost.localGallery.length) {\n      imagesUrl = await uploadMultipleImages(adPost.localGallery);\n\n      if (imagesUrl && imagesUrl.length > 0) {\n        dispatch({\n          type: 'UPDATE_FULL_ADPOST',\n          payload: {\n            gallery: adPost.gallery.concat(imagesUrl[0]),\n            image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n            localImage: {},\n            localGallery: []\n          }\n        });\n      }\n    } else {\n      try {\n        const data = await postMutation({\n          variables: {\n            post: finalData\n          }\n        });\n        setBtnLoading(false);\n\n        if (!adPost.id) {\n          dispatch({\n            type: 'UPDATE_ADPOST',\n            payload: {\n              key: 'id',\n              value: data.data.addPost.id\n            }\n          });\n        }\n      } catch (error) {\n        setBtnLoading(false);\n      }\n    }\n  };\n\n  const {\n    preImage,\n    preGallery,\n    localImage,\n    localGallery,\n    location\n  } = adPost,\n        prossedAdPostData = _objectWithoutProperties(adPost, [\"preImage\", \"preGallery\", \"localImage\", \"localGallery\", \"location\"]);\n\n  let finalData = prossedAdPostData;\n\n  if (location && location.lat) {\n    finalData = _objectSpread({}, prossedAdPostData, {\n      location\n    });\n  }\n\n  useEffect(() => {\n    (async function () {\n      if (imagesUrl.length) {\n        try {\n          const data = await postMutation({\n            variables: {\n              post: finalData\n            }\n          });\n          setBtnLoading(false);\n\n          if (!adPost.id) {\n            dispatch({\n              type: 'UPDATE_ADPOST',\n              payload: {\n                key: 'id',\n                value: data.data.addPost.id\n              }\n            });\n          }\n        } catch (error) {\n          setBtnLoading(false);\n        }\n      }\n    })();\n  }, [prossedAdPostData.gallery]);\n  let latlng = {\n    latitude: 22.5104166,\n    longitude: 88.37109750000002\n  };\n\n  if (adPost.location != null) {\n    latlng = {\n      latitude: adPost.location.lat,\n      longitude: adPost.location.lng\n    };\n  }\n\n  const markerDrag = async marker => {\n    var geocoder = new google.maps.Geocoder();\n    latlng = {\n      lat: Number(marker.latLng.lat().toFixed(4)),\n      lng: Number(marker.latLng.lng().toFixed(4))\n    };\n    geocoder.geocode({\n      latLng: latlng\n    }, function (results, status) {\n      if (results[0] && results[0].formatted_address) {\n        const location = {\n          lat: latlng.lat,\n          lng: latlng.lng,\n          formattedAddress: results[0].formatted_address\n        };\n        dispatch({\n          type: 'UPDATE_ADPOST',\n          payload: {\n            key: 'location',\n            value: location\n          }\n        });\n      }\n    });\n  };\n\n  const handleChange = address => {\n    dispatch({\n      type: 'UPDATE_ADPOST',\n      payload: {\n        key: 'location',\n        value: _objectSpread({}, adPost.location, {\n          formattedAddress: address\n        })\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Text, {\n    content: \"Enter your location\",\n    pb: 20,\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  }), __jsx(LocationSearchInput, {\n    address: adPost.location && adPost.location.formattedAddress ? adPost.location.formattedAddress : '',\n    handleChange: handleChange,\n    handleAddress: handleAddress,\n    handleLocation: handleLocation\n  }), __jsx(MapView, {\n    containerElement: __jsx(\"div\", {\n      style: {\n        height: `195px`,\n        marginTop: '8px'\n      }\n    }),\n    mapElement: __jsx(\"div\", {\n      style: {\n        height: `100%`\n      }\n    }),\n    location: latlng,\n    markerDrag: marker => markerDrag(marker)\n  }), __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\",\n    mt: 40\n  }, __jsx(Button, {\n    title: \"Save\",\n    iconPosition: \"left\",\n    icon: __jsx(Icon, {\n      icon: archive,\n      size: 18,\n      color: \"#8C8C8C\"\n    }),\n    onClick: handleDraftingPost,\n    variant: \"textButton\",\n    isLoading: btnLoading\n  }), __jsx(Button, {\n    title: \"Previous\",\n    iconPosition: \"left\",\n    onClick: () => dispatch({\n      type: 'UPDATE_STEP',\n      payload: {\n        step: step - 1\n      }\n    }),\n    disabled: btnLoading,\n    icon: __jsx(Icon, {\n      icon: chevronLeft,\n      size: 14,\n      color: \"#8C8C8C\"\n    }),\n    variant: \"textButton\",\n    mr: 30,\n    ml: \"auto\"\n  }), __jsx(Button, {\n    title: \"Next\",\n    iconPosition: \"right\",\n    disabled: adPost.location == null || btnLoading,\n    onClick: () => dispatch({\n      type: 'UPDATE_STEP',\n      payload: {\n        step: step + 1\n      }\n    }),\n    icon: __jsx(Icon, {\n      icon: chevronRight,\n      size: 21,\n      color: \"#ffffff\"\n    }),\n    style: {\n      backgroundColor: adPost.location == null || btnLoading ? '#e2e2e2' : '#30C56D'\n    }\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}