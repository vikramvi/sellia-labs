{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { PostLoader } from '../../components/Placeholder';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_FAVOURITE_POST } from 'core/graphql/Profile.query';\nimport { CURRENCY } from '../../Config';\nimport { withRouter } from 'next/router';\nimport PostCard from '../../components/PostCard';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\nexport default withRouter(function FavouritePost(_ref) {\n  var username = _ref.router.query.username;\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      paginate = _useState2[1]; // QUERY SECTION\n\n\n  var QUERY_VARIABLES;\n  QUERY_VARIABLES = {\n    USERNAME: username,\n    LIMIT: 12\n  };\n\n  var _useQuery = useQuery(GET_FAVOURITE_POST, {\n    variables: QUERY_VARIABLES\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore;\n\n  var favouritePosts = data && data.author && data.author.favourite && data.author.favourite.data ? data.author.favourite.data : [];\n  var favouritePostCount = data && data.author && data.author.favourite ? data.author.favourite.total : 0;\n  var totalPost = favouritePostCount; // this line will be removed by GET ALL POST\n\n  var postCount = favouritePosts.length;\n  if (error) return __jsx(OnError, null); // Post Loop Control Area\n\n  return __jsx(Grid, {\n    style: {\n      paddingLeft: 15,\n      paddingRight: 15\n    }\n  }, !loading && favouritePosts.length === 0 ? __jsx(NoItemFound, null) : __jsx(ListGrid, {\n    data: favouritePosts,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: ['100%', '50%', '33.33%', '25%'],\n    component: function component(item) {\n      var postImg = item.image ? item.image.url : '';\n      var postFallbackImage = item.image ? item.image.largeUrl : '';\n      return __jsx(Link, {\n        href: \"\".concat(SINGLE_POST_PAGE, \"/\").concat(item.slug)\n      }, __jsx(\"a\", null, __jsx(PostCard, {\n        currency: CURRENCY,\n        title: item.title,\n        price: item.price,\n        imageSrc: [postImg, postFallbackImage]\n      })));\n    },\n    loading: loading ? loading : loadingMore,\n    placeholder: __jsx(PostLoader, null),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: function handleLoadMore(loading) {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: function updateQuery(prev, _ref2) {\n          var fetchMoreResult = _ref2.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          var oldPosts = prev.author.favourite.data;\n          var newPosts = fetchMoreResult.author.favourite.data;\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              var concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.author.favourite.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    }\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}