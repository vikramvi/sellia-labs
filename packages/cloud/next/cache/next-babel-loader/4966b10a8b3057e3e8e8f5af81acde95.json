{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { withFormik } from 'formik';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport ChangeProfilePicture from './UploadImage';\nimport { openModal } from '@redq/reuse-modal';\nimport SuccessModal from '../../../containers/ModalContainer/SuccessModal';\nimport Alert from 'reusecore/src/elements/Alert';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport { GET_AUTHOR } from 'core/graphql/Author';\nvar imagesUrl = [];\nvar EditProfileEnhancher = withFormik({\n  enableReinitialize: 'true',\n  mapPropsToValues: function mapPropsToValues(props) {\n    var author = props.author,\n        loading = props.loading;\n    var name = !loading && author && author.name ? author.name : '';\n    var website = !loading && author && author.website ? author.website : '';\n    var address = !loading && author && author.address ? author.address : '';\n    return {\n      name: name,\n      address: address,\n      website: website\n    };\n  },\n  displayName: 'EditProfileForm' // helps with React DevTools\n\n});\n\nvar EditProfile = function EditProfile(props) {\n  var _useState = useState(null),\n      localImage = _useState[0],\n      setImage = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      btnLoading = _useState3[0],\n      setBtnLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploadRejected = _useState4[0],\n      setUploadRejected = _useState4[1];\n\n  var values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      handleChange = props.handleChange,\n      setFieldValue = props.setFieldValue,\n      loading = props.loading,\n      author = props.author;\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!values.image) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.prev = 1;\n              _context.next = 4;\n              return addAuthor({\n                variables: {\n                  author: _objectSpread(_objectSpread({}, author), values)\n                }\n              });\n\n            case 4:\n              setBtnLoading(false);\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              setError(_context.t0.graphQLErrors[0].message);\n              setBtnLoading(false);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 7]]);\n    }))();\n  }, [values.image]);\n\n  var onPreviewDrop = function onPreviewDrop(images) {\n    setUploadRejected(false);\n    images.map(function (image) {\n      image.preview = URL.createObjectURL(image);\n    });\n\n    if (images.length) {\n      setImage(images[0]);\n    }\n  };\n\n  var onDropRejected = function onDropRejected() {\n    setUploadRejected(true);\n  };\n\n  var avatar;\n\n  if (!loading && author && author.image && author.image.largeUrl) {\n    avatar = {\n      preview: author.image.largeUrl\n    };\n  }\n\n  if (localImage !== null) {\n    avatar = localImage;\n  }\n\n  var handlesSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setBtnLoading(true);\n              _context2.next = 3;\n              return AuthHelper.refreshToken();\n\n            case 3:\n              if (!localImage) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 6;\n              return uploadMultipleImages([localImage]);\n\n            case 6:\n              imagesUrl = _context2.sent;\n              setFieldValue('image', imagesUrl[0][0]);\n              _context2.next = 21;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.next = 13;\n              return addAuthor({\n                variables: {\n                  author: _objectSpread(_objectSpread({}, author), values)\n                }\n              });\n\n            case 13:\n              setBtnLoading(false);\n              if (error != '') openModal({\n                config: {\n                  disableDragging: false,\n                  minHeight: 'auto',\n                  size: {\n                    width: 350,\n                    height: 260\n                  },\n                  enableResizing: {\n                    bottom: true,\n                    bottomLeft: true,\n                    bottomRight: true,\n                    left: true,\n                    right: true,\n                    top: true,\n                    topLeft: true,\n                    topRight: true\n                  }\n                },\n                modalClass: 'customModal',\n                closeOnClickOutside: true,\n                component: SuccessModal\n              });\n              _context2.next = 21;\n              break;\n\n            case 17:\n              _context2.prev = 17;\n              _context2.t0 = _context2[\"catch\"](10);\n              setBtnLoading(false);\n              setError(_context2.t0.graphQLErrors[0].message);\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[10, 17]]);\n    }));\n\n    return function handlesSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _useMutation = useMutation(UPDATE_AUTHOR),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addAuthor = _useMutation2[0];\n\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Profile Setting\",\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600\n  }), uploadRejected && __jsx(Alert, {\n    colors: \"error\",\n    mb: 30\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, \"Maximum upload size 1MB\")), __jsx(ChangeProfilePicture, {\n    onPreviewDrop: onPreviewDrop,\n    proPic: avatar,\n    maxSize: 1024000,\n    onDropRejected: onDropRejected\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Name\",\n    changed: handleChange('name'),\n    value: values.name,\n    error: errors.name,\n    touched: touched\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Address\",\n    changed: handleChange('address'),\n    value: values.address,\n    error: errors.address,\n    touched: touched\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Web\",\n    changed: handleChange('website'),\n    value: values.website,\n    error: errors.website,\n    touched: touched\n  }), __jsx(Button, {\n    onClick: handlesSubmit,\n    title: \"Save Changes\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 10,\n    width: 1,\n    isLoading: btnLoading,\n    loaderColor: \"#ffffff\",\n    iconPosition: \"left\"\n  }));\n};\n\nexport default EditProfileEnhancher(EditProfile);","map":null,"metadata":{},"sourceType":"module"}