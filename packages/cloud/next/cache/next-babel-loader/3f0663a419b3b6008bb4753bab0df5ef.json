{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Router from 'next/router';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport Icon from 'react-icons-kit';\nimport { locked } from 'react-icons-kit/iconic/locked';\nimport { phone } from 'react-icons-kit/iconic/phone';\nimport Switch from 'reusecore/src/elements/Switch';\nimport Text from 'reusecore/src/elements/Text';\nimport Button from 'reusecore/src/elements/Button';\nimport AuthHeader from '../../components/AuthHeader';\nimport Input from '../../components/Input';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from './style';\nimport { LOGIN } from 'core/graphql/Mutations';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../helpers/authHelper';\nimport { setFirebaseCookie } from '../../helpers/session';\nimport redirect from '../../helpers/redirect';\nconst SignInEnhancher = withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: props => ({\n    email: '',\n    password: '',\n    remember: false\n  }),\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Invalid email address').required('Email is required!'),\n    password: Yup.string().required('Password is required')\n  })\n});\nlet token = '';\n\nconst SignInForm = ({\n  handleSubmit,\n  values,\n  handleChange,\n  touched,\n  errors,\n  setFieldValue,\n  handleBlur\n}) => {\n  const {\n    0: error,\n    1: setError\n  } = useState({});\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const handleCheckboxChange = checked => {\n    setFieldValue('remember', checked);\n  };\n\n  const [loginMutation, {\n    data\n  }] = useMutation(LOGIN);\n\n  handleSubmit = async () => {\n    setLoading(true);\n\n    if (!_Object$keys(errors).length) {\n      const {\n        email,\n        password\n      } = values;\n      const provider = 'password';\n      const {\n        user,\n        error\n      } = await AuthHelper.login(provider, email, password);\n\n      if (user) {\n        token = await user.getIdToken();\n        setFieldValue('token', token);\n      } else if (error) {\n        setLoading(false);\n        setError(error);\n      }\n    } else {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    (async function () {\n      try {\n        if (values.token) {\n          const res = await loginMutation({\n            variables: {\n              user: {\n                email: values.email,\n                token: values.token\n              }\n            }\n          });\n\n          if (res && res.data && res.data.login) {\n            setLoading(false);\n            const user = res.data.login;\n            setFirebaseCookie('id_token', values.token);\n            setFirebaseCookie('user', _objectSpread({}, user));\n            redirect({}, '/');\n          }\n        }\n      } catch (error) {\n        setLoading(false);\n        return error;\n      }\n    })();\n  }, [values.token]);\n  return __jsx(React.Fragment, null, __jsx(AuthHeader, null), __jsx(FormGroup, {\n    className: errors.email ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'email',\n      required: 'required'\n    },\n    onBlur: handleBlur('email'),\n    value: values.email,\n    error: errors.email,\n    touched: touched,\n    label: \"Email\",\n    changed: handleChange('email')\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.email && touched.email && errors.email)), __jsx(FormGroup, {\n    className: errors.password ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    onBlur: handleBlur('password'),\n    value: values.password,\n    error: errors.password,\n    touched: touched,\n    label: \"Password\",\n    changed: handleChange('password')\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.password && touched.password && errors.password)), error.message ? __jsx(Box, {\n    flexBox: true,\n    mt: 25,\n    mb: 35,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(ErrorNotification, null, error.message)) : '', __jsx(Button //disabled={errors.length !== 0}\n  , {\n    onClick: handleSubmit,\n    isLoading: loading,\n    loaderColor: \"#fff\",\n    title: \"Sign in now\",\n    width: 1,\n    icon: __jsx(Icon, {\n      icon: locked,\n      size: 16\n    })\n  }), __jsx(Text, {\n    fontSize: 14,\n    color: \"#8C8C8C\",\n    content: \"Or\",\n    textAlign: \"center\",\n    mt: 16\n  }), __jsx(Button, {\n    title: \"Sign in with\",\n    bg: \"#5CABE6\",\n    width: 1,\n    icon: __jsx(Icon, {\n      icon: phone,\n      size: 16\n    }),\n    onClick: () => Router.push('/mobile-signin')\n  }), __jsx(Box, {\n    flexBox: true,\n    mb: 25,\n    mt: 25,\n    justifyContent: \"center\"\n  }, __jsx(Button, {\n    fontSize: 12,\n    title: \"Forgot Password ?\",\n    variant: \"textButton\",\n    onClick: () => Router.push('/forget-password'),\n    style: {\n      minHeight: 'auto'\n    }\n  })), __jsx(Box, {\n    flexBox: true,\n    mt: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\"\n  }, __jsx(Text, {\n    color: \"#8C8C8C\",\n    content: \"Don't have an account?\",\n    mb: \"5px\"\n  }), __jsx(Button, {\n    title: \"Sign Up\",\n    ml: \"5px\",\n    mb: \"5px\",\n    variant: \"textButton\",\n    onClick: () => Router.push('/signup'),\n    style: {\n      minHeight: 'auto'\n    }\n  })));\n};\n\nexport default SignInEnhancher(SignInForm);","map":null,"metadata":{},"sourceType":"module"}