{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport { withFormik } from 'formik';\nimport AuthHelper from '../../../helpers/authHelper';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from '../../SignInForm/style';\nconst ResetPassEnhancer = withFormik({\n  mapPropsToValues: props => ({\n    currentPass: '',\n    newPass: '',\n    confirmPass: ''\n  }),\n  validationSchema: Yup.object().shape({\n    currentPass: Yup.string().required('Current Password is required!'),\n    newPass: Yup.string().required('New Password is required'),\n    confirmPass: Yup.string().oneOf([Yup.ref('newPass'), null], \"Password don't match\").required('Password Confirm is required')\n  })\n});\n\nconst ResetPass = ({\n  values,\n  touched,\n  errors,\n  handleChange,\n  handleSubmit,\n  handleBlur\n}) => {\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: isSubmitted,\n    1: setIssubmit\n  } = useState(false);\n\n  handleSubmit = async () => {\n    setIssubmit(true);\n\n    if (_Object$keys(errors).length !== 0) {\n      return;\n    }\n\n    const hasPasswordReset = await AuthHelper.changePassword(values.currentPass, values.newPass);\n\n    if (hasPasswordReset && !hasPasswordReset.error) {\n      setMessage('Password Reset Successful!');\n    } else if (hasPasswordReset.error) {\n      setMessage(hasPasswordReset.error.message);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Password Setting\",\n    pb: 32,\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600\n  }), __jsx(FormGroup, {\n    className: errors.currentPass ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    onBlur: handleBlur('currentPass'),\n    label: \"Current Password\",\n    changed: handleChange('currentPass'),\n    secureTextEntry: true,\n    value: values.currentPass,\n    error: errors.currentPass,\n    touched: touched\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.currentPass && touched.currentPass || isSubmitted && errors.currentPass ? errors.currentPass : null)), __jsx(FormGroup, {\n    className: errors.newPass ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    label: \"New Password\",\n    changed: handleChange('newPass'),\n    secureTextEntry: true,\n    onBlur: handleBlur('newPass'),\n    value: values.newPass,\n    secureTextEntry: true,\n    error: errors.newPass,\n    touched: touched\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.newPass && touched.newPass || isSubmitted && errors.newPass ? errors.newPass : null)), __jsx(FormGroup, {\n    className: errors.confirmPass ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    label: \"Confirm Password\",\n    changed: handleChange('confirmPass'),\n    onBlur: handleBlur('confirmPass'),\n    secureTextEntry: true,\n    value: values.confirmPass,\n    secureTextEntry: true,\n    error: errors.confirmPass,\n    touched: touched\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.confirmPass && touched.confirmPass || isSubmitted && errors.confirmPass ? errors.confirmPass : null)), message ? __jsx(Box, {\n    flexBox: true,\n    mt: 20,\n    mb: 15,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(ErrorNotification, null, message)) : '', __jsx(Button, {\n    onClick: handleSubmit // disabled={Object.keys(errors).length !== 0}\n    ,\n    title: \"Save Changes\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1,\n    mt: 10\n  }));\n};\n\nexport default ResetPassEnhancer(ResetPass);","map":null,"metadata":{},"sourceType":"module"}