{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport { withFormik } from 'formik';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport Input from '../../../components/Input';\nimport MobileNumberList from './MobileNumberList';\nimport { useMutation } from '@apollo/react-hooks';\nimport { GET_VERIFICATION_CODE, VERIFY_CODE, UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport AuthHelper from '../../../helpers/authHelper';\nvar MobileNumbersEnhancer = withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    var author = props.author,\n        loading = props.loading;\n    var mobile = !loading && author && author.mobile && author.mobile.length ? author.mobile : [];\n    var number = '';\n    var code = '';\n    return {\n      mobile: mobile,\n      number: number,\n      code: code\n    };\n  },\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props = _ref.props,\n        setSubmitting = _ref.setSubmitting;\n  }\n});\n\nvar Recaptcha = function Recaptcha() {\n  useEffect(function () {\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha');\n    window.recaptchaVerifier.render().then(function (widgetId) {\n      window.recaptchaWidgetId = widgetId;\n    });\n  }, []);\n  return __jsx(\"div\", {\n    id: \"recaptcha\"\n  });\n};\n\nvar AddMobileNumber = function AddMobileNumber(_ref2) {\n  var values = _ref2.values,\n      touched = _ref2.touched,\n      handleChange = _ref2.handleChange,\n      handleSubmit = _ref2.handleSubmit,\n      userInfo = _ref2.userInfo,\n      showModal = _ref2.showModal,\n      author = _ref2.author,\n      setFieldValue = _ref2.setFieldValue,\n      loading = _ref2.loading;\n\n  var _useState = useState({\n    confirmResult: false,\n    isMobileVerified: false,\n    wrongCode: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useMutation = useMutation(UPDATE_AUTHOR),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      handleAuthorMutation = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  var confirmResult = state.confirmResult,\n      isMobileVerified = state.isMobileVerified,\n      wrongCode = state.wrongCode;\n\n  var HandleStoringMobileNumber =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return AuthHelper.refreshToken();\n\n            case 2:\n              _context.next = 4;\n              return handleAuthorMutation({\n                variables: {\n                  author: _objectSpread({}, author, {\n                    mobile: values.mobile\n                  })\n                }\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function HandleStoringMobileNumber() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleRemove =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(item) {\n      var mobileNumber, index;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return AuthHelper.refreshToken();\n\n            case 2:\n              mobileNumber = values.mobile;\n              index = mobileNumber.indexOf(item);\n\n              if (index > -1) {\n                mobileNumber.splice(index, 1);\n              }\n\n              setFieldValue('mobile', mobileNumber);\n              _context2.next = 8;\n              return handleAuthorMutation({\n                variables: {\n                  author: _objectSpread({}, author, {\n                    mobile: values.mobile\n                  })\n                }\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleRemove(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleGetVerificationCode =\n  /*#__PURE__*/\n  function () {\n    var _ref5 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var confirmResult;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return AuthHelper.login('phone', null, null, values.number);\n\n            case 2:\n              confirmResult = _context3.sent;\n              setState(_objectSpread({}, state, {\n                confirmResult: confirmResult\n              }));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleGetVerificationCode() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var handleVerifyCode =\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var mobileNumbers, isVerified;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              mobileNumbers = values.mobile;\n              _context4.prev = 1;\n              _context4.next = 4;\n              return AuthHelper.confirmVerification(state.confirmResult, values.code);\n\n            case 4:\n              isVerified = _context4.sent;\n\n              if (!isVerified.error) {\n                setState(_objectSpread({}, state, {\n                  isMobileVerified: true\n                }));\n                mobileNumbers.push({\n                  number: values.number\n                });\n                setFieldValue('mobile', mobileNumbers);\n              } else {\n                setState(_objectSpread({}, state, {\n                  wrongCode: true\n                }));\n              }\n\n              _context4.next = 12;\n              break;\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.error(_context4.t0);\n              setState(_objectSpread({}, state, {\n                wrongCode: true\n              }));\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 8]]);\n    }));\n\n    return function handleVerifyCode() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Mobile Number Settings\",\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600,\n    mb: 30\n  }), values.mobile && __jsx(MobileNumberList, {\n    items: values.mobile,\n    handleRemoveMobile: function handleRemoveMobile(item) {\n      return handleRemove(item);\n    }\n  }), !confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Enter Number(ex. +30*********)\",\n    changed: handleChange('number'),\n    value: values.number,\n    touched: touched\n  }), __jsx(Recaptcha, null), __jsx(Button, {\n    onClick: handleGetVerificationCode,\n    title: \"Send Verification Code\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 30,\n    width: 1\n  })) : null, !isMobileVerified && confirmResult ? __jsx(React.Fragment, null, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Verify Code\",\n    changed: handleChange('code'),\n    value: values.code,\n    touched: touched\n  }), __jsx(Button, {\n    onClick: handleVerifyCode,\n    title: \"Verify Code\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1\n  })) : null, isMobileVerified ? __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: {\n      color: '#30C56D',\n      textAlign: 'center'\n    }\n  }, \"Your number is verified!\"), __jsx(Button, {\n    onClick: HandleStoringMobileNumber,\n    title: \"Save Mobile Number\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 30,\n    width: 1\n  })) : '', !isMobileVerified && wrongCode ? __jsx(\"p\", {\n    style: {\n      color: '#EF5A5A',\n      textAlign: 'center'\n    }\n  }, \"Invalid code!\") : '');\n};\n\nexport default MobileNumbersEnhancer(AddMobileNumber);","map":null,"metadata":{},"sourceType":"module"}