{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport Icon from 'react-icons-kit';\nimport { archive } from 'react-icons-kit/ionicons/archive';\nimport { chevronRight } from 'react-icons-kit/ionicons/chevronRight';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport Box from 'reusecore/src/elements/Box';\nimport Button from 'reusecore/src/elements/Button';\nimport { chevronLeft } from 'react-icons-kit/ionicons/chevronLeft';\nimport Text from 'reusecore/src/elements/Text';\nimport Input from '../../../components/Input';\nimport { ADD_POST } from 'core/graphql/Mutations';\nimport AsyncSelect from 'react-select/async';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { GET_CATEGORIES_FOR_DROPDOWN } from 'core/graphql/Category.query';\nconst colourStyles = {\n  control: () => ({\n    display: 'flex',\n    backgroundColor: 'transparent',\n    color: '#8c8c8c',\n    border: '0',\n    borderBottom: '1px solid #e2e2e2'\n  }),\n  valueContainer: base => _objectSpread(_objectSpread({}, base), {}, {\n    padding: '0'\n  }),\n  placeholder: () => ({\n    color: '#8c8c8c'\n  }),\n  indicatorSeparator: () => ({\n    display: 'none'\n  }),\n  input: () => ({\n    color: '#8c8c8c'\n  }),\n  dropdownIndicator: () => ({\n    padding: '8px 0'\n  })\n};\nlet imagesUrl = [];\n\nconst CategoryAndDetailInfo = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(AddPostContext);\n  const {\n    0: btnLoading,\n    1: setBtnLoading\n  } = useState(false);\n  const [postMutation] = useMutation(ADD_POST);\n  const {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = useQuery(GET_CATEGORIES_FOR_DROPDOWN, {\n    variables: {\n      limit: 1000\n    }\n  });\n  const {\n    step,\n    adPost\n  } = state;\n  let options = [];\n\n  if (!loading && data.categories.data.length) {\n    data.categories.data.map((item, index) => {\n      let categoryOptions = _objectSpread(_objectSpread({}, item), {}, {\n        value: item.id,\n        label: item.name\n      });\n\n      options.push(categoryOptions);\n    });\n  }\n\n  const handleDraftingPost = async () => {\n    await AuthHelper.refreshToken();\n    setBtnLoading(true);\n\n    if (adPost.localGallery.length) {\n      imagesUrl = await uploadMultipleImages(adPost.localGallery);\n\n      if (imagesUrl && imagesUrl.length > 0) {\n        dispatch({\n          type: 'UPDATE_FULL_ADPOST',\n          payload: {\n            gallery: adPost.gallery.concat(imagesUrl[0]),\n            image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n            localImage: {},\n            localGallery: []\n          }\n        });\n      }\n    } else {\n      try {\n        const data = await postMutation({\n          variables: {\n            post: finalData\n          }\n        });\n        setBtnLoading(false);\n\n        if (!adPost.id) {\n          dispatch({\n            type: 'UPDATE_ADPOST',\n            payload: {\n              key: 'id',\n              value: data.data.addPost.id\n            }\n          });\n        }\n      } catch (error) {\n        setBtnLoading(false);\n      }\n    }\n  };\n\n  const {\n    preImage,\n    preGallery,\n    localImage,\n    localGallery,\n    location\n  } = adPost,\n        prossedAdPostData = _objectWithoutProperties(adPost, [\"preImage\", \"preGallery\", \"localImage\", \"localGallery\", \"location\"]);\n\n  let finalData = prossedAdPostData;\n\n  if (location && location.lat) {\n    finalData = _objectSpread(_objectSpread({}, prossedAdPostData), {}, {\n      location\n    });\n  }\n\n  useEffect(() => {\n    (async function () {\n      if (imagesUrl.length) {\n        try {\n          const data = await postMutation({\n            variables: {\n              post: finalData\n            }\n          });\n          setBtnLoading(false);\n\n          if (!adPost.id) {\n            dispatch({\n              type: 'UPDATE_ADPOST',\n              payload: {\n                key: 'id',\n                value: data.data.addPost.id\n              }\n            });\n          }\n        } catch (error) {\n          setBtnLoading(false);\n        }\n      }\n    })();\n  }, [prossedAdPostData.gallery]);\n\n  const loadOptions = async (fetchMore, inputValue, callback, loading) => {\n    const filteredData = options.filter(item => item.slug.includes(inputValue));\n    callback(filteredData);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Text, {\n    content: \"Select the preferred categories\",\n    pb: 20,\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  }), __jsx(AsyncSelect, {\n    isMulti: true,\n    defaultValue: adPost.categories ? adPost.categories : [],\n    defaultOptions: options,\n    styles: colourStyles,\n    loadOptions: (inputValue, callback) => loadOptions(fetchMore, inputValue, callback, loading),\n    onChange: selectedCategories => {\n      dispatch({\n        type: 'UPDATE_ADPOST',\n        payload: {\n          key: 'categories',\n          value: selectedCategories\n        }\n      });\n    }\n  }), __jsx(Input, {\n    elementType: \"textarea\",\n    rows: 4,\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Details\",\n    changed: details => dispatch({\n      type: 'UPDATE_ADPOST',\n      payload: {\n        key: 'content',\n        value: details.target.value\n      }\n    }),\n    value: adPost.content,\n    style: {\n      marginTop: 40\n    }\n  }), __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\",\n    mt: 40\n  }, __jsx(Button, {\n    title: \"Save\",\n    iconPosition: \"left\",\n    icon: __jsx(Icon, {\n      icon: archive,\n      size: 18,\n      color: \"#8C8C8C\"\n    }),\n    onClick: handleDraftingPost,\n    variant: \"textButton\",\n    isLoading: btnLoading\n  }), __jsx(Button, {\n    title: \"Previous\",\n    iconPosition: \"left\",\n    onClick: () => dispatch({\n      type: 'UPDATE_STEP',\n      payload: {\n        step: step - 1\n      }\n    }),\n    disabled: btnLoading,\n    icon: __jsx(Icon, {\n      icon: chevronLeft,\n      size: 14,\n      color: \"#8C8C8C\"\n    }),\n    variant: \"textButton\",\n    mr: 30,\n    ml: \"auto\"\n  }), __jsx(Button, {\n    title: \"Next\",\n    iconPosition: \"right\",\n    disabled: adPost.categories.length === 0 || btnLoading,\n    onClick: () => dispatch({\n      type: 'UPDATE_STEP',\n      payload: {\n        step: step + 1\n      }\n    }),\n    icon: __jsx(Icon, {\n      icon: chevronRight,\n      size: 21,\n      color: \"#ffffff\"\n    }),\n    style: {\n      backgroundColor: adPost.categories.length === 0 || btnLoading ? '#e2e2e2' : '#30C56D'\n    }\n  })));\n};\n\nexport default CategoryAndDetailInfo;","map":null,"metadata":{},"sourceType":"module"}