{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/bhavikshah/Work/headless-graphql/node_modules/reusecore/src/elements/Button/index.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonStyle from './button.style';\nimport Loader from '../Loader';\n\nvar Button = function Button(_ref) {\n  var type = _ref.type,\n      title = _ref.title,\n      icon = _ref.icon,\n      disabled = _ref.disabled,\n      iconPosition = _ref.iconPosition,\n      onClick = _ref.onClick,\n      loader = _ref.loader,\n      loaderColor = _ref.loaderColor,\n      isMaterial = _ref.isMaterial,\n      isLoading = _ref.isLoading,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, [\"type\", \"title\", \"icon\", \"disabled\", \"iconPosition\", \"onClick\", \"loader\", \"loaderColor\", \"isMaterial\", \"isLoading\", \"className\"]);\n\n  // Add all classs to an array\n  var addAllClasses = ['reusecore__button']; // isLoading prop checking\n\n  if (isLoading) {\n    addAllClasses.push('is-loading');\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Checking button loading state\n\n\n  var buttonIcon = isLoading !== false ? __jsx(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, loader ? loader : __jsx(Loader, {\n    loaderColor: loaderColor || '#30C56D',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })) : icon && __jsx(\"span\", {\n    className: \"btn-icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, icon); // set icon position\n\n  var position = iconPosition || 'right';\n  return __jsx(ButtonStyle, _extends({\n    type: type,\n    className: addAllClasses.join(' '),\n    icon: icon,\n    disabled: disabled,\n    \"icon-position\": position,\n    onClick: onClick\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), position === 'left' && buttonIcon, title && __jsx(\"span\", {\n    className: \"btn-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, title), position === 'right' && buttonIcon);\n};\n\nButton.propTypes = {\n  /** ClassName of the button */\n  className: PropTypes.string,\n\n  /** Add icon */\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n  /** Add icon */\n  icon: PropTypes.object,\n\n  /** Add loader */\n  loader: PropTypes.object,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** Button Loading state */\n  isLoading: PropTypes.bool,\n\n  /** Button Loading state */\n  loaderColor: PropTypes.string,\n\n  /** If true button will be disabled */\n  disabled: PropTypes.bool,\n\n  /** Adjust your icon and loader position [if you use loader] */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** Variant change button shape */\n  variant: PropTypes.oneOf(['textButton', 'outlined', 'fab', 'extendedFab']),\n\n  /** primary || secondary || warning || error  change text and border color.\n   *  And primaryWithBg || secondaryWithBg || warningWithBg || errorWithBg change text, border and background color */\n  colors: PropTypes.oneOf(['primary', 'secondary', 'warning', 'error', 'primaryWithBg', 'secondaryWithBg', 'warningWithBg', 'errorWithBg']),\n\n  /**\n   * Gets called when the user clicks on the button\n   */\n  onClick: PropTypes.func\n};\nButton.defaultProps = {\n  disabled: false,\n  isMaterial: false,\n  isLoading: false,\n  type: 'button'\n};\nexport default Button;","map":{"version":3,"sources":["/Users/bhavikshah/Work/headless-graphql/node_modules/reusecore/src/elements/Button/index.js"],"names":["React","Fragment","PropTypes","ButtonStyle","Loader","Button","type","title","icon","disabled","iconPosition","onClick","loader","loaderColor","isMaterial","isLoading","className","props","addAllClasses","push","buttonIcon","position","join","propTypes","string","oneOf","object","bool","variant","colors","func","defaultProps"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAaT;AAAA,MAZJC,IAYI,QAZJA,IAYI;AAAA,MAXJC,KAWI,QAXJA,KAWI;AAAA,MAVJC,IAUI,QAVJA,IAUI;AAAA,MATJC,QASI,QATJA,QASI;AAAA,MARJC,YAQI,QARJA,YAQI;AAAA,MAPJC,OAOI,QAPJA,OAOI;AAAA,MANJC,MAMI,QANJA,MAMI;AAAA,MALJC,WAKI,QALJA,WAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADDC,KACC;;AACJ;AACA,MAAMC,aAAa,GAAG,CAAC,mBAAD,CAAtB,CAFI,CAIJ;;AACA,MAAIH,SAAJ,EAAe;AACbG,IAAAA,aAAa,CAACC,IAAd,CAAmB,YAAnB;AACD,GAPG,CASJ;;;AACA,MAAIL,UAAJ,EAAgB;AACdI,IAAAA,aAAa,CAACC,IAAd,CAAmB,aAAnB;AACD,GAZG,CAcJ;;;AACA,MAAIH,SAAJ,EAAe;AACbE,IAAAA,aAAa,CAACC,IAAd,CAAmBH,SAAnB;AACD,GAjBG,CAmBJ;;;AACA,MAAMI,UAAU,GACdL,SAAS,KAAK,KAAd,GACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,MAAM,GAAGA,MAAH,GAAY,MAAC,MAAD;AAAQ,IAAA,WAAW,EAAEC,WAAW,IAAI,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADrB,CADF,GAKEL,IAAI,IAAI;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,IAA5B,CANZ,CApBI,CA6BJ;;AACA,MAAMa,QAAQ,GAAGX,YAAY,IAAI,OAAjC;AAEA,SACE,MAAC,WAAD;AACE,IAAA,IAAI,EAAEJ,IADR;AAEE,IAAA,SAAS,EAAEY,aAAa,CAACI,IAAd,CAAmB,GAAnB,CAFb;AAGE,IAAA,IAAI,EAAEd,IAHR;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAKE,qBAAeY,QALjB;AAME,IAAA,OAAO,EAAEV;AANX,KAOMM,KAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASGI,QAAQ,KAAK,MAAb,IAAuBD,UAT1B,EAUGb,KAAK,IAAI;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,KAA5B,CAVZ,EAWGc,QAAQ,KAAK,OAAb,IAAwBD,UAX3B,CADF;AAeD,CA5DD;;AA8DAf,MAAM,CAACkB,SAAP,GAAmB;AACjB;AACAP,EAAAA,SAAS,EAAEd,SAAS,CAACsB,MAFJ;;AAIjB;AACAlB,EAAAA,IAAI,EAAEJ,SAAS,CAACuB,KAAV,CAAgB,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,CAAhB,CALW;;AAOjB;AACAjB,EAAAA,IAAI,EAAEN,SAAS,CAACwB,MARC;;AAUjB;AACAd,EAAAA,MAAM,EAAEV,SAAS,CAACwB,MAXD;;AAajB;AACAZ,EAAAA,UAAU,EAAEZ,SAAS,CAACyB,IAdL;;AAgBjB;AACAZ,EAAAA,SAAS,EAAEb,SAAS,CAACyB,IAjBJ;;AAmBjB;AACAd,EAAAA,WAAW,EAAEX,SAAS,CAACsB,MApBN;;AAsBjB;AACAf,EAAAA,QAAQ,EAAEP,SAAS,CAACyB,IAvBH;;AAyBjB;AACAjB,EAAAA,YAAY,EAAER,SAAS,CAACuB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CA1BG;;AA4BjB;AACAG,EAAAA,OAAO,EAAE1B,SAAS,CAACuB,KAAV,CAAgB,CAAC,YAAD,EAAe,UAAf,EAA2B,KAA3B,EAAkC,aAAlC,CAAhB,CA7BQ;;AA+BjB;;AAEAI,EAAAA,MAAM,EAAE3B,SAAS,CAACuB,KAAV,CAAgB,CACtB,SADsB,EAEtB,WAFsB,EAGtB,SAHsB,EAItB,OAJsB,EAKtB,eALsB,EAMtB,iBANsB,EAOtB,eAPsB,EAQtB,aARsB,CAAhB,CAjCS;;AA4CjB;;;AAGAd,EAAAA,OAAO,EAAET,SAAS,CAAC4B;AA/CF,CAAnB;AAkDAzB,MAAM,CAAC0B,YAAP,GAAsB;AACpBtB,EAAAA,QAAQ,EAAE,KADU;AAEpBK,EAAAA,UAAU,EAAE,KAFQ;AAGpBC,EAAAA,SAAS,EAAE,KAHS;AAIpBT,EAAAA,IAAI,EAAE;AAJc,CAAtB;AAOA,eAAeD,MAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonStyle from './button.style';\nimport Loader from '../Loader';\n\nconst Button = ({\n  type,\n  title,\n  icon,\n  disabled,\n  iconPosition,\n  onClick,\n  loader,\n  loaderColor,\n  isMaterial,\n  isLoading,\n  className,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__button'];\n\n  // isLoading prop checking\n  if (isLoading) {\n    addAllClasses.push('is-loading');\n  }\n\n  // isMaterial prop checking\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  }\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // Checking button loading state\n  const buttonIcon =\n    isLoading !== false ? (\n      <Fragment>\n        {loader ? loader : <Loader loaderColor={loaderColor || '#30C56D'} />}\n      </Fragment>\n    ) : (\n      icon && <span className=\"btn-icon\">{icon}</span>\n    );\n\n  // set icon position\n  const position = iconPosition || 'right';\n\n  return (\n    <ButtonStyle\n      type={type}\n      className={addAllClasses.join(' ')}\n      icon={icon}\n      disabled={disabled}\n      icon-position={position}\n      onClick={onClick}\n      {...props}\n    >\n      {position === 'left' && buttonIcon}\n      {title && <span className=\"btn-text\">{title}</span>}\n      {position === 'right' && buttonIcon}\n    </ButtonStyle>\n  );\n};\n\nButton.propTypes = {\n  /** ClassName of the button */\n  className: PropTypes.string,\n\n  /** Add icon */\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n  /** Add icon */\n  icon: PropTypes.object,\n\n  /** Add loader */\n  loader: PropTypes.object,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** Button Loading state */\n  isLoading: PropTypes.bool,\n\n  /** Button Loading state */\n  loaderColor: PropTypes.string,\n\n  /** If true button will be disabled */\n  disabled: PropTypes.bool,\n\n  /** Adjust your icon and loader position [if you use loader] */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** Variant change button shape */\n  variant: PropTypes.oneOf(['textButton', 'outlined', 'fab', 'extendedFab']),\n\n  /** primary || secondary || warning || error  change text and border color.\n   *  And primaryWithBg || secondaryWithBg || warningWithBg || errorWithBg change text, border and background color */\n  colors: PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'warning',\n    'error',\n    'primaryWithBg',\n    'secondaryWithBg',\n    'warningWithBg',\n    'errorWithBg'\n  ]),\n\n  /**\n   * Gets called when the user clicks on the button\n   */\n  onClick: PropTypes.func\n};\n\nButton.defaultProps = {\n  disabled: false,\n  isMaterial: false,\n  isLoading: false,\n  type: 'button'\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}