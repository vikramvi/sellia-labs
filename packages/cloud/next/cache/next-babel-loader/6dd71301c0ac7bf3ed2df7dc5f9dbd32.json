{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/bhavikshah/Work/headless-graphql/packages/web/containers/AccountSetting/EditProfile/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { withFormik } from 'formik';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport ChangeProfilePicture from './UploadImage';\nimport { openModal } from '@redq/reuse-modal';\nimport SuccessModal from '../../../containers/ModalContainer/SuccessModal';\nimport Alert from 'reusecore/src/elements/Alert';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport { GET_AUTHOR } from 'core/graphql/Author';\nlet imagesUrl = [];\nconst EditProfileEnhancher = withFormik({\n  enableReinitialize: 'true',\n  mapPropsToValues: props => {\n    const {\n      author,\n      loading\n    } = props;\n    const name = !loading && author && author.name ? author.name : '';\n    const website = !loading && author && author.website ? author.website : '';\n    const address = !loading && author && author.address ? author.address : '';\n    return {\n      name,\n      address,\n      website\n    };\n  },\n  displayName: 'EditProfileForm' // helps with React DevTools\n\n});\n\nconst EditProfile = props => {\n  const {\n    0: localImage,\n    1: setImage\n  } = useState(null);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: btnLoading,\n    1: setBtnLoading\n  } = useState(false);\n  const {\n    0: uploadRejected,\n    1: setUploadRejected\n  } = useState(false);\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    setFieldValue,\n    loading,\n    author\n  } = props;\n  useEffect(() => {\n    (async function () {\n      if (values.image) {\n        try {\n          await addAuthor({\n            variables: {\n              author: _objectSpread({}, author, values)\n            }\n          });\n          setBtnLoading(false);\n        } catch (error) {\n          setError(error.graphQLErrors[0].message);\n          setBtnLoading(false);\n        }\n      }\n    })();\n  }, [values.image]);\n\n  const onPreviewDrop = images => {\n    setUploadRejected(false);\n    images.map(image => {\n      image.preview = URL.createObjectURL(image);\n    });\n\n    if (images.length) {\n      setImage(images[0]);\n    }\n  };\n\n  const onDropRejected = () => {\n    setUploadRejected(true);\n  };\n\n  let avatar;\n\n  if (!loading && author && author.image && author.image.largeUrl) {\n    avatar = {\n      preview: author.image.largeUrl\n    };\n  }\n\n  if (localImage !== null) {\n    avatar = localImage;\n  }\n\n  const handlesSubmit = async () => {\n    setBtnLoading(true);\n    await AuthHelper.refreshToken();\n\n    if (localImage) {\n      imagesUrl = await uploadMultipleImages([localImage]);\n      setFieldValue('image', imagesUrl[0][0]);\n    } else {\n      try {\n        await addAuthor({\n          variables: {\n            author: _objectSpread({}, author, values)\n          }\n        });\n        setBtnLoading(false);\n        if (error != '') openModal({\n          config: {\n            disableDragging: false,\n            minHeight: 'auto',\n            size: {\n              width: 350,\n              height: 260\n            },\n            enableResizing: {\n              bottom: true,\n              bottomLeft: true,\n              bottomRight: true,\n              left: true,\n              right: true,\n              top: true,\n              topLeft: true,\n              topRight: true\n            }\n          },\n          modalClass: 'customModal',\n          closeOnClickOutside: true,\n          component: SuccessModal\n        });\n      } catch (error) {\n        setBtnLoading(false);\n        setError(error.graphQLErrors[0].message);\n      }\n    }\n  };\n\n  const [addAuthor] = useMutation(UPDATE_AUTHOR);\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Profile Setting\",\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), uploadRejected && __jsx(Alert, {\n    colors: \"error\",\n    mb: 30,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Maximum upload size 1MB\")), __jsx(ChangeProfilePicture, {\n    onPreviewDrop: onPreviewDrop,\n    proPic: avatar,\n    maxSize: 1024000,\n    onDropRejected: onDropRejected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Name\",\n    changed: handleChange('name'),\n    value: values.name,\n    error: errors.name,\n    touched: touched,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Address\",\n    changed: handleChange('address'),\n    value: values.address,\n    error: errors.address,\n    touched: touched,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'text',\n      required: 'required'\n    },\n    label: \"Web\",\n    changed: handleChange('website'),\n    value: values.website,\n    error: errors.website,\n    touched: touched,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), __jsx(Button, {\n    onClick: handlesSubmit,\n    title: \"Save Changes\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    mt: 10,\n    width: 1,\n    isLoading: btnLoading,\n    loaderColor: \"#ffffff\",\n    iconPosition: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }));\n};\n\nexport default EditProfileEnhancher(EditProfile);","map":{"version":3,"sources":["/Users/bhavikshah/Work/headless-graphql/packages/web/containers/AccountSetting/EditProfile/index.js"],"names":["React","useState","useEffect","withFormik","Input","Heading","Button","ChangeProfilePicture","openModal","SuccessModal","Alert","uploadMultipleImages","useMutation","AuthHelper","UPDATE_AUTHOR","GET_AUTHOR","imagesUrl","EditProfileEnhancher","enableReinitialize","mapPropsToValues","props","author","loading","name","website","address","displayName","EditProfile","localImage","setImage","error","setError","btnLoading","setBtnLoading","uploadRejected","setUploadRejected","values","touched","errors","handleChange","setFieldValue","image","addAuthor","variables","graphQLErrors","message","onPreviewDrop","images","map","preview","URL","createObjectURL","length","onDropRejected","avatar","largeUrl","handlesSubmit","refreshToken","config","disableDragging","minHeight","size","width","height","enableResizing","bottom","bottomLeft","bottomRight","left","right","top","topLeft","topRight","modalClass","closeOnClickOutside","component","textAlign","type","required"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { withFormik } from 'formik';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport ChangeProfilePicture from './UploadImage';\nimport { openModal } from '@redq/reuse-modal';\nimport SuccessModal from '../../../containers/ModalContainer/SuccessModal';\nimport Alert from 'reusecore/src/elements/Alert';\n\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\n\nimport { UPDATE_AUTHOR } from 'core/graphql/Mutations';\nimport { GET_AUTHOR } from 'core/graphql/Author';\nlet imagesUrl = [];\nconst EditProfileEnhancher = withFormik({\n  enableReinitialize: 'true',\n  mapPropsToValues: props => {\n    const { author, loading } = props;\n    const name = !loading && author && author.name ? author.name : '';\n    const website = !loading && author && author.website ? author.website : '';\n    const address = !loading && author && author.address ? author.address : '';\n    return {\n      name,\n      address,\n      website,\n    };\n  },\n  displayName: 'EditProfileForm', // helps with React DevTools\n});\n\nconst EditProfile = props => {\n  const [localImage, setImage] = useState(null);\n  const [error, setError] = useState('');\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [uploadRejected, setUploadRejected] = useState(false);\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    setFieldValue,\n    loading,\n    author,\n  } = props;\n\n  useEffect(() => {\n    (async function() {\n      if (values.image) {\n        try {\n          await addAuthor({\n            variables: {\n              author: {\n                ...author,\n                ...values,\n              },\n            },\n          });\n\n          setBtnLoading(false);\n        } catch (error) {\n          setError(error.graphQLErrors[0].message);\n          setBtnLoading(false);\n        }\n      }\n    })();\n  }, [values.image]);\n  const onPreviewDrop = images => {\n    setUploadRejected(false);\n    images.map(image => {\n      image.preview = URL.createObjectURL(image);\n    });\n    if (images.length) {\n      setImage(images[0]);\n    }\n  };\n  const onDropRejected = () => {\n    setUploadRejected(true);\n  };\n  let avatar;\n  if (!loading && author && author.image && author.image.largeUrl) {\n    avatar = { preview: author.image.largeUrl };\n  }\n  if (localImage !== null) {\n    avatar = localImage;\n  }\n  const handlesSubmit = async () => {\n    setBtnLoading(true);\n    await AuthHelper.refreshToken();\n    if (localImage) {\n      imagesUrl = await uploadMultipleImages([localImage]);\n      setFieldValue('image', imagesUrl[0][0]);\n    } else {\n      try {\n        await addAuthor({\n          variables: {\n            author: {\n              ...author,\n              ...values,\n            },\n          },\n        });\n        setBtnLoading(false);\n        if (error != '')\n          openModal({\n            config: {\n              disableDragging: false,\n              minHeight: 'auto',\n              size: {\n                width: 350,\n                height: 260,\n              },\n              enableResizing: {\n                bottom: true,\n                bottomLeft: true,\n                bottomRight: true,\n                left: true,\n                right: true,\n                top: true,\n                topLeft: true,\n                topRight: true,\n              },\n            },\n            modalClass: 'customModal',\n            closeOnClickOutside: true,\n            component: SuccessModal,\n          });\n      } catch (error) {\n        setBtnLoading(false);\n        setError(error.graphQLErrors[0].message);\n      }\n    }\n  };\n  const [addAuthor] = useMutation(UPDATE_AUTHOR);\n\n  return (\n    <>\n      <Heading\n        as=\"h3\"\n        content=\"Profile Setting\"\n        fontSize={18}\n        color=\"#333333\"\n        fontWeight={600}\n      />\n      {uploadRejected && (\n        <Alert colors=\"error\" mb={30}>\n          <div style={{ textAlign: 'center' }}>Maximum upload size 1MB</div>\n        </Alert>\n      )}\n      <ChangeProfilePicture\n        onPreviewDrop={onPreviewDrop}\n        proPic={avatar}\n        maxSize={1024000}\n        onDropRejected={onDropRejected}\n      />\n      <Input\n        elementType=\"input\"\n        elementConfig={{\n          type: 'text',\n          required: 'required',\n        }}\n        label=\"Name\"\n        changed={handleChange('name')}\n        value={values.name}\n        error={errors.name}\n        touched={touched}\n      />\n      <Input\n        elementType=\"input\"\n        elementConfig={{\n          type: 'text',\n          required: 'required',\n        }}\n        label=\"Address\"\n        changed={handleChange('address')}\n        value={values.address}\n        error={errors.address}\n        touched={touched}\n      />\n      <Input\n        elementType=\"input\"\n        elementConfig={{\n          type: 'text',\n          required: 'required',\n        }}\n        label=\"Web\"\n        changed={handleChange('website')}\n        value={values.website}\n        error={errors.website}\n        touched={touched}\n      />\n      <Button\n        onClick={handlesSubmit}\n        title=\"Save Changes\"\n        bg=\"#30C56D\"\n        color=\"#ffffff\"\n        mt={10}\n        width={1}\n        isLoading={btnLoading}\n        loaderColor=\"#ffffff\"\n        iconPosition=\"left\"\n      />\n    </>\n  );\n};\n\nexport default EditProfileEnhancher(EditProfile);\n"]},"metadata":{},"sourceType":"module"}