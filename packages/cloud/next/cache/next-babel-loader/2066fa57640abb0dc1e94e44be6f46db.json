{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport { PostLoader } from '../../components/Placeholder';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_DRAFT_POST } from 'core/graphql/Profile.query';\nimport { CURRENCY } from '../../Config';\nimport PostCard from '../../components/PostCard';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\nexport default withRouter(function UserListingPost({\n  router: {\n    query: {\n      username\n    }\n  }\n}) {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  let QUERY_VARIABLES;\n  QUERY_VARIABLES = {\n    USERNAME: username,\n    LIMIT: 12\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_DRAFT_POST, {\n    variables: QUERY_VARIABLES\n  });\n  const userDraftPosts = data && data.author && data.author.draft && data.author.draft.data ? data.author.draft.data : [];\n  const totalPost = data && data.author && data.author.draft ? data.author.draft.total : 0;\n  const postCount = userDraftPosts.length;\n  if (error) return __jsx(OnError, null);\n  return __jsx(Grid, {\n    style: {\n      paddingLeft: 15,\n      paddingRight: 15\n    }\n  }, !loading && userDraftPosts.length === 0 ? __jsx(NoItemFound, null) : __jsx(ListGrid, {\n    data: userDraftPosts,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: ['100%', '50%', '33.33%', '25%'],\n    component: item => {\n      const postImg = item.image ? item.image.url : '';\n      const postFallbackImage = item.image ? item.image.largeUrl : '';\n      return __jsx(Link, {\n        href: `${SINGLE_POST_PAGE}/${item.slug}`\n      }, __jsx(\"a\", null, __jsx(PostCard, {\n        currency: CURRENCY,\n        title: item.title,\n        price: item.price,\n        imageSrc: [postImg, postFallbackImage]\n      })));\n    },\n    loading: loading ? loading : loadingMore,\n    placeholder: __jsx(PostLoader, null),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          const oldPosts = prev.author.draft.data;\n          const newPosts = fetchMoreResult.author.draft.data;\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              const concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.author.draft.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    }\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}