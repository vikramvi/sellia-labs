{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_NEAREST_POST } from 'core/graphql/NearestPost.query';\nimport { CURRENCY } from '../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport PageMeta from '../components/PageMeta';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../components/Loader/CardLoader';\nimport PostCard from '../components/PostCard';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(withLayout(function (_ref) {\n  var location = _ref.location;\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      paginate = _useState2[1];\n\n  var QUERY_VARIABLES = {\n    page: 1,\n    LIMIT: 4,\n    location: location\n  };\n\n  var _useQuery = useQuery(GET_NEAREST_POST, {\n    variables: QUERY_VARIABLES\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore;\n\n  if (error) return __jsx(OnError, null);\n  var postCount = data && data.nearest && data.nearest.data ? data.nearest.data.length : 1;\n  var nearest = data && data.nearest && data.nearest.data ? data.nearest.data : [];\n  var totalPost = data && data.nearest ? data.nearest.total : 1;\n\n  var renderNearestPost = function renderNearestPost(item) {\n    var title = item.title,\n        slug = item.slug,\n        _item$price = item.price,\n        price = _item$price === void 0 ? 0.0 : _item$price,\n        _item$image = item.image,\n        url = _item$image.url,\n        largeUrl = _item$image.largeUrl;\n    return __jsx(Link, {\n      href: \"\".concat(SINGLE_POST_PAGE, \"/\").concat(slug)\n    }, __jsx(\"a\", null, __jsx(PostCard, {\n      currency: CURRENCY,\n      title: title,\n      price: price,\n      imageSrc: [url, largeUrl]\n    })));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(PageMeta, {\n    title: \"Recent Post\",\n    description: \"Recent Post\"\n  }), __jsx(Box, {\n    mt: 50,\n    mb: 50\n  }, __jsx(Grid, null, __jsx(Heading, {\n    content: \"Nearest Post\",\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    }\n  }), !loading && !nearest.length ? __jsx(NoItemFound, null) : __jsx(ListGrid, {\n    data: nearest,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1, 1 / 2, 1 / 4],\n    component: renderNearestPost,\n    loading: loading ? loading : loadingMore,\n    isLoading: loadingMore,\n    placeholder: __jsx(CardLoader, null),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: function handleLoadMore(loading) {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: function updateQuery(prev, _ref2) {\n          var fetchMoreResult = _ref2.fetchMoreResult;\n\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              return _Object$assign({}, prev, {\n                nearest: {\n                  data: [].concat(_toConsumableArray(prev.nearest.data), _toConsumableArray(fetchMoreResult.nearest.data)),\n                  total: totalPost\n                }\n              });\n            }\n          }\n        }\n      });\n    }\n  }))));\n}));","map":null,"metadata":{},"sourceType":"module"}