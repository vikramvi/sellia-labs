{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport Input from '../../../components/Input';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Button from 'reusecore/src/elements/Button';\nimport { withFormik } from 'formik';\nimport AuthHelper from '../../../helpers/authHelper';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from '../../SignInForm/style';\nvar ResetPassEnhancer = withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      currentPass: '',\n      newPass: '',\n      confirmPass: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    currentPass: Yup.string().required('Current Password is required!'),\n    newPass: Yup.string().required('New Password is required'),\n    confirmPass: Yup.string().oneOf([Yup.ref('newPass'), null], \"Password don't match\").required('Password Confirm is required')\n  })\n});\n\nvar ResetPass = function ResetPass(_ref) {\n  var _jsx, _jsx2;\n\n  var values = _ref.values,\n      touched = _ref.touched,\n      errors = _ref.errors,\n      handleChange = _ref.handleChange,\n      handleSubmit = _ref.handleSubmit,\n      handleBlur = _ref.handleBlur;\n\n  var _useState = useState(''),\n      message = _useState[0],\n      setMessage = _useState[1];\n\n  var _useState2 = useState(false),\n      isSubmitted = _useState2[0],\n      setIssubmit = _useState2[1];\n\n  handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var hasPasswordReset;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIssubmit(true);\n\n              if (!(Object.keys(errors).length !== 0)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return AuthHelper.changePassword(values.currentPass, values.newPass);\n\n            case 5:\n              hasPasswordReset = _context.sent;\n\n              if (hasPasswordReset && !hasPasswordReset.error) {\n                setMessage('Password Reset Successful!');\n              } else if (hasPasswordReset.error) {\n                setMessage(hasPasswordReset.error.message);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Heading, {\n    as: \"h3\",\n    content: \"Password Setting\",\n    pb: 32,\n    fontSize: 18,\n    color: \"#333333\",\n    fontWeight: 600\n  }), __jsx(FormGroup, {\n    className: errors.currentPass ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    onBlur: handleBlur('currentPass'),\n    label: \"Current Password\",\n    changed: handleChange('currentPass'),\n    secureTextEntry: true,\n    value: values.currentPass,\n    error: errors.currentPass,\n    touched: touched\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.currentPass && touched.currentPass || isSubmitted && errors.currentPass ? errors.currentPass : null)), __jsx(FormGroup, {\n    className: errors.newPass ? 'hasErrorMsg' : ''\n  }, __jsx(Input, (_jsx = {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    label: \"New Password\",\n    changed: handleChange('newPass'),\n    secureTextEntry: true,\n    onBlur: handleBlur('newPass'),\n    value: values.newPass\n  }, _defineProperty(_jsx, \"secureTextEntry\", true), _defineProperty(_jsx, \"error\", errors.newPass), _defineProperty(_jsx, \"touched\", touched), _jsx)), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.newPass && touched.newPass || isSubmitted && errors.newPass ? errors.newPass : null)), __jsx(FormGroup, {\n    className: errors.confirmPass ? 'hasErrorMsg' : ''\n  }, __jsx(Input, (_jsx2 = {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    label: \"Confirm Password\",\n    changed: handleChange('confirmPass'),\n    onBlur: handleBlur('confirmPass'),\n    secureTextEntry: true,\n    value: values.confirmPass\n  }, _defineProperty(_jsx2, \"secureTextEntry\", true), _defineProperty(_jsx2, \"error\", errors.confirmPass), _defineProperty(_jsx2, \"touched\", touched), _jsx2)), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.confirmPass && touched.confirmPass || isSubmitted && errors.confirmPass ? errors.confirmPass : null)), message ? __jsx(Box, {\n    flexBox: true,\n    mt: 20,\n    mb: 15,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(ErrorNotification, null, message)) : '', __jsx(Button, {\n    onClick: handleSubmit // disabled={Object.keys(errors).length !== 0}\n    ,\n    title: \"Save Changes\",\n    bg: \"#30C56D\",\n    color: \"#ffffff\",\n    width: 1,\n    mt: 10\n  }));\n};\n\nexport default ResetPassEnhancer(ResetPass);","map":null,"metadata":{},"sourceType":"module"}