{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_ALL_POST } from 'core/graphql/AllPost.query';\nimport { CURRENCY } from '../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport Heading from 'reusecore/src/elements/Heading';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../components/Loader/CardLoader';\nimport PostCard from '../components/PostCard';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport PageMeta from '../components/PageMeta';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(withLayout(() => {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  const QUERY_VARIABLES = {\n    LIMIT: 20\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_ALL_POST, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return __jsx(OnError, null);\n  const postCount = data && data.posts && data.posts.data ? data.posts.data.length : 1;\n  const posts = data && data.posts && data.posts.data ? data.posts.data : [];\n  const totalPost = data && data.posts ? data.posts.total : 1;\n\n  const renderRecentPost = item => {\n    const {\n      title,\n      slug,\n      price = 0.0,\n      image: {\n        url,\n        largeUrl\n      }\n    } = item;\n    return __jsx(Link, {\n      href: `${SINGLE_POST_PAGE}/${slug}`\n    }, __jsx(\"a\", null, __jsx(PostCard, {\n      currency: CURRENCY,\n      title: title,\n      price: price,\n      imageSrc: [url, largeUrl]\n    })));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(PageMeta, {\n    title: \"Recent Post\",\n    description: \"Recent Post\"\n  }), __jsx(Box, {\n    mt: 50,\n    mb: 50\n  }, __jsx(Grid, null, __jsx(Heading, {\n    content: \"Recent Posts\",\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    }\n  }), !loading && !posts.length ? __jsx(NoItemFound, null) : __jsx(ListGrid, {\n    data: posts,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1, 1 / 2, 1 / 4],\n    component: renderRecentPost,\n    loading: loading ? loading : loadingMore,\n    loaderColor: \"#ffffff\",\n    placeholder: __jsx(CardLoader, null),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: () => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              return _Object$assign({}, prev, {\n                posts: {\n                  data: [...prev.posts.data, ...fetchMoreResult.posts.data],\n                  total: totalPost\n                }\n              });\n            }\n          }\n        }\n      });\n    }\n  }))));\n}));","map":null,"metadata":{},"sourceType":"module"}