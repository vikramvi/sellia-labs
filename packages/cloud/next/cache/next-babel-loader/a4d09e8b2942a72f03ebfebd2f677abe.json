{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useContext, useState } from 'react';\nimport Link from 'next/link';\nimport ListView from '../../../components/ListView';\nimport { ListLoader } from '../../../components/Placeholder';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_SEARCH_POST } from 'core/graphql/Search.query';\nimport { CURRENCY } from '../../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport { SearchContext } from '../../../contexts/SearchContext';\nimport { getUrlToState, setStateToUrl } from '../../../helpers/urlHandler';\nimport PlaceholderImg from 'core/static/images/thumb-grid-placeholder.svg';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\n\nconst timeFormatAMPM = date => {\n  return date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n};\n\nconst SearchPostItem = () => {\n  let publishTime = '';\n  const urlState = getUrlToState();\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_SEARCH_POST, {\n    variables: {\n      queryVariables: urlState\n    }\n  });\n  if (error) return __jsx(OnError, null);\n  let searchPosts = data && data.searchPosts && data.searchPosts.data ? data.searchPosts.data : [];\n  const postCount = searchPosts ? searchPosts.length : 1;\n  const totalPost = data && data.searchPosts && data.searchPosts.total ? data.searchPosts.total : 1;\n  const searchPostsData = searchPosts.map(post => {\n    if (post.createdAt) {\n      if (post && post.createdAt && post.createdAt.seconds) {\n        const createdTime = new Date(post.createdAt.seconds * 1000);\n        publishTime = timeFormatAMPM(createdTime);\n      } else if (post && post.createdAt && post.createdAt._seconds) {\n        const createdTime = new Date(post.createdAt._seconds * 1000);\n        publishTime = timeFormatAMPM(createdTime);\n      }\n\n      return _objectSpread({}, post, {\n        publishTime\n      });\n    } else {\n      return _objectSpread({}, post);\n    }\n  });\n  return __jsx(Fragment, null, searchPostsData.length === 0 && !loading ? __jsx(NoItemFound, null) : process.browser && __jsx(ListGrid, {\n    data: searchPostsData,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1],\n    componentContainerStyle: {\n      p: 0,\n      borderBottom: '1px solid #eeeeee'\n    },\n    componentWrapperStyle: {\n      margin: 0\n    },\n    component: item => {\n      return __jsx(Link, {\n        href: `${SINGLE_POST_PAGE}/${item.slug}`\n      }, __jsx(\"a\", null, __jsx(ListView, {\n        currency: CURRENCY,\n        title: item.title,\n        price: item.price,\n        source: item.image ? item.image.url : PlaceholderImg,\n        fallbackSource: item.image ? item.image.largeUrl : PlaceholderImg,\n        negotiable: item.isNegotiable,\n        condition: item.condition,\n        location: item && item.formattedLocation && item.formattedLocation.formattedAddress !== null ? item.formattedLocation.formattedAddress : 'Location goes here',\n        distance: item.distance !== null && item.distance !== undefined ? `Approximately ${Math.floor(item.distance)} km away` : '',\n        icon: \"md-pin\",\n        postedTime: item.publishTime ? `Ad posted at ${item.publishTime}` : ''\n      })));\n    },\n    loading: loading ? loading : loadingMore,\n    loaderColor: \"#ffffff\",\n    placeholder: __jsx(ListLoader, null),\n    limit: state.LIMIT,\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      setStateToUrl({\n        page: state.page + 1\n      });\n      fetchMore({\n        variables: {\n          queryVariables: _objectSpread({}, urlState, {\n            page: state.page + 1\n          })\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              dispatch({\n                type: 'UPDATE',\n                payload: _objectSpread({}, state, {\n                  page: state.page + 1\n                })\n              });\n              return {\n                searchPosts: {\n                  data: [...prev.searchPosts.data, ...fetchMoreResult.searchPosts.data],\n                  total: totalPost\n                }\n              };\n            }\n          }\n        }\n      });\n    }\n  }));\n};\n\nconst SearchPost = props => {\n  return __jsx(Fragment, null, __jsx(SearchPostItem, props));\n};\n\nexport default SearchPost;","map":null,"metadata":{},"sourceType":"module"}