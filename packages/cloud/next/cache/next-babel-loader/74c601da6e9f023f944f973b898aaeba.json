{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport styled from 'styled-components';\nimport { variant, alignItems, boxShadow, themeGet } from 'styled-system';\nimport { buttonStyle, colorStyle, sizeStyle } from '../../theme/customVariant';\nimport { base } from '../base';\nconst ButtonStyle = styled.button.withConfig({\n  displayName: \"buttonstyle__ButtonStyle\",\n  componentId: \"ntq24p-0\"\n})([\"cursor:pointer;display:inline-flex;align-items:center;justify-content:center;color:\", \";background-color:\", \";min-height:\", \"px;min-width:\", \"px;border-radius:\", \"px;font-family:inherit;font-size:\", \"px;font-weight:\", \";text-decoration:none;text-transform:capitalize;padding-top:\", \"px;padding-bottom:\", \"px;padding-left:\", \"px;padding-right:\", \"px;border:0;transition:all 0.3s ease;span.btn-text{padding-left:\", \"px;padding-right:\", \"px;}span.btn-icon{display:flex;> div{display:flex !important;}}&:focus{outline:none;}&.is-material{box-shadow:0px 1px 5px 0px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 3px 1px -2px rgba(0,0,0,0.12);}&.is-loading{.btn-text{padding-left:\", \"px;padding-right:\", \"px;}}\", \" \", \" \", \" \", \" \", \" \", \"\"], themeGet('colors.white', '#ffffff'), themeGet('colors.primary', '#028489'), themeGet('heights.3', '48'), themeGet('widths.3', '48'), themeGet('radius.0', '3'), themeGet('fontSizes.4', '16'), themeGet('fontWeights.4', '500'), themeGet('space.2', '8'), themeGet('space.2', '8'), themeGet('space.4', '15'), themeGet('space.4', '15'), themeGet('space.1', '4'), themeGet('space.1', '4'), themeGet('space.2', '8'), themeGet('space.2', '8'), alignItems, boxShadow, buttonStyle, colorStyle, sizeStyle, base); // prop types can also be added from the style functions\n\nButtonStyle.propTypes = _objectSpread(_objectSpread(_objectSpread({}, alignItems.propTypes), boxShadow.propTypes), variant.propTypes);\nButtonStyle.displayName = 'ButtonStyle';\nexport default ButtonStyle;","map":null,"metadata":{},"sourceType":"module"}