{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query GetAuthorMobile($username: ID!) {\\n    author(id: $username) {\\n      id\\n      mobile {\\n        number\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Icon from 'react-icons-kit';\nimport { chevronRight } from 'react-icons-kit/ionicons/chevronRight';\nimport { chevronLeft } from 'react-icons-kit/ionicons/chevronLeft';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport Box from 'reusecore/src/elements/Box';\nimport Button from 'reusecore/src/elements/Button';\nimport Text from 'reusecore/src/elements/Text';\nimport Dropdown from '../../../components/DropdownSelect';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { ADD_POST } from 'core/graphql/Mutations';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport PublishModal from '../../ModalContainer/PostPublishModal';\nimport AuthHelper from '../../../helpers/authHelper';\nimport Link from 'next/link';\nimport { ACCOUNT_SETTING_PAGE } from 'core/navigation/constant';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nimport gql from 'graphql-tag';\nvar GET_AUTHOR_MOBILE_NUMBER = gql(_templateObject());\n\nvar publishModal = function publishModal(newPost) {\n  if (newPost && newPost.data && newPost.data.addPost && newPost.data.addPost.status === 'publish') {\n    openModal({\n      config: {\n        disableDragging: false,\n        size: {\n          width: 360,\n          height: 320\n        },\n        enableResizing: {\n          bottom: true,\n          bottomLeft: true,\n          bottomRight: true,\n          left: true,\n          right: true,\n          top: true,\n          topLeft: true,\n          topRight: true\n        }\n      },\n      closeOnClickOutside: true,\n      component: PublishModal,\n      componentProps: {\n        data: {\n          closeModal: closeModal,\n          title: 'Congrats!!!',\n          message: 'Your account information saved successfully',\n          slug: newPost.data.addPost.slug\n        }\n      }\n    });\n  }\n};\n\nvar imagesUrl = [];\n\nvar ContactNumberInfo = function ContactNumberInfo(_ref) {\n  var userId = _ref.userId;\n\n  var _useQuery = useQuery(GET_AUTHOR_MOBILE_NUMBER, {\n    variables: {\n      username: userId\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useContext = useContext(AddPostContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(false),\n      btnLoading = _useState[0],\n      setBtnLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      publishBtnLoading = _useState2[0],\n      setPublishBtnLoading = _useState2[1];\n\n  var step = state.step,\n      adPost = state.adPost;\n\n  var _useMutation = useMutation(ADD_POST),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      postMutation = _useMutation2[0];\n\n  var handlePostSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return AuthHelper.refreshToken();\n\n            case 2:\n              setPublishBtnLoading(true);\n              dispatch({\n                type: 'UPDATE_ADPOST',\n                payload: {\n                  key: 'status',\n                  value: 'publish'\n                }\n              });\n\n              if (!adPost.localGallery.length) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 7;\n              return uploadMultipleImages(adPost.localGallery);\n\n            case 7:\n              imagesUrl = _context.sent;\n\n              if (imagesUrl && imagesUrl.length > 0) {\n                dispatch({\n                  type: 'UPDATE_FULL_ADPOST',\n                  payload: {\n                    gallery: adPost.gallery.concat(imagesUrl[0]),\n                    image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n                    localImage: {},\n                    localGallery: []\n                  }\n                });\n              }\n\n              _context.next = 24;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.next = 14;\n              return postMutation({\n                variables: {\n                  post: _objectSpread({}, finalData, {\n                    status: 'publish'\n                  })\n                }\n              });\n\n            case 14:\n              _data = _context.sent;\n              setPublishBtnLoading(false);\n\n              if (!adPost.id) {\n                dispatch({\n                  type: 'UPDATE_ADPOST',\n                  payload: {\n                    key: 'id',\n                    value: _data.data.addPost.id\n                  }\n                });\n              }\n\n              publishModal(_data);\n              _context.next = 24;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](11);\n              console.log(_context.t0, 'error');\n              setPublishBtnLoading(false);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[11, 20]]);\n    }));\n\n    return function handlePostSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var preImage = adPost.preImage,\n      preGallery = adPost.preGallery,\n      localImage = adPost.localImage,\n      localGallery = adPost.localGallery,\n      location = adPost.location,\n      prossedAdPostData = _objectWithoutProperties(adPost, [\"preImage\", \"preGallery\", \"localImage\", \"localGallery\", \"location\"]);\n\n  var finalData = prossedAdPostData;\n\n  if (location && location.lat) {\n    finalData = _objectSpread({}, prossedAdPostData, {\n      location: location\n    });\n  }\n\n  useEffect(function () {\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _data2;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!imagesUrl.length) {\n                _context2.next = 15;\n                break;\n              }\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return postMutation({\n                variables: {\n                  post: _objectSpread({}, finalData, {\n                    status: 'publish'\n                  })\n                }\n              });\n\n            case 4:\n              _data2 = _context2.sent;\n              setPublishBtnLoading(false);\n              setBtnLoading(false);\n\n              if (!adPost.id) {\n                dispatch({\n                  type: 'UPDATE_ADPOST',\n                  payload: {\n                    key: 'id',\n                    value: _data2.data.addPost.id\n                  }\n                });\n              }\n\n              publishModal(_data2);\n              _context2.next = 15;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n              setPublishBtnLoading(false);\n              setBtnLoading(false);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 11]]);\n    }))();\n  }, [prossedAdPostData.gallery]);\n  var mobiles = [];\n\n  if (!loading && data.author && data.author.mobile && data.author.mobile.length) {\n    data.author.mobile.map(function (mobile) {\n      mobiles.push({\n        value: mobile.number,\n        label: mobile.number\n      });\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Text, {\n    content: \"Select the mobile number you want as contact\",\n    pb: 20,\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  }), !mobiles.length && !loading ? __jsx(Link, {\n    href: \"\".concat(ACCOUNT_SETTING_PAGE, \"?view=add-mobile-number\")\n  }, __jsx(Button, {\n    title: \"Add Mobile Number Now\",\n    variant: \"textButton\"\n  })) : null, mobiles.length && !loading ? __jsx(React.Fragment, null, __jsx(Text, {\n    content: \"Select Your Mobile Number\",\n    style: {\n      fontSize: 16,\n      fontWeight: 400,\n      color: '#595959'\n    }\n  }), __jsx(Dropdown, {\n    options: mobiles,\n    value: {\n      label: adPost.contactNumber,\n      value: adPost.contactNumber\n    },\n    onChange: function onChange(contact, index, options) {\n      dispatch({\n        type: 'UPDATE_ADPOST',\n        payload: {\n          key: 'contactNumber',\n          value: contact.value\n        }\n      });\n    },\n    placeholder: \"Contact Number\",\n    label: \"Contact Number\"\n  })) : null, __jsx(Box, {\n    flexBox: true,\n    justifyContent: \"space-between\"\n  }, __jsx(Button, {\n    title: \"Previous\",\n    iconPosition: \"left\",\n    onClick: function onClick() {\n      return dispatch({\n        type: 'UPDATE_STEP',\n        payload: {\n          step: step - 1\n        }\n      });\n    },\n    disabled: btnLoading,\n    icon: __jsx(Icon, {\n      icon: chevronLeft,\n      size: 14,\n      color: \"#8C8C8C\"\n    }),\n    variant: \"textButton\",\n    mr: 30,\n    ml: \"auto\"\n  }), __jsx(Button, {\n    title: \"Done\",\n    iconPosition: \"right\",\n    disabled: adPost.contactNumber.length === 0 || btnLoading,\n    isLoading: publishBtnLoading,\n    loaderColor: \"#ffffff\",\n    onClick: handlePostSubmit,\n    icon: __jsx(Icon, {\n      icon: chevronRight,\n      size: 21,\n      color: \"#ffffff\"\n    }),\n    style: {\n      backgroundColor: adPost.contactNumber.length === 0 || btnLoading ? '#d2d2d2' : '#30C56D'\n    }\n  })));\n};\n\nexport default ContactNumberInfo;","map":null,"metadata":{},"sourceType":"module"}