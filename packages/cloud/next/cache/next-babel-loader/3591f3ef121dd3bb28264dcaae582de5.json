{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport Router from 'next/router';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport Icon from 'react-icons-kit';\nimport { locked } from 'react-icons-kit/iconic/locked';\nimport { phone } from 'react-icons-kit/iconic/phone';\nimport Text from 'reusecore/src/elements/Text';\nimport Button from 'reusecore/src/elements/Button';\nimport AuthHeader from '../../components/AuthHeader';\nimport Input from '../../components/Input';\nimport Box from 'reusecore/src/elements/Box';\nimport { FormGroup, ErrorNotification } from '../SignInForm/style';\nimport { REGISTER } from 'core/graphql/Mutations';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../helpers/authHelper';\nimport { setFirebaseCookie } from '../../helpers/session';\nimport redirect from '../../helpers/redirect';\nconst SignupEnhancher = withFormik({\n  enableReinitialize: true,\n  mapPropsToValues: props => ({\n    email: '',\n    password: ''\n  }),\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Invalid email address').required('Email is required!'),\n    password: Yup.string().required('Password is required')\n  })\n});\nlet token = '';\n\nconst SignUpForm = ({\n  values,\n  touched,\n  errors,\n  handleChange,\n  handleSubmit,\n  handleBlur,\n  setFieldValue\n}) => {\n  const {\n    0: error,\n    1: setError\n  } = useState({});\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [registerMutation, {\n    data\n  }] = useMutation(REGISTER);\n\n  handleSubmit = async () => {\n    setLoading(true);\n\n    if (!Object.keys(errors).length) {\n      const {\n        email,\n        password\n      } = values;\n      const provider = 'password';\n      const {\n        user,\n        error\n      } = await AuthHelper.signUp(provider, email, password);\n\n      if (user) {\n        token = await user.getIdToken();\n        setFieldValue('token', token);\n      } else if (error) {\n        setLoading(false);\n        setError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    (async function () {\n      try {\n        if (values.token) {\n          const res = await registerMutation({\n            variables: {\n              user: {\n                email: values.email,\n                token: values.token\n              }\n            }\n          });\n\n          if (res && res.data && res.data.register) {\n            setLoading(false);\n            const user = res.data.register;\n            setFirebaseCookie('id_token', token);\n            setFirebaseCookie('user', _objectSpread({}, user));\n            redirect({}, '/');\n          }\n        }\n      } catch (error) {\n        setLoading(false);\n      }\n    })();\n  }, [values.token]);\n  return __jsx(React.Fragment, null, __jsx(AuthHeader, null), __jsx(FormGroup, {\n    className: errors.email ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'email',\n      required: 'required'\n    },\n    value: values.email,\n    error: errors.email,\n    touched: touched,\n    label: \"Email\",\n    onBlur: handleBlur('email'),\n    changed: handleChange('email'),\n    highlightColor: \"#f09\"\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.email && touched.email && errors.email)), __jsx(FormGroup, {\n    className: errors.password ? 'hasErrorMsg' : ''\n  }, __jsx(Input, {\n    elementType: \"input\",\n    elementConfig: {\n      type: 'password',\n      required: 'required'\n    },\n    value: values.password,\n    error: errors.password,\n    onBlur: handleBlur('password'),\n    touched: touched,\n    label: \"Password\",\n    changed: handleChange('password')\n  }), __jsx(\"span\", {\n    className: \"errorMsg\"\n  }, errors.password && touched.password && errors.password)), error.message ? __jsx(Box, {\n    flexBox: true,\n    mt: 20,\n    mb: 15,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(ErrorNotification, null, error.message)) : '', __jsx(Button, {\n    onClick: handleSubmit,\n    title: \"Sign up now\",\n    width: 1,\n    isLoading: loading,\n    loaderColor: \"#fff\",\n    icon: __jsx(Icon, {\n      icon: locked,\n      size: 21\n    }),\n    mt: 20\n  }), __jsx(Box, {\n    flexBox: true,\n    mt: 20,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(Text, {\n    content: \" Have an account ?\",\n    color: \"#8C8C8C\",\n    mb: \"0\"\n  }), __jsx(Button, {\n    title: \"Sign In\",\n    variant: \"textButton\",\n    ml: \"5px\",\n    onClick: () => Router.push('/signin')\n  })));\n};\n\nexport default SignupEnhancher(SignUpForm);","map":null,"metadata":{},"sourceType":"module"}