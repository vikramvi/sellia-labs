"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeDefs = void 0;
var typeDefs = "\n  scalar Date\n  type Post {\n    id: ID\n    title: String\n    slug: String\n    content: String\n    status: String\n    author: Author\n    authorId: ID\n    image: Image\n    price: Float\n    location: Location\n    formattedLocation: Location\n    distance: Float\n    categories: [Category]\n    gallery: [Image]\n    isNegotiable: Boolean\n    favouritedBy: [String]\n    condition: Boolean\n    related(limit: Int): [Post]\n    contactNumber: String\n    createdAt: Date\n    updatedAt: Date\n  }\n  type Author {\n    id: ID\n    email: String\n    username: String\n    mobile: [Mobile]\n    image: Image\n    address: String\n    website: String\n    name: String\n    posts(limit: Int, page: Int): PostWithCount\n    favourite(limit: Int, page: Int): PostWithCount\n    draft(limit: Int, page: Int) : PostWithCount\n    createdAt: Date\n    updatedAt: Date\n  }\n  type Category {\n    id: ID!\n    slug: String\n    name: String\n    value: ID\n    label: String\n    image: Image\n    posts(limit: Int, page: Int ): PostWithCount\n    createdAt: Date\n    updatedAt: Date\n  }\n  type PostWithCount {\n    data: [Post],\n    total: Int\n  }\n  type Mobile {\n    number: String\n  }\n  type Location {\n    lat: Float\n    lng: Float\n    formattedAddress: String\n  }\n  type Image {\n    url: String\n    largeUrl: String\n  }\n  type PostWithTotal {\n    data: [Post]\n    total: Int\n  }\n\n  type CategoryWithTotal {\n    data: [Category]\n    total: Int\n  }\n\n  type AuthorWithTotal {\n    data: [Author]\n    total: Int\n  }\n\n  input inputMobile {\n    number: String\n  }\n\n  input authorInput {\n    id: ID\n    email: String\n    username: String\n    image: imageInput\n    address: String\n    website: String\n    mobile: [inputMobile]\n    name: String\n    createdAt: String\n    updatedAt: String\n  }\n\n  input locationInput {\n    lat: Float!\n    lng: Float!\n    formattedAddress: String\n  }\n  input imageInput {\n    url: String\n    largeUrl: String\n  }\n\n  input categoryInput {\n    id: ID!\n    label: String\n    slug: String\n    value: ID!\n    name: String\n  }\n  input categoryPostInput {\n    title: String\n    image: imageInput\n    price: Float\n    slug: String\n  }\n  input ResetPassInput {\n    currentPass: String!\n    newPass: String!\n    confirmPass: String!\n  }\n  input LoginInput {\n    email: String!\n    password: String!\n    remember: Boolean\n    provider: String\n  }\n  input postInput {\n    id: ID\n    authorId: ID!\n    title: String!\n    slug: String!\n    content: String\n    status: String\n    image: imageInput\n    price: Float\n    location: locationInput\n    categories: [categoryInput!]!\n    gallery: [imageInput!]!\n    isNegotiable: Boolean\n    condition: Boolean\n    createdAt: String\n    updatedAt: String\n    contactNumber: String\n  }\n  input InputMobileNumber {\n    number: String!\n  }\n  type Token {\n    token: String\n  }\n  type User {\n    userId: ID!,\n    email: String,\n    error: String!,\n  }\n  input RegisterInput {\n    email: String\n    token: String!\n    mobile: [inputMobile]\n  }\n  type Notice {\n    message: String!\n  }\n\n  input SotingInput {\n    field: String\n    type: String\n  }\n\n  input adFavInput {\n    postId: String\n    id: ID\n  }\n\n  input searchParams {\n    categories: [String]\n    isNegotiable: Boolean\n    condition: Boolean\n    address: String\n    location: locationInput\n    price: [Int]\n    radius: Int\n    sorting: SotingInput\n    text: String\n    page: Int\n    limit: Int\n    initialLoading: Boolean\n  }\n\n  type Query {\n    posts(limit: Int, page: Int, status: String): PostWithTotal\n    nearest(limit: Int, page: Int, location: locationInput): PostWithTotal\n    searchPosts(searchParams: searchParams): PostWithTotal\n    post(id: ID, slug: String, lat: Float, lng: Float): Post\n    authors(limit: Int): AuthorWithTotal\n    author(username: String, id: ID): Author\n    category(id: ID, slug: String): Category\n    categories(limit: Int, string: String, page: Int): CategoryWithTotal\n  }\n\n  type Mutation {\n    addPost(input: postInput ): Post\n    addCategory( input: categoryInput ): Category\n    addAuthor( input: authorInput ): Author\n    login(input: RegisterInput) : User\n    register(input: RegisterInput) : User\n    logout(input:RegisterInput): User\n    handleFav(input: adFavInput) : PostWithTotal\n  }\n";
exports.typeDefs = typeDefs;